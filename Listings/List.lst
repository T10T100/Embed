L 1 "misc\src\List.cpp"
N
N#ifndef __LIST
N#define __LIST
N
N#include "List.h"
L 1 ".\misc\inc\List.h" 1
N
N#include <stdint.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision: 185525 $
N * Checkin $Date: 2014-05-29 12:44:48 +0100 (Thu, 29 May 2014) $
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5050106
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
N      namespace std {
N          #define __CLIBNS std::
N          extern "C" {
N    #else
S      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !1L || 0L
S
S    /* 7.18.2.1 */
S
S    /* minimum values of exact-width signed integer types */
S#define INT8_MIN                   -128
S#define INT16_MIN                -32768
S#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
S#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
S
S    /* maximum values of exact-width signed integer types */
S#define INT8_MAX                    127
S#define INT16_MAX                 32767
S#define INT32_MAX            2147483647
S#define INT64_MAX  __INT64_C(9223372036854775807)
S
S    /* maximum values of exact-width unsigned integer types */
S#define UINT8_MAX                   255
S#define UINT16_MAX                65535
S#define UINT32_MAX           4294967295u
S#define UINT64_MAX __UINT64_C(18446744073709551615)
S
S    /* 7.18.2.2 */
S
S    /* minimum values of minimum-width signed integer types */
S#define INT_LEAST8_MIN                   -128
S#define INT_LEAST16_MIN                -32768
S#define INT_LEAST32_MIN          (~0x7fffffff)
S#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
S
S    /* maximum values of minimum-width signed integer types */
S#define INT_LEAST8_MAX                    127
S#define INT_LEAST16_MAX                 32767
S#define INT_LEAST32_MAX            2147483647
S#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
S
S    /* maximum values of minimum-width unsigned integer types */
S#define UINT_LEAST8_MAX                   255
S#define UINT_LEAST16_MAX                65535
S#define UINT_LEAST32_MAX           4294967295u
S#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
S
S    /* 7.18.2.3 */
S
S    /* minimum values of fastest minimum-width signed integer types */
S#define INT_FAST8_MIN           (~0x7fffffff)
S#define INT_FAST16_MIN          (~0x7fffffff)
S#define INT_FAST32_MIN          (~0x7fffffff)
S#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
S
S    /* maximum values of fastest minimum-width signed integer types */
S#define INT_FAST8_MAX             2147483647
S#define INT_FAST16_MAX            2147483647
S#define INT_FAST32_MAX            2147483647
S#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
S
S    /* maximum values of fastest minimum-width unsigned integer types */
S#define UINT_FAST8_MAX            4294967295u
S#define UINT_FAST16_MAX           4294967295u
S#define UINT_FAST32_MAX           4294967295u
S#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
S
S    /* 7.18.2.4 */
S
S    /* minimum value of pointer-holding signed integer type */
S#if __sizeof_ptr == 8
S#define INTPTR_MIN INT64_MIN
S#else
S#define INTPTR_MIN INT32_MIN
S#endif
S
S    /* maximum value of pointer-holding signed integer type */
S#if __sizeof_ptr == 8
S#define INTPTR_MAX INT64_MAX
S#else
S#define INTPTR_MAX INT32_MAX
S#endif
S
S    /* maximum value of pointer-holding unsigned integer type */
S#if __sizeof_ptr == 8
S#define UINTPTR_MAX INT64_MAX
S#else
S#define UINTPTR_MAX INT32_MAX
S#endif
S
S    /* 7.18.2.5 */
S
S    /* minimum value of greatest-width signed integer type */
S#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
S
S    /* maximum value of greatest-width signed integer type */
S#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
S
S    /* maximum value of greatest-width unsigned integer type */
S#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
S
S    /* 7.18.3 */
S
S    /* limits of ptrdiff_t */
S#if __sizeof_ptr == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
S#else
S#define PTRDIFF_MIN INT32_MIN
S#define PTRDIFF_MAX INT32_MAX
S#endif
S
S    /* limits of sig_atomic_t */
S#define SIG_ATOMIC_MIN (~0x7fffffff)
S#define SIG_ATOMIC_MAX   2147483647
S
S    /* limit of size_t */
S#if __sizeof_ptr == 8
S#define SIZE_MAX UINT64_MAX
S#else
S#define SIZE_MAX UINT32_MAX
S#endif
S
S    /* limits of wchar_t */
S    /* NB we have to undef and redef because they're defined in both
S     * stdint.h and wchar.h */
S#undef WCHAR_MIN
S#undef WCHAR_MAX
S
S#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
S#else
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   65535
S#endif
S
S    /* limits of wint_t */
S#define WINT_MIN (~0x7fffffff)
S#define WINT_MAX 2147483647
S
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !1L || 0L
S
S    /* 7.18.4.1 macros for minimum-width integer constants */
S#define INT8_C(x)   (x)
S#define INT16_C(x)  (x)
S#define INT32_C(x)  (x)
S#define INT64_C(x)  __INT64_C(x)
S
S#define UINT8_C(x)  (x ## u)
S#define UINT16_C(x) (x ## u)
S#define UINT32_C(x) (x ## u)
S#define UINT64_C(x) __UINT64_C(x)
S
S    /* 7.18.4.2 macros for greatest-width integer constants */
S#define INTMAX_C(x)  __ESCAPE__(x ## ll)
S#define UINTMAX_C(x) __ESCAPE__(x ## ull)
S
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
N         }  /* extern "C" */
N      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
N    #ifndef __STDINT_NO_EXPORTS
N      using ::std::int8_t;
N      using ::std::int16_t;
N      using ::std::int32_t;
N      using ::std::int64_t;
N      using ::std::uint8_t;
N      using ::std::uint16_t;
N      using ::std::uint32_t;
N      using ::std::uint64_t;
N      using ::std::int_least8_t;
N      using ::std::int_least16_t;
N      using ::std::int_least32_t;
N      using ::std::int_least64_t;
N      using ::std::uint_least8_t;
N      using ::std::uint_least16_t;
N      using ::std::uint_least32_t;
N      using ::std::uint_least64_t;
N      using ::std::int_fast8_t;
N      using ::std::int_fast16_t;
N      using ::std::int_fast32_t;
N      using ::std::int_fast64_t;
N      using ::std::uint_fast8_t;
N      using ::std::uint_fast16_t;
N      using ::std::uint_fast32_t;
N      using ::std::uint_fast64_t;
N      using ::std::intptr_t;
N      using ::std::uintptr_t;
N      using ::std::intmax_t;
N      using ::std::uintmax_t;
N    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 3 ".\misc\inc\List.h" 2
N
Ntemplate <class T, typename K>
N	class List_Node {
N		public:
N			T *rlink, *llink;
N		  K key;
N		  //virtual bool TestWith (K &);
N	};
N
Ntemplate <class T>
N  class List_Iterator {
N	  public:
N	  	List_Iterator ();
N	    bool operator +  (T &);
N	    T *operator -  (T &);
N		  bool operator +  (T *);
N	    T *operator -  (T *);
N		template <typename A>
N		  List_Iterator &operator + (A &);
N		template <typename A>
N		  List_Iterator &operator + (A *);
N        template <typename A>
N		  List_Iterator &operator + (List_Iterator &);
N		template <typename A>
N		  List_Iterator &operator + (List_Iterator *);
N		template <typename A>
N		  List_Iterator &Array (A &, uint32_t);
N		template <typename A>
N		  List_Iterator &Array (A *, uint32_t);
N		  /*
N	    bool operator << (T &);
N	    bool operator >> (T &);
N		  */
N	    T *Get (uint32_t index);
N	    T *GetLast ();
N      T *GetFirst ();
N      T *GetNext (T *);
N	    int32_t Put (T &, uint32_t index);
N	    T *Remove (uint32_t index);
N		  int32_t Remove (T *);
N		  int32_t Remove (T &);
N	    uint32_t Contain ();
N	  private:
N		  T *First, *Last;
N	    uint32_t Elements;
N  };
N
L 6 "misc\src\List.cpp" 2
N
N
Ntemplate <class T>
NList_Iterator<T>::List_Iterator()
N{
N}
Ntemplate <class T>
Nbool List_Iterator<T>::operator + (T &item)
N{
N	this->Elements++;
N		T *i,*j;
N		if (!this->First) {
N			this->First = &item;
N			this->Last = &item;
N			item.rlink = (T *)0;
N			item.llink = (T *)0;
N			return true;
N		}
N		i = this->First;
N		j = (T *)0;
N		while (i != (T *)0) {
N			if (i->key > item.key) {
N				j = i;
N				i = i->rlink;
N				continue;
N			}
N			if (i->llink) {
N				i->llink->rlink = &item;
N				item.rlink = i;
N				item.llink = i->llink;
N				i->llink = &item;
N				return true;
N			}
N			item.rlink = i;
N			item.llink = (T *)0;
N			i->llink = &item;
N			this->First = &item;
N			return true;
N		}
N		j->rlink = &item;
N		item.rlink = (T *)0;
N		this->Last = &item;
N		item.llink = j;
N		return true;	
N}
Ntemplate <class T>
NT *List_Iterator<T>::operator - (T &item)
N{
N	if (this->Elements == 0)return (T *)0;
N	this->Elements--;
N	T *l = item.llink,*r = item.rlink;
N		if (!l&&!r) {
N			this->First = (T *)0;
N			this->Last = (T *)0;
N			return (T *)0;
N		}
N		if (!l) {
N			this->First = r;
N			r->llink = (T *)0;
N		}
N		else    l->rlink = r;
N		
N		if (!r) {
N   			l->rlink = (T *)0;
N			  this->Last = l;
N		}
N		else    r->llink = l;
N		return &item;	
N}
N
Ntemplate <class T>
Nbool List_Iterator<T>::operator + (T *item)
N{
N	return *this + *item;
N}
N
Ntemplate <class T>
N	template <typename A>
NList_Iterator<T> &List_Iterator<T>::operator + (A &array)
N{
N	uint32_t t = array.Contain();
N	while (t--) {
N		(*this) + array[t];
N	}
N	return *this;
N}
N
Ntemplate <class T>
N	template <typename A>
NList_Iterator<T> &List_Iterator<T>::operator + (A *array)
N{
N	A &a = *array;
N	return (*this) + a;
N}
N
Ntemplate <class T>
N	template <typename A>
NList_Iterator<T> &List_Iterator<T>::Array (A &array, uint32_t t)
N{
N	while (t--) {
N		(*this) + array[t];
N	}
N	return *this;
N}
N
Ntemplate <class T>
N	template <typename A>
NList_Iterator<T> &List_Iterator<T>::Array (A *array, uint32_t t)
N{
N	A &a = *array;
N	return this->Array(a, t);
N}
N
N		  
N
Ntemplate <class T>
NT *List_Iterator<T>::operator - (T *item)
N{
N	return *this - *item;
N}
N/*
Ntemplate <class T>
Nbool List_Iterator<T>::operator << (T &item)
N{
N	return 0;
N}
Ntemplate <class T>
Nbool List_Iterator<T>::operator >> (T &item)
N{
N	return 0;
N}
N*/
N
Ntemplate <class T>
NT *List_Iterator<T>::Get (uint32_t index)
N{
N	if (this->Elements < index) return (T *)0;
N	
N	T *item = this->First;
N	while (index--)
N		  item = item->rlink;
N	return item;
N}
Ntemplate <class T>
NT *List_Iterator<T>::GetLast ()
N{
N	return this->Last;
N}
N
Ntemplate <class T>
NT *List_Iterator<T>::GetFirst ()
N{
N	return this->First;
N}
N
Ntemplate <class T>
NT *List_Iterator<T>::GetNext (T *item)
N{
N    if (item != (T *)0)
N        if (item->rlink != (T *)0) return item->rlink;
N    return (T *)0;
N}
N
Ntemplate <class T>
NT *List_Iterator<T>::Remove (uint32_t index)
N{
N	if (this->Elements < index) return (T *)0;
N	
N	T *item = this->First;
N	while (index--)
N		  item = item->rlink;
N	*(this) - item;
N	return item;
N}
N
Ntemplate <class T>
Nint32_t List_Iterator<T>::Remove (T *item)
N{
N	if (!this->Contain()) return -1;
N	*(this) - item;
N	
N	return 0;
N}
N
Ntemplate <class T>
Nint32_t List_Iterator<T>::Remove (T &item)
N{
N	if (!this->Contain()) return -1;
N
N	*(this) - &item;
N	return 0;
N}
N
Ntemplate <class T>
Nint32_t List_Iterator<T>::Put (T &item, uint32_t index)
N{
N	return -1;
N}
Ntemplate <class T>
Nuint32_t List_Iterator<T>::Contain ()
N{
N	return this->Elements;
N}
N
N#endif /*__LIST*/
