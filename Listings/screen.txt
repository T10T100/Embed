; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\objects\screen.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\screen.d --cpu=Cortex-M4.fp --apcs=interwork -O1 -Otime --diag_suppress=9931 -I.\device\GUI\inc -I.\device\hardware\inc -I.\device\init\inc -I.\misc\inc -I.\user\inc -I..\tester_1.03 -I.\memory\inc -I.\drivers\inc -IE:\KeilProj\tester_1_03\Embed\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F417xx -DSTM32F417xx -DColorDepthBpp16 -Dtftili9486 -DSOFTWARE_GL -DGUI_ALLIGN_LAYSIZE_TO_POW2 --omf_browse=.\objects\screen.crf device\GUI\src\Screen.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ZN6ScreenC2Ev                  ; Alternate entry point ; Screen::Screen__sub_object()
                  _ZN6ScreenC1Ev PROC ; Screen::Screen()
;;;3      
;;;4      Screen::Screen (){}
;;;5      	
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       _ZN6LockerC1Ev ; Locker::Locker()
000006  3018              ADDS     r0,r0,#0x18
000008  f7fffffe          BL       _ZN11Affine_BodyC1Ev ; Affine_Body::Affine_Body()
00000c  1d00              ADDS     r0,r0,#4
00000e  f7fffffe          BL       _ZN10Fill_ClassI6ScreenEC1Ev ; Fill_Class<Screen>::Fill_Class()
000012  300c              ADDS     r0,r0,#0xc
000014  f7fffffe          BL       _ZN12Bitmap_ClassI6ScreenEC1Ev ; Bitmap_Class<Screen>::Bitmap_Class()
000018  3020              ADDS     r0,r0,#0x20
00001a  f7fffffe          BL       _ZN12Circle_ClassI6ScreenEC1Ev ; Circle_Class<Screen>::Circle_Class()
00001e  300c              ADDS     r0,r0,#0xc
000020  f7fffffe          BL       _ZN10Line_ClassI6ScreenEC1Ev ; Line_Class<Screen>::Line_Class()
000024  3010              ADDS     r0,r0,#0x10
000026  f7fffffe          BL       _ZN15Rectangle_ClassI6ScreenEC1Ev ; Rectangle_Class<Screen>::Rectangle_Class()
00002a  3010              ADDS     r0,r0,#0x10
00002c  f7fffffe          BL       _ZN11Print_ClassI6ScreenEC1Ev ; Print_Class<Screen>::Print_Class()
000030  3874              SUBS     r0,r0,#0x74
000032  bd10              POP      {r4,pc}
                          ENDP

                  _ZN6ScreenclE3b2DR7Frame2DIsE PROC ; Screen::operator ()(b2D, Frame2D<short>&)
;;;6      
;;;7      void Screen::operator () (b2D rect, Frame2D<gbasic_t> &frame)
000034  b57f              PUSH     {r0-r6,lr}
;;;8      {
000036  4604              MOV      r4,r0
000038  461d              MOV      r5,r3
;;;9      	this->Dispose(rect);
00003a  1ca0              ADDS     r0,r4,#2
00003c  9a02              LDR      r2,[sp,#8]
00003e  9901              LDR      r1,[sp,#4]
000040  f7fffffe          BL       _ZN11Coordinates7DisposeE3b2D ; Coordinates::Dispose(b2D)
;;;10     	this->Frame = &frame;
000044  f8c450a4          STR      r5,[r4,#0xa4]
;;;11     	this->Fill(*this);
000048  4621              MOV      r1,r4
00004a  f104001c          ADD      r0,r4,#0x1c
00004e  f7fffffe          BL       _ZN10Screen_ObjI6ScreenEclERS0_ ; Screen_Obj<Screen>::operator ()(Screen&)
;;;12     	this->Bitmap(*this);
000052  4621              MOV      r1,r4
000054  f1040028          ADD      r0,r4,#0x28
000058  f7fffffe          BL       _ZN10Screen_ObjI6ScreenEclERS0_ ; Screen_Obj<Screen>::operator ()(Screen&)
;;;13     	      this->Bitmap.SetScale(0, 0);
00005c  ed9f0a62          VLDR     s0,|L1.488|
000060  f1040028          ADD      r0,r4,#0x28
000064  eef00a40          VMOV.F32 s1,s0
000068  f7fffffe          BL       _ZN12Bitmap_ClassI6ScreenE8SetScaleEff ; Bitmap_Class<Screen>::SetScale(float, float)
;;;14     	this->Circle(*this);
00006c  4621              MOV      r1,r4
00006e  f1040048          ADD      r0,r4,#0x48
000072  f7fffffe          BL       _ZN10Screen_ObjI6ScreenEclERS0_ ; Screen_Obj<Screen>::operator ()(Screen&)
;;;15     	this->Line(*this);
000076  4621              MOV      r1,r4
000078  f1040054          ADD      r0,r4,#0x54
00007c  f7fffffe          BL       _ZN10Screen_ObjI6ScreenEclERS0_ ; Screen_Obj<Screen>::operator ()(Screen&)
;;;16     	      this->Line.Init();
000080  f1040054          ADD      r0,r4,#0x54
000084  f7fffffe          BL       _ZN10Line_ClassI6ScreenE4InitEv ; Line_Class<Screen>::Init()
;;;17     	this->Rectangle(*this);
000088  4621              MOV      r1,r4
00008a  f1040064          ADD      r0,r4,#0x64
00008e  f7fffffe          BL       _ZN10Screen_ObjI6ScreenEclERS0_ ; Screen_Obj<Screen>::operator ()(Screen&)
;;;18     	      this->Rectangle.Init();
000092  f1040064          ADD      r0,r4,#0x64
000096  f7fffffe          BL       _ZN15Rectangle_ClassI6ScreenE4InitEv ; Rectangle_Class<Screen>::Init()
;;;19     	this->Print(*this);
00009a  4621              MOV      r1,r4
00009c  f1040074          ADD      r0,r4,#0x74
0000a0  f7fffffe          BL       _ZN10Screen_ObjI6ScreenEclERS0_ ; Screen_Obj<Screen>::operator ()(Screen&)
;;;20     	      this->Print.Init();
0000a4  f1040074          ADD      r0,r4,#0x74
0000a8  f7fffffe          BL       _ZN11Print_ClassI6ScreenE4InitEv ; Print_Class<Screen>::Init()
;;;21         
;;;22         this->frame_ = this->Frame->GetBuff();
0000ac  f8d400a4          LDR      r0,[r4,#0xa4]
0000b0  f7fffffe          BL       _ZN7Frame2DIsE7GetBuffEv ; Frame2D<short>::GetBuff()
0000b4  f8c400ac          STR      r0,[r4,#0xac]
;;;23         this->h_     = this->Frame->GetH();
0000b8  f8d400a4          LDR      r0,[r4,#0xa4]
0000bc  f7fffffe          BL       _ZN7Frame2DIsE4GetHEv ; Frame2D<short>::GetH()
0000c0  eebc0ac0          VCVT.U32.F32 s0,s0
0000c4  ee100a10          VMOV     r0,s0
0000c8  f8a400b0          STRH     r0,[r4,#0xb0]
;;;24     }
0000cc  b004              ADD      sp,sp,#0x10
0000ce  bd70              POP      {r4-r6,pc}
;;;25     
                          ENDP

                  _ZN6Screen7RefreshEv PROC ; Screen::Refresh()
;;;36     
;;;37     int32_t Screen::Refresh ()
0000d0  f8b010a8          LDRH     r1,[r0,#0xa8]
;;;38     {
;;;39     	return this->Fill.Fill(this->back_color);
0000d4  301c              ADDS     r0,r0,#0x1c
0000d6  f7ffbffe          B.W      _ZN10Fill_ClassI6ScreenE4FillEt ; Fill_Class<Screen>::Fill(unsigned short)
;;;40     }
;;;41     
                          ENDP

                  _ZN6Screen11MakeTextureEss PROC ; Screen::MakeTexture(short, short)
;;;46     
;;;47     tTexture *Screen::MakeTexture (gbasic_t w, gbasic_t h)
0000da  b570              PUSH     {r4-r6,lr}
;;;48     {
0000dc  460c              MOV      r4,r1
0000de  4615              MOV      r5,r2
;;;49         tTexture *texture = this->New<tTexture>((w + 1) * (h + 1) * sizeof(ColorTypeDef));
0000e0  1c61              ADDS     r1,r4,#1
0000e2  1c6a              ADDS     r2,r5,#1
0000e4  4351              MULS     r1,r2,r1
0000e6  0049              LSLS     r1,r1,#1
0000e8  f7fffffe          BL       _ZN9AllocatorI6ScreenE3NewI8tTextureEEPT_j ; T1* Allocator<Screen>::New<tTexture>(unsigned)
;;;50     	texture->Image = (ColorTypeDef *)(texture + 1);
0000ec  f1000108          ADD      r1,r0,#8
0000f0  6001              STR      r1,[r0,#0]
;;;51     	texture->W = w;
0000f2  8084              STRH     r4,[r0,#4]
;;;52     	texture->H = h;
0000f4  80c5              STRH     r5,[r0,#6]
;;;53     	return texture;
;;;54     }
0000f6  bd70              POP      {r4-r6,pc}
;;;55     
                          ENDP

                  _ZN6Screen11MakeTextureE3b2D PROC ; Screen::MakeTexture(b2D)
;;;56     tTexture *Screen::MakeTexture (b2D rect)
0000f8  b417              PUSH     {r0-r2,r4}
;;;57     {
;;;58       return this->MakeTexture(rect.w, rect.h);
0000fa  f9bd200a          LDRSH    r2,[sp,#0xa]
0000fe  f9bd1008          LDRSH    r1,[sp,#8]
000102  b003              ADD      sp,sp,#0xc
000104  bc10              POP      {r4}
000106  e7fe              B        _ZN6Screen11MakeTextureEss ; Screen::MakeTexture(short, short)
;;;59     }
;;;60     
                          ENDP

                  _ZN6Screen11KillTextureEP8tTexture PROC ; Screen::KillTexture(tTexture*)
;;;61     int32_t Screen::KillTexture (tTexture *texture)
000108  f7ffbffe          B.W      _ZN9AllocatorI6ScreenE6DeleteI8tTextureEEiPT_ ; int Allocator<Screen>::Delete<tTexture>(T1*)
;;;62     {
;;;63       return this->Delete(texture);
;;;64     }
;;;65     
                          ENDP

                  _ZN6Screen5PixelEsst PROC ; Screen::Pixel(short, short, unsigned short)
;;;25     
;;;26     int32_t Screen::Pixel (gbasic_t x, gbasic_t y, ColorTypeDef color)
00010c  f9b0c002          LDRSH    r12,[r0,#2]
;;;27     {
;;;28       *(frame_ + (y + Y0) + (x + X0) * h_) = color;
000110  4461              ADD      r1,r1,r12
000112  f8b0c0b0          LDRH     r12,[r0,#0xb0]
000116  fb01f10c          MUL      r1,r1,r12
00011a  f9b0c004          LDRSH    r12,[r0,#4]
00011e  f8d000ac          LDR      r0,[r0,#0xac]
000122  0049              LSLS     r1,r1,#1
000124  4462              ADD      r2,r2,r12
000126  eb010142          ADD      r1,r1,r2,LSL #1
00012a  5243              STRH     r3,[r0,r1]
;;;29       return 0;    
00012c  2000              MOVS     r0,#0
;;;30     }
00012e  4770              BX       lr
;;;31     
                          ENDP

                  _ZN6Screen5PixelEss PROC ; Screen::Pixel(short, short)
;;;32     ColorTypeDef Screen::Pixel (gbasic_t x, gbasic_t y)
000130  f9b03002          LDRSH    r3,[r0,#2]
;;;33     {
;;;34       return *(frame_ + (y + Y0) + (x + X0) * h_);    
000134  4419              ADD      r1,r1,r3
000136  f8b030b0          LDRH     r3,[r0,#0xb0]
00013a  4359              MULS     r1,r3,r1
00013c  f9b03004          LDRSH    r3,[r0,#4]
000140  f8d000ac          LDR      r0,[r0,#0xac]
000144  0049              LSLS     r1,r1,#1
000146  441a              ADD      r2,r2,r3
000148  eb010142          ADD      r1,r1,r2,LSL #1
00014c  5a40              LDRH     r0,[r0,r1]
;;;35     }
00014e  4770              BX       lr
;;;36     
                          ENDP

                  _ZN6Screen8GetFrameEv PROC ; Screen::GetFrame()
;;;41     
;;;42     Frame2D<gbasic_t> *Screen::GetFrame ()
000150  f8d000a4          LDR      r0,[r0,#0xa4]
;;;43     {
;;;44     	return this->Frame;
;;;45     }
000154  4770              BX       lr
;;;46     
                          ENDP

                  _ZN13ScreenManagerC2Ev                  ; Alternate entry point ; ScreenManager::ScreenManager__sub_object()
                  _ZN13ScreenManagerC1Ev PROC ; ScreenManager::ScreenManager()
;;;68     
;;;69     ScreenManager::ScreenManager (){}
;;;70     	
000156  b510              PUSH     {r4,lr}
000158  f7fffffe          BL       _ZN6LockerC1Ev ; Locker::Locker()
00015c  1d00              ADDS     r0,r0,#4
00015e  f7fffffe          BL       _ZN13List_IteratorI6ScreenEC1Ev ; List_Iterator<Screen>::List_Iterator()
000162  1f00              SUBS     r0,r0,#4
000164  bd10              POP      {r4,pc}
                          ENDP

                  _ZN13ScreenManagerclEv PROC ; ScreenManager::operator ()()
;;;71     void ScreenManager::operator () ()
000166  2100              MOVS     r1,#0
;;;72     {
;;;73     	this->Unlock();
000168  f7ffbffe          B.W      _ZN6Locker6UnlockEj ; Locker::Unlock(unsigned)
;;;74     }
;;;75     
                          ENDP

                  _ZN13ScreenManager6CreateE3b2DP7Frame2DIsE PROC ; ScreenManager::Create(b2D, Frame2D<short>*)
;;;76     Screen *ScreenManager::Create (b2D rect, Frame2D<gbasic_t> *frame)
00016c  b57f              PUSH     {r0-r6,lr}
;;;77     {
00016e  4604              MOV      r4,r0
000170  461d              MOV      r5,r3
;;;78     	Screen *screen = this->New();
000172  4620              MOV      r0,r4
000174  f7fffffe          BL       _ZN9AllocatorI6ScreenE3NewEv ; Allocator<Screen>::New()
000178  4606              MOV      r6,r0
;;;79     	*this + screen;
00017a  4631              MOV      r1,r6
00017c  1d20              ADDS     r0,r4,#4
00017e  f7fffffe          BL       _ZN13List_IteratorI6ScreenEplEPS0_ ; List_Iterator<Screen>::operator +(Screen*)
;;;80     	screen->operator()(rect, *frame);
000182  462b              MOV      r3,r5
000184  4630              MOV      r0,r6
000186  9a02              LDR      r2,[sp,#8]
000188  9901              LDR      r1,[sp,#4]
00018a  f7fffffe          BL       _ZN6ScreenclE3b2DR7Frame2DIsE ; Screen::operator ()(b2D, Frame2D<short>&)
;;;81     	return screen;
;;;82     }
00018e  b004              ADD      sp,sp,#0x10
000190  4630              MOV      r0,r6                 ;81
000192  bd70              POP      {r4-r6,pc}
;;;83     
                          ENDP

                  _ZN13ScreenManager4KillEP6Screen PROC ; ScreenManager::Kill(Screen*)
;;;84     int32_t ScreenManager::Kill (Screen *screen)
000194  b570              PUSH     {r4-r6,lr}
;;;85     {
000196  4605              MOV      r5,r0
000198  460c              MOV      r4,r1
;;;86     	if (screen == (Screen *)0) return -1;
00019a  2c00              CMP      r4,#0
00019c  d009              BEQ      |L1.434|
;;;87     	*this - screen;
00019e  4621              MOV      r1,r4
0001a0  1d28              ADDS     r0,r5,#4
0001a2  f7fffffe          BL       _ZN13List_IteratorI6ScreenEmiEPS0_ ; List_Iterator<Screen>::operator -(Screen*)
;;;88     	this->Delete(screen);
0001a6  4621              MOV      r1,r4
0001a8  4628              MOV      r0,r5
0001aa  f7fffffe          BL       _ZN9AllocatorI6ScreenE6DeleteIS0_EEiPT_ ; int Allocator<Screen>::Delete<Screen>(T1*)
;;;89     	return 0;
0001ae  2000              MOVS     r0,#0
;;;90     }
0001b0  bd70              POP      {r4-r6,pc}
                  |L1.434|
0001b2  f04f30ff          MOV      r0,#0xffffffff        ;86
0001b6  bd70              POP      {r4-r6,pc}
;;;91     
                          ENDP

                  _ZN13ScreenManager7RefreshEj PROC ; ScreenManager::Refresh(unsigned)
;;;92     int32_t ScreenManager::Refresh (uint32_t flags)
0001b8  b570              PUSH     {r4-r6,lr}
;;;93     {
0001ba  4605              MOV      r5,r0
;;;94     	if (this->Test()) return -1;
0001bc  4628              MOV      r0,r5
0001be  f7fffffe          BL       _ZN6Locker4TestEv ; Locker::Test()
0001c2  b110              CBZ      r0,|L1.458|
0001c4  f04f30ff          MOV      r0,#0xffffffff
;;;95     	register uint32_t i = this->Contain();
;;;96     	while (i--)
;;;97     		this->Get(i)->Refresh();
;;;98     	return 0;
;;;99     }
0001c8  bd70              POP      {r4-r6,pc}
                  |L1.458|
0001ca  1d28              ADDS     r0,r5,#4              ;95
0001cc  f7fffffe          BL       _ZN13List_IteratorI6ScreenE7ContainEv ; List_Iterator<Screen>::Contain()
0001d0  1e44              SUBS     r4,r0,#1              ;96
0001d2  d307              BCC      |L1.484|
                  |L1.468|
0001d4  4621              MOV      r1,r4                 ;97
0001d6  1d28              ADDS     r0,r5,#4              ;97
0001d8  f7fffffe          BL       _ZN13List_IteratorI6ScreenE3GetEj ; List_Iterator<Screen>::Get(unsigned)
0001dc  f7fffffe          BL       _ZN6Screen7RefreshEv ; Screen::Refresh()
0001e0  1e64              SUBS     r4,r4,#1              ;96
0001e2  d2f7              BCS      |L1.468|
                  |L1.484|
0001e4  2000              MOVS     r0,#0                 ;98
0001e6  bd70              POP      {r4-r6,pc}
                          ENDP

                  |L1.488|
0001e8  00000000          DCFS     0x00000000 ; 0

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||t._ZN7Frame2DIsE4GetHEv||, COMGROUP=_ZN7Frame2DIsE4GetHEv, CODE, READONLY, ALIGN=1

                  _ZN7Frame2DIsE4GetHEv PROC ; Frame2D<short>::GetH()
;;;80     template <typename T>
;;;81     float Frame2D<T>::GetH ()
000000  f9b00016          LDRSH    r0,[r0,#0x16]
;;;82     {
;;;83     	return this->Data.H;
000004  ee000a10          VMOV     s0,r0
000008  eeb80ac0          VCVT.F32.S32 s0,s0
;;;84     }
00000c  4770              BX       lr
;;;85     
                          ENDP


                          AREA ||area_number.14||, COMGROUP=_ZN7Frame2DIsE4GetHEv, LINKORDER=||t._ZN7Frame2DIsE4GetHEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN7Frame2DIsE4GetHEv||
                          DCD      0x00000001

                          AREA ||t._ZN7Frame2DIsE7GetBuffEv||, COMGROUP=_ZN7Frame2DIsE7GetBuffEv, CODE, READONLY, ALIGN=1

                  _ZN7Frame2DIsE7GetBuffEv PROC ; Frame2D<short>::GetBuff()
;;;92     template <typename T>
;;;93     ColorTypeDef *Frame2D<T>::GetBuff ()
000000  6900              LDR      r0,[r0,#0x10]
;;;94     {
;;;95     	return this->Data.Frame;
;;;96     }
000002  4770              BX       lr
;;;97     
                          ENDP


                          AREA ||area_number.21||, COMGROUP=_ZN7Frame2DIsE7GetBuffEv, LINKORDER=||t._ZN7Frame2DIsE7GetBuffEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN7Frame2DIsE7GetBuffEv||
                          DCD      0x00000001

                          AREA ||t._ZN9AllocatorI6ScreenE3NewEv||, COMGROUP=_ZN9AllocatorI6ScreenE3NewEv, CODE, READONLY, ALIGN=1

                  _ZN9AllocatorI6ScreenE3NewEv PROC ; Allocator<Screen>::New()
;;;79     template <typename native>
;;;80       native *Allocator<native>::New ()
000000  20b4              MOVS     r0,#0xb4
;;;81     {
;;;82       return (native *)Alloc (sizeof(native));
000002  f7ffbffe          B.W      _Z5Allocj ; Alloc(unsigned)
;;;83     }
;;;84     
                          ENDP


                          AREA ||area_number.28||, COMGROUP=_ZN9AllocatorI6ScreenE3NewEv, LINKORDER=||t._ZN9AllocatorI6ScreenE3NewEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN9AllocatorI6ScreenE3NewEv||
                          DCD      0x00000001

                          AREA ||t._ZN9AllocatorI6ScreenE3NewI8tTextureEEPT_j||, COMGROUP=_ZN9AllocatorI6ScreenE3NewI8tTextureEEPT_j, CODE, READONLY, ALIGN=1

                  _ZN9AllocatorI6ScreenE3NewI8tTextureEEPT_j PROC ; T1* Allocator<Screen>::New<tTexture>(unsigned)
;;;16       template <typename Obj>
;;;17         Obj *New (uint32_t); 
000000  f1010008          ADD      r0,r1,#8
;;;18     	
;;;19     	template <typename Obj>
;;;20         Obj *NewArray (uint32_t);
;;;21     	
;;;22     	template <typename Obj>
;;;23         Obj **NewlArray (uint32_t);
;;;24     
;;;25       template <typename Obj>
;;;26         int32_t Delete (Obj *); 
;;;27     	
;;;28         native *New ();
;;;29         native *New (uint32_t); 
;;;30     	  native *NewArray (uint32_t);
;;;31     	  native **NewlArray (uint32_t);
;;;32       
;;;33       private:     
;;;34     };
;;;35     
;;;36     void *Alloc (uint32_t);
;;;37     int32_t Free (void *); 
;;;38     
;;;39     /*
;;;40     Allocator::Allocator () {}
;;;41     Allocator::~Allocator() {}
;;;42     */
;;;43     
;;;44     template <typename native>
;;;45     template <typename Obj>
;;;46       Obj *Allocator<native>::New ()
;;;47     {
;;;48       return (Obj *)Alloc (sizeof(Obj));
;;;49     }
;;;50     
;;;51     template <typename native>
;;;52     template <typename Obj>
;;;53       Obj *Allocator<native>::New (uint32_t size)
;;;54     {
;;;55       return (Obj *)Alloc (sizeof(Obj) + size);
000004  f7ffbffe          B.W      _Z5Allocj ; Alloc(unsigned)
;;;56     }
;;;57     
                          ENDP


                          AREA ||area_number.35||, COMGROUP=_ZN9AllocatorI6ScreenE3NewI8tTextureEEPT_j, LINKORDER=||t._ZN9AllocatorI6ScreenE3NewI8tTextureEEPT_j||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.35||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN9AllocatorI6ScreenE3NewI8tTextureEEPT_j||
                          DCD      0x00000001

                          AREA ||t._ZN9AllocatorI6ScreenE6DeleteI8tTextureEEiPT_||, COMGROUP=_ZN9AllocatorI6ScreenE6DeleteI8tTextureEEiPT_, CODE, READONLY, ALIGN=1

                  _ZN9AllocatorI6ScreenE6DeleteI8tTextureEEiPT_ PROC ; int Allocator<Screen>::Delete<tTexture>(T1*)
;;;25       template <typename Obj>
;;;26         int32_t Delete (Obj *); 
000000  4608              MOV      r0,r1
;;;27     	
;;;28         native *New ();
;;;29         native *New (uint32_t); 
;;;30     	  native *NewArray (uint32_t);
;;;31     	  native **NewlArray (uint32_t);
;;;32       
;;;33       private:     
;;;34     };
;;;35     
;;;36     void *Alloc (uint32_t);
;;;37     int32_t Free (void *); 
;;;38     
;;;39     /*
;;;40     Allocator::Allocator () {}
;;;41     Allocator::~Allocator() {}
;;;42     */
;;;43     
;;;44     template <typename native>
;;;45     template <typename Obj>
;;;46       Obj *Allocator<native>::New ()
;;;47     {
;;;48       return (Obj *)Alloc (sizeof(Obj));
;;;49     }
;;;50     
;;;51     template <typename native>
;;;52     template <typename Obj>
;;;53       Obj *Allocator<native>::New (uint32_t size)
;;;54     {
;;;55       return (Obj *)Alloc (sizeof(Obj) + size);
;;;56     }
;;;57     
;;;58     template <typename native>
;;;59     template <typename Obj>
;;;60       Obj *Allocator<native>::NewArray (uint32_t size)
;;;61     {
;;;62       return (Obj *)Alloc (sizeof(Obj) * size);
;;;63     }
;;;64     
;;;65     template <typename native>
;;;66     template <typename Obj>
;;;67       Obj **Allocator<native>::NewlArray (uint32_t size)
;;;68     {
;;;69       return (Obj **)Alloc (sizeof(Obj *) * size);
;;;70     }
;;;71     
;;;72     template <typename native>
;;;73     template <typename Obj>
;;;74       int32_t Allocator<native>::Delete (Obj *o)
;;;75     {
;;;76       return Free(static_cast<void *>(o)); 
000002  f7ffbffe          B.W      _Z4FreePv ; Free(void*)
;;;77     }
;;;78     
                          ENDP


                          AREA ||area_number.42||, COMGROUP=_ZN9AllocatorI6ScreenE6DeleteI8tTextureEEiPT_, LINKORDER=||t._ZN9AllocatorI6ScreenE6DeleteI8tTextureEEiPT_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.42||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN9AllocatorI6ScreenE6DeleteI8tTextureEEiPT_||
                          DCD      0x00000001

                          AREA ||t._ZN9AllocatorI6ScreenE6DeleteIS0_EEiPT_||, COMGROUP=_ZN9AllocatorI6ScreenE6DeleteIS0_EEiPT_, CODE, READONLY, ALIGN=1

                  _ZN9AllocatorI6ScreenE6DeleteIS0_EEiPT_ PROC ; int Allocator<Screen>::Delete<Screen>(T1*)
;;;25       template <typename Obj>
;;;26         int32_t Delete (Obj *); 
000000  4608              MOV      r0,r1
;;;27     	
;;;28         native *New ();
;;;29         native *New (uint32_t); 
;;;30     	  native *NewArray (uint32_t);
;;;31     	  native **NewlArray (uint32_t);
;;;32       
;;;33       private:     
;;;34     };
;;;35     
;;;36     void *Alloc (uint32_t);
;;;37     int32_t Free (void *); 
;;;38     
;;;39     /*
;;;40     Allocator::Allocator () {}
;;;41     Allocator::~Allocator() {}
;;;42     */
;;;43     
;;;44     template <typename native>
;;;45     template <typename Obj>
;;;46       Obj *Allocator<native>::New ()
;;;47     {
;;;48       return (Obj *)Alloc (sizeof(Obj));
;;;49     }
;;;50     
;;;51     template <typename native>
;;;52     template <typename Obj>
;;;53       Obj *Allocator<native>::New (uint32_t size)
;;;54     {
;;;55       return (Obj *)Alloc (sizeof(Obj) + size);
;;;56     }
;;;57     
;;;58     template <typename native>
;;;59     template <typename Obj>
;;;60       Obj *Allocator<native>::NewArray (uint32_t size)
;;;61     {
;;;62       return (Obj *)Alloc (sizeof(Obj) * size);
;;;63     }
;;;64     
;;;65     template <typename native>
;;;66     template <typename Obj>
;;;67       Obj **Allocator<native>::NewlArray (uint32_t size)
;;;68     {
;;;69       return (Obj **)Alloc (sizeof(Obj *) * size);
;;;70     }
;;;71     
;;;72     template <typename native>
;;;73     template <typename Obj>
;;;74       int32_t Allocator<native>::Delete (Obj *o)
;;;75     {
;;;76       return Free(static_cast<void *>(o)); 
000002  f7ffbffe          B.W      _Z4FreePv ; Free(void*)
;;;77     }
;;;78     
                          ENDP


                          AREA ||area_number.49||, COMGROUP=_ZN9AllocatorI6ScreenE6DeleteIS0_EEiPT_, LINKORDER=||t._ZN9AllocatorI6ScreenE6DeleteIS0_EEiPT_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.49||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN9AllocatorI6ScreenE6DeleteIS0_EEiPT_||
                          DCD      0x00000001

                          AREA ||t._ZN10Screen_ObjI6ScreenEclERS0_||, COMGROUP=_ZN10Screen_ObjI6ScreenEclERS0_, CODE, READONLY, ALIGN=1

                  _ZN10Screen_ObjI6ScreenEclERS0_ PROC ; Screen_Obj<Screen>::operator ()(Screen&)
;;;22     template <typename T>
;;;23     void Screen_Obj<T>::operator () (T &screen)
000000  b510              PUSH     {r4,lr}
;;;24     {
000002  4604              MOV      r4,r0
;;;25     	this->Screen = &screen;
000004  6021              STR      r1,[r4,#0]
;;;26     	uint32_t h = (uint32_t)this->Screen->Frame->GetH();
000006  f8d100a4          LDR      r0,[r1,#0xa4]
00000a  f7fffffe          BL       _ZN7Frame2DIsE4GetHEv ; Frame2D<short>::GetH()
00000e  eebc0ac0          VCVT.U32.F32 s0,s0
;;;27     	this->H = h;
000012  ed840a02          VSTR     s0,[r4,#8]
;;;28     	this->Frame = this->Screen->Frame->GetBuff();
000016  6820              LDR      r0,[r4,#0]
000018  f8d000a4          LDR      r0,[r0,#0xa4]
00001c  f7fffffe          BL       _ZN7Frame2DIsE7GetBuffEv ; Frame2D<short>::GetBuff()
000020  6060              STR      r0,[r4,#4]
;;;29     }
000022  bd10              POP      {r4,pc}
;;;30     
                          ENDP


                          AREA ||area_number.56||, COMGROUP=_ZN10Screen_ObjI6ScreenEclERS0_, LINKORDER=||t._ZN10Screen_ObjI6ScreenEclERS0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.56||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10Screen_ObjI6ScreenEclERS0_||
                          DCD      0x00000001

                          AREA ||t._ZN10Fill_ClassI6ScreenEC1Ev||, COMGROUP=_ZN10Fill_ClassI6ScreenEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN10Fill_ClassI6ScreenEC2Ev                  ; Alternate entry point ; Fill_Class<Screen>::Fill_Class__sub_object()
                  _ZN10Fill_ClassI6ScreenEC1Ev PROC ; Fill_Class<Screen>::Fill_Class()
;;;27     template <typename T>
;;;28     Fill_Class<T>::Fill_Class (){}
;;;29     
000000  4770              BX       lr
                          ENDP


                          AREA ||area_number.63||, COMGROUP=_ZN10Fill_ClassI6ScreenEC1Ev, LINKORDER=||t._ZN10Fill_ClassI6ScreenEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.63||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10Fill_ClassI6ScreenEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN10Fill_ClassI6ScreenE4FillEt||, COMGROUP=_ZN10Fill_ClassI6ScreenE4FillEt, CODE, READONLY, ALIGN=1

                  _ZN10Fill_ClassI6ScreenE4FillEt PROC ; Fill_Class<Screen>::Fill(unsigned short)
;;;30     template <typename T>
;;;31     int32_t Fill_Class<T>::Fill (ColorTypeDef color)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;32     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;33     	if (this->Screen->Test()) return -1;
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       _ZN6Locker4TestEv ; Locker::Test()
00000e  b118              CBZ      r0,|L69.24|
000010  f04f30ff          MOV      r0,#0xffffffff
;;;34     	
;;;35     	register int32_t x = this->Screen->X0;
;;;36     	register uint32_t y = this->Screen->Y0;
;;;37     	register uint32_t D = this->H * x;
;;;38     	
;;;39       for (int32_t __x = D + this->H * this->Screen->W; __x > D; __x -= this->H)  
;;;40         for (uint32_t __y = this->Screen->H + y - 1; __y > y; __y--)
;;;41             this->Frame[(uint32_t)__y + (uint32_t)__x] = color;
;;;42     	return 0;
;;;43     }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L69.24|
000018  6822              LDR      r2,[r4,#0]            ;35
00001a  f9b21002          LDRSH    r1,[r2,#2]            ;35
00001e  f9b20004          LDRSH    r0,[r2,#4]            ;36
000022  68a3              LDR      r3,[r4,#8]            ;37
000024  4359              MULS     r1,r3,r1              ;37
000026  f9b22006          LDRSH    r2,[r2,#6]            ;39
00002a  fb031302          MLA      r3,r3,r2,r1           ;39
00002e  428b              CMP      r3,r1                 ;39
000030  d912              BLS      |L69.88|
000032  f1a00c01          SUB      r12,r0,#1             ;40
                  |L69.54|
000036  6822              LDR      r2,[r4,#0]            ;40
000038  f9b22008          LDRSH    r2,[r2,#8]            ;40
00003c  4462              ADD      r2,r2,r12             ;40
00003e  4282              CMP      r2,r0                 ;40
000040  d906              BLS      |L69.80|
                  |L69.66|
000042  6866              LDR      r6,[r4,#4]            ;41
000044  18d7              ADDS     r7,r2,r3              ;41
000046  f8265017          STRH     r5,[r6,r7,LSL #1]     ;41
00004a  1e52              SUBS     r2,r2,#1              ;40
00004c  4282              CMP      r2,r0                 ;40
00004e  d8f8              BHI      |L69.66|
                  |L69.80|
000050  68a2              LDR      r2,[r4,#8]            ;39
000052  1a9b              SUBS     r3,r3,r2              ;39
000054  428b              CMP      r3,r1                 ;39
000056  d8ee              BHI      |L69.54|
                  |L69.88|
000058  2000              MOVS     r0,#0                 ;42
00005a  e8bd81f0          POP      {r4-r8,pc}
;;;44     
                          ENDP


                          AREA ||area_number.70||, COMGROUP=_ZN10Fill_ClassI6ScreenE4FillEt, LINKORDER=||t._ZN10Fill_ClassI6ScreenE4FillEt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.70||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10Fill_ClassI6ScreenE4FillEt||
                          DCD      0x00000001

                          AREA ||t._ZN12Bitmap_ClassI6ScreenEC1Ev||, COMGROUP=_ZN12Bitmap_ClassI6ScreenEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN12Bitmap_ClassI6ScreenEC2Ev                  ; Alternate entry point ; Bitmap_Class<Screen>::Bitmap_Class__sub_object()
                  _ZN12Bitmap_ClassI6ScreenEC1Ev PROC ; Bitmap_Class<Screen>::Bitmap_Class()
;;;103    template <typename T>
;;;104    Bitmap_Class<T>::Bitmap_Class ()
;;;105    {
;;;106    }
;;;107    		
000000  4770              BX       lr
                          ENDP


                          AREA ||area_number.77||, COMGROUP=_ZN12Bitmap_ClassI6ScreenEC1Ev, LINKORDER=||t._ZN12Bitmap_ClassI6ScreenEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.77||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN12Bitmap_ClassI6ScreenEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN12Bitmap_ClassI6ScreenE8SetScaleEff||, COMGROUP=_ZN12Bitmap_ClassI6ScreenE8SetScaleEff, CODE, READONLY, ALIGN=1

                  _ZN12Bitmap_ClassI6ScreenE8SetScaleEff PROC ; Bitmap_Class<Screen>::SetScale(float, float)
;;;659    template <typename T>
;;;660    void Bitmap_Class<T>::SetScale (float x, float y)
000000  eebc0ac0          VCVT.U32.F32 s0,s0
;;;661    {
;;;662      this->scale_x = (uint8_t)x;
000004  ee101a10          VMOV     r1,s0
000008  7301              STRB     r1,[r0,#0xc]
;;;663    	this->scale_y = (uint8_t)y;
00000a  eebc0ae0          VCVT.U32.F32 s0,s1
00000e  ee101a10          VMOV     r1,s0
000012  7341              STRB     r1,[r0,#0xd]
;;;664    	this->BlendLevel = 0;
000014  2100              MOVS     r1,#0
000016  7701              STRB     r1,[r0,#0x1c]
;;;665    }	
000018  4770              BX       lr
;;;666    
                          ENDP


                          AREA ||area_number.84||, COMGROUP=_ZN12Bitmap_ClassI6ScreenE8SetScaleEff, LINKORDER=||t._ZN12Bitmap_ClassI6ScreenE8SetScaleEff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.84||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN12Bitmap_ClassI6ScreenE8SetScaleEff||
                          DCD      0x00000001

                          AREA ||t._ZN12Circle_ClassI6ScreenEC1Ev||, COMGROUP=_ZN12Circle_ClassI6ScreenEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN12Circle_ClassI6ScreenEC2Ev                  ; Alternate entry point ; Circle_Class<Screen>::Circle_Class__sub_object()
                  _ZN12Circle_ClassI6ScreenEC1Ev PROC ; Circle_Class<Screen>::Circle_Class()
;;;32     template <typename T>
;;;33     Circle_Class<T>::Circle_Class (){}
;;;34     
000000  4770              BX       lr
                          ENDP


                          AREA ||area_number.91||, COMGROUP=_ZN12Circle_ClassI6ScreenEC1Ev, LINKORDER=||t._ZN12Circle_ClassI6ScreenEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.91||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN12Circle_ClassI6ScreenEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN10Line_ClassI6ScreenEC1Ev||, COMGROUP=_ZN10Line_ClassI6ScreenEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN10Line_ClassI6ScreenEC2Ev                  ; Alternate entry point ; Line_Class<Screen>::Line_Class__sub_object()
                  _ZN10Line_ClassI6ScreenEC1Ev PROC ; Line_Class<Screen>::Line_Class()
;;;34     template <typename T>
;;;35     Line_Class<T>::Line_Class()
;;;36     {
;;;37     
;;;38     }
;;;39     
000000  4770              BX       lr
                          ENDP


                          AREA ||area_number.98||, COMGROUP=_ZN10Line_ClassI6ScreenEC1Ev, LINKORDER=||t._ZN10Line_ClassI6ScreenEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.98||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10Line_ClassI6ScreenEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN10Line_ClassI6ScreenE4InitEv||, COMGROUP=_ZN10Line_ClassI6ScreenE4InitEv, CODE, READONLY, ALIGN=1

                  _ZN10Line_ClassI6ScreenE4InitEv PROC ; Line_Class<Screen>::Init()
;;;40     template <typename T>
;;;41     void Line_Class<T>::Init ()
000000  2105              MOVS     r1,#5
;;;42     {
;;;43     	this->Z = 5;
000002  7301              STRB     r1,[r0,#0xc]
;;;44     	uint32_t h = this->H;
000004  6882              LDR      r2,[r0,#8]
                  |L104.6|
;;;45     	while ((h >> (this->log2LaySize++))){} 
000006  7b41              LDRB     r1,[r0,#0xd]
000008  1c4b              ADDS     r3,r1,#1
00000a  7343              STRB     r3,[r0,#0xd]
00000c  fa32f101          LSRS     r1,r2,r1
000010  d1f9              BNE      |L104.6|
;;;46     }
000012  4770              BX       lr
;;;47     		
                          ENDP


                          AREA ||area_number.105||, COMGROUP=_ZN10Line_ClassI6ScreenE4InitEv, LINKORDER=||t._ZN10Line_ClassI6ScreenE4InitEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.105||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10Line_ClassI6ScreenE4InitEv||
                          DCD      0x00000001

                          AREA ||t._ZN15Rectangle_ClassI6ScreenEC1Ev||, COMGROUP=_ZN15Rectangle_ClassI6ScreenEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN15Rectangle_ClassI6ScreenEC2Ev                  ; Alternate entry point ; Rectangle_Class<Screen>::Rectangle_Class__sub_object()
                  _ZN15Rectangle_ClassI6ScreenEC1Ev PROC ; Rectangle_Class<Screen>::Rectangle_Class()
;;;20     template <typename T>
;;;21     Rectangle_Class<T>::Rectangle_Class () {}
;;;22     		
000000  4770              BX       lr
                          ENDP


                          AREA ||area_number.112||, COMGROUP=_ZN15Rectangle_ClassI6ScreenEC1Ev, LINKORDER=||t._ZN15Rectangle_ClassI6ScreenEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.112||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN15Rectangle_ClassI6ScreenEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN15Rectangle_ClassI6ScreenE4InitEv||, COMGROUP=_ZN15Rectangle_ClassI6ScreenE4InitEv, CODE, READONLY, ALIGN=1

                  _ZN15Rectangle_ClassI6ScreenE4InitEv PROC ; Rectangle_Class<Screen>::Init()
;;;23     template <typename T>
;;;24     void Rectangle_Class<T>::Init ()
000000  2105              MOVS     r1,#5
;;;25     {
;;;26     	this->Z = 5;
000002  7301              STRB     r1,[r0,#0xc]
;;;27     }
000004  4770              BX       lr
;;;28     
                          ENDP


                          AREA ||area_number.119||, COMGROUP=_ZN15Rectangle_ClassI6ScreenE4InitEv, LINKORDER=||t._ZN15Rectangle_ClassI6ScreenE4InitEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.119||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN15Rectangle_ClassI6ScreenE4InitEv||
                          DCD      0x00000001

                          AREA ||t._ZN11Print_ClassI6ScreenEC1Ev||, COMGROUP=_ZN11Print_ClassI6ScreenEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN11Print_ClassI6ScreenEC2Ev                  ; Alternate entry point ; Print_Class<Screen>::Print_Class__sub_object()
                  _ZN11Print_ClassI6ScreenEC1Ev PROC ; Print_Class<Screen>::Print_Class()
;;;44     template <typename T>
;;;45     Print_Class<T>::Print_Class() {}
;;;46     	
000000  4770              BX       lr
                          ENDP


                          AREA ||area_number.126||, COMGROUP=_ZN11Print_ClassI6ScreenEC1Ev, LINKORDER=||t._ZN11Print_ClassI6ScreenEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.126||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN11Print_ClassI6ScreenEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN11Print_ClassI6ScreenE4InitEv||, COMGROUP=_ZN11Print_ClassI6ScreenE4InitEv, CODE, READONLY, ALIGN=1

                  _ZN11Print_ClassI6ScreenE4InitEv PROC ; Print_Class<Screen>::Init()
;;;47     template <typename T>
;;;48     void Print_Class<T>::Init ()
000000  b510              PUSH     {r4,lr}
;;;49     {
000002  b084              SUB      sp,sp,#0x10
000004  4604              MOV      r4,r0
;;;50     	this->EofX = this->Screen->GetRect().w;
000006  6820              LDR      r0,[r4,#0]
000008  1c81              ADDS     r1,r0,#2
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       _ZN11Coordinates7GetRectEv ; Coordinates::GetRect()
000010  9801              LDR      r0,[sp,#4]
000012  9003              STR      r0,[sp,#0xc]
000014  f8bd000c          LDRH     r0,[sp,#0xc]
000018  8420              STRH     r0,[r4,#0x20]
;;;51     	this->EofY = this->Screen->GetRect().h;
00001a  6820              LDR      r0,[r4,#0]
00001c  1c81              ADDS     r1,r0,#2
00001e  4668              MOV      r0,sp
000020  f7fffffe          BL       _ZN11Coordinates7GetRectEv ; Coordinates::GetRect()
000024  9801              LDR      r0,[sp,#4]
000026  9003              STR      r0,[sp,#0xc]
000028  f8bd000e          LDRH     r0,[sp,#0xe]
00002c  8460              STRH     r0,[r4,#0x22]
;;;52       this->Font = (tFont *)0;	
00002e  2000              MOVS     r0,#0
000030  62a0              STR      r0,[r4,#0x28]
;;;53     	this->Format = 0;
000032  f884002c          STRB     r0,[r4,#0x2c]
;;;54     }	
000036  b004              ADD      sp,sp,#0x10
000038  bd10              POP      {r4,pc}
;;;55     
                          ENDP


                          AREA ||area_number.133||, COMGROUP=_ZN11Print_ClassI6ScreenE4InitEv, LINKORDER=||t._ZN11Print_ClassI6ScreenE4InitEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.133||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN11Print_ClassI6ScreenE4InitEv||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorI6ScreenEC1Ev||, COMGROUP=_ZN13List_IteratorI6ScreenEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorI6ScreenEC2Ev                  ; Alternate entry point ; List_Iterator<Screen>::List_Iterator__sub_object()
                  _ZN13List_IteratorI6ScreenEC1Ev PROC ; List_Iterator<Screen>::List_Iterator()
;;;51     template <class T>
;;;52     List_Iterator<T>::List_Iterator()
;;;53     {
;;;54     }
;;;55     template <class T>
000000  4770              BX       lr
                          ENDP


                          AREA ||area_number.140||, COMGROUP=_ZN13List_IteratorI6ScreenEC1Ev, LINKORDER=||t._ZN13List_IteratorI6ScreenEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.140||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorI6ScreenEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorI6ScreenEplERS0_||, COMGROUP=_ZN13List_IteratorI6ScreenEplERS0_, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorI6ScreenEplERS0_ PROC ; List_Iterator<Screen>::operator +(Screen&)
;;;55     template <class T>
;;;56     bool List_Iterator<T>::operator + (T &item)
000000  b410              PUSH     {r4}
;;;57     {
;;;58     	this->Elements++;
000002  6882              LDR      r2,[r0,#8]
000004  1c52              ADDS     r2,r2,#1
000006  6082              STR      r2,[r0,#8]
;;;59     		T *i,*j;
;;;60     		if (!this->First) {
000008  6802              LDR      r2,[r0,#0]
00000a  2400              MOVS     r4,#0
00000c  2a00              CMP      r2,#0
00000e  d00f              BEQ      |L146.48|
;;;61     			this->First = &item;
;;;62     			this->Last = &item;
;;;63     			item.rlink = (T *)0;
;;;64     			item.llink = (T *)0;
;;;65     			return true;
;;;66     		}
;;;67     		i = this->First;
;;;68     		j = (T *)0;
;;;69     		while (i != (T *)0) {
;;;70     			if (i->key > item.key) {
000010  f891c014          LDRB     r12,[r1,#0x14]
                  |L146.20|
000014  7d13              LDRB     r3,[r2,#0x14]
000016  4563              CMP      r3,r12
000018  d911              BLS      |L146.62|
;;;71     				j = i;
00001a  4613              MOV      r3,r2
;;;72     				i = i->rlink;
00001c  68d2              LDR      r2,[r2,#0xc]
00001e  2a00              CMP      r2,#0                 ;69
;;;73     				continue;
000020  d1f8              BNE      |L146.20|
;;;74     			}
;;;75     			if (i->llink) {
;;;76     				i->llink->rlink = &item;
;;;77     				item.rlink = i;
;;;78     				item.llink = i->llink;
;;;79     				i->llink = &item;
;;;80     				return true;
;;;81     			}
;;;82     			item.rlink = i;
;;;83     			item.llink = (T *)0;
;;;84     			i->llink = &item;
;;;85     			this->First = &item;
;;;86     			return true;
;;;87     		}
;;;88     		j->rlink = &item;
000022  60d9              STR      r1,[r3,#0xc]
;;;89     		item.rlink = (T *)0;
000024  60cc              STR      r4,[r1,#0xc]
;;;90     		this->Last = &item;
000026  6041              STR      r1,[r0,#4]
;;;91     		item.llink = j;
000028  610b              STR      r3,[r1,#0x10]
;;;92     		return true;	
;;;93     }
00002a  bc10              POP      {r4}
00002c  2001              MOVS     r0,#1                 ;92
00002e  4770              BX       lr
                  |L146.48|
000030  6001              STR      r1,[r0,#0]            ;61
000032  6041              STR      r1,[r0,#4]            ;62
000034  60cc              STR      r4,[r1,#0xc]          ;63
000036  610c              STR      r4,[r1,#0x10]         ;64
000038  bc10              POP      {r4}
00003a  2001              MOVS     r0,#1                 ;65
00003c  4770              BX       lr
                  |L146.62|
00003e  6913              LDR      r3,[r2,#0x10]         ;75
000040  b13b              CBZ      r3,|L146.82|
000042  60d9              STR      r1,[r3,#0xc]          ;76
000044  60ca              STR      r2,[r1,#0xc]          ;77
000046  6910              LDR      r0,[r2,#0x10]         ;78
000048  6108              STR      r0,[r1,#0x10]         ;78
00004a  6111              STR      r1,[r2,#0x10]         ;79
00004c  bc10              POP      {r4}
00004e  2001              MOVS     r0,#1                 ;80
000050  4770              BX       lr
                  |L146.82|
000052  60ca              STR      r2,[r1,#0xc]          ;82
000054  610c              STR      r4,[r1,#0x10]         ;83
000056  6111              STR      r1,[r2,#0x10]         ;84
000058  6001              STR      r1,[r0,#0]            ;85
00005a  bc10              POP      {r4}
00005c  2001              MOVS     r0,#1                 ;86
00005e  4770              BX       lr
;;;94     template <class T>
                          ENDP


                          AREA ||area_number.147||, COMGROUP=_ZN13List_IteratorI6ScreenEplERS0_, LINKORDER=||t._ZN13List_IteratorI6ScreenEplERS0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.147||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorI6ScreenEplERS0_||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorI6ScreenEmiERS0_||, COMGROUP=_ZN13List_IteratorI6ScreenEmiERS0_, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorI6ScreenEmiERS0_ PROC ; List_Iterator<Screen>::operator -(Screen&)
;;;94     template <class T>
;;;95     T *List_Iterator<T>::operator - (T &item)
000000  b410              PUSH     {r4}
;;;96     {
000002  4603              MOV      r3,r0
;;;97     	if (this->Elements == 0)return (T *)0;
000004  6898              LDR      r0,[r3,#8]
000006  2800              CMP      r0,#0
000008  d00f              BEQ      |L153.42|
;;;98     	this->Elements--;
00000a  1e40              SUBS     r0,r0,#1
00000c  6098              STR      r0,[r3,#8]
;;;99     	T *l = item.llink,*r = item.rlink;
00000e  6908              LDR      r0,[r1,#0x10]
000010  68ca              LDR      r2,[r1,#0xc]
;;;100    		if (!l&&!r) {
000012  f04f0c00          MOV      r12,#0
000016  ea500402          ORRS     r4,r0,r2
00001a  d009              BEQ      |L153.48|
;;;101    			this->First = (T *)0;
;;;102    			this->Last = (T *)0;
;;;103    			return (T *)0;
;;;104    		}
;;;105    		if (!l) {
00001c  b178              CBZ      r0,|L153.62|
;;;106    			this->First = r;
;;;107    			r->llink = (T *)0;
;;;108    		}
;;;109    		else    l->rlink = r;
00001e  60c2              STR      r2,[r0,#0xc]
                  |L153.32|
;;;110    		
;;;111    		if (!r) {
000020  b18a              CBZ      r2,|L153.70|
;;;112       			l->rlink = (T *)0;
;;;113    			  this->Last = l;
;;;114    		}
;;;115    		else    r->llink = l;
000022  6110              STR      r0,[r2,#0x10]
                  |L153.36|
;;;116    		return &item;	
;;;117    }
000024  bc10              POP      {r4}
000026  4608              MOV      r0,r1                 ;116
000028  4770              BX       lr
                  |L153.42|
00002a  bc10              POP      {r4}
00002c  2000              MOVS     r0,#0                 ;97
00002e  4770              BX       lr
                  |L153.48|
000030  f8c3c000          STR      r12,[r3,#0]           ;101
000034  f8c3c004          STR      r12,[r3,#4]           ;102
000038  bc10              POP      {r4}
00003a  2000              MOVS     r0,#0                 ;103
00003c  4770              BX       lr
                  |L153.62|
00003e  601a              STR      r2,[r3,#0]            ;106
000040  f8c2c010          STR      r12,[r2,#0x10]        ;107
000044  e7ec              B        |L153.32|
                  |L153.70|
000046  f8c0c00c          STR      r12,[r0,#0xc]         ;112
00004a  6058              STR      r0,[r3,#4]            ;113
00004c  e7ea              B        |L153.36|
;;;118    
                          ENDP


                          AREA ||area_number.154||, COMGROUP=_ZN13List_IteratorI6ScreenEmiERS0_, LINKORDER=||t._ZN13List_IteratorI6ScreenEmiERS0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.154||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorI6ScreenEmiERS0_||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorI6ScreenEplEPS0_||, COMGROUP=_ZN13List_IteratorI6ScreenEplEPS0_, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorI6ScreenEplEPS0_ PROC ; List_Iterator<Screen>::operator +(Screen*)
;;;119    template <class T>
;;;120    bool List_Iterator<T>::operator + (T *item)
000000  f7ffbffe          B.W      _ZN13List_IteratorI6ScreenEplERS0_ ; List_Iterator<Screen>::operator +(Screen&)
;;;121    {
;;;122    	return *this + *item;
;;;123    }
;;;124    
                          ENDP


                          AREA ||area_number.161||, COMGROUP=_ZN13List_IteratorI6ScreenEplEPS0_, LINKORDER=||t._ZN13List_IteratorI6ScreenEplEPS0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.161||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorI6ScreenEplEPS0_||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorI6ScreenEmiEPS0_||, COMGROUP=_ZN13List_IteratorI6ScreenEmiEPS0_, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorI6ScreenEmiEPS0_ PROC ; List_Iterator<Screen>::operator -(Screen*)
;;;164    template <class T>
;;;165    T *List_Iterator<T>::operator - (T *item)
000000  f7ffbffe          B.W      _ZN13List_IteratorI6ScreenEmiERS0_ ; List_Iterator<Screen>::operator -(Screen&)
;;;166    {
;;;167    	return *this - *item;
;;;168    }
;;;169    /*
                          ENDP


                          AREA ||area_number.168||, COMGROUP=_ZN13List_IteratorI6ScreenEmiEPS0_, LINKORDER=||t._ZN13List_IteratorI6ScreenEmiEPS0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.168||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorI6ScreenEmiEPS0_||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorI6ScreenE3GetEj||, COMGROUP=_ZN13List_IteratorI6ScreenE3GetEj, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorI6ScreenE3GetEj PROC ; List_Iterator<Screen>::Get(unsigned)
;;;182    template <class T>
;;;183    T *List_Iterator<T>::Get (uint32_t index)
000000  6882              LDR      r2,[r0,#8]
;;;184    {
;;;185    	if (this->Elements < index) return (T *)0;
000002  428a              CMP      r2,r1
000004  d201              BCS      |L174.10|
000006  2000              MOVS     r0,#0
                  |L174.8|
;;;186    	
;;;187    	T *item = this->First;
;;;188    	while (index--)
;;;189    		  item = item->rlink;
;;;190    	return item;
;;;191    }
000008  4770              BX       lr
                  |L174.10|
00000a  6800              LDR      r0,[r0,#0]            ;187
00000c  1e49              SUBS     r1,r1,#1              ;188
00000e  d3fb              BCC      |L174.8|
                  |L174.16|
000010  68c0              LDR      r0,[r0,#0xc]          ;189
000012  1e49              SUBS     r1,r1,#1              ;188
000014  d2fc              BCS      |L174.16|
000016  4770              BX       lr
;;;192    template <class T>
                          ENDP


                          AREA ||area_number.175||, COMGROUP=_ZN13List_IteratorI6ScreenE3GetEj, LINKORDER=||t._ZN13List_IteratorI6ScreenE3GetEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.175||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorI6ScreenE3GetEj||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorI6ScreenE7ContainEv||, COMGROUP=_ZN13List_IteratorI6ScreenE7ContainEv, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorI6ScreenE7ContainEv PROC ; List_Iterator<Screen>::Contain()
;;;247    template <class T>
;;;248    uint32_t List_Iterator<T>::Contain ()
000000  6880              LDR      r0,[r0,#8]
;;;249    {
;;;250    	return this->Elements;
;;;251    }
000002  4770              BX       lr
;;;252    
                          ENDP


                          AREA ||area_number.182||, COMGROUP=_ZN13List_IteratorI6ScreenE7ContainEv, LINKORDER=||t._ZN13List_IteratorI6ScreenE7ContainEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.182||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorI6ScreenE7ContainEv||
                          DCD      0x00000001
