; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\objects\gpio_ex.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\gpio_ex.d --cpu=Cortex-M4.fp --apcs=interwork -O1 -Otime --diag_suppress=9931 -I.\device\GUI\inc -I.\device\hardware\inc -I.\device\init\inc -I.\misc\inc -I.\user\inc -I..\tester_1.03 -I.\memory\inc -I.\drivers\inc -IE:\KeilProj\tester_1.03\tester_1.03\tester_1.03\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F417xx -DSTM32F417xx -DColorDepthBpp16 -Dtftili9486 -DSOFTWARE_GL -DGUI_ALLIGN_LAYSIZE_TO_POW2 --omf_browse=.\objects\gpio_ex.crf device\hardware\src\gpio_ex.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Z13DEV_Gpio_InitP12GPIO_TypeDefijj PROC ; DEV_Gpio_Init(GPIO_TypeDef*, int, unsigned, unsigned)
;;;8      
;;;9      int32_t DEV_Gpio_Init (GPIO_TypeDef *port, int pin_bm, uint32_t mode, uint32_t pupd)
000000  b510              PUSH     {r4,lr}
;;;10     {
;;;11     		GPIO_InitStruct.Mode     = mode;
000002  f8dfc0d8          LDR      r12,|L1.220|
000006  f8cc2004          STR      r2,[r12,#4]  ; GPIO_InitStruct
;;;12         GPIO_InitStruct.Pull     = pupd;
00000a  f8cc3008          STR      r3,[r12,#8]  ; GPIO_InitStruct
;;;13         GPIO_InitStruct.Speed    = GPIO_SPEED_HIGH;
00000e  2203              MOVS     r2,#3
000010  f8cc200c          STR      r2,[r12,#0xc]  ; GPIO_InitStruct
;;;14         GPIO_InitStruct.Pin      = pin_bm;
000014  f8cc1000          STR      r1,[r12,#0]  ; GPIO_InitStruct
;;;15     	
;;;16     		HAL_GPIO_Init(port, &GPIO_InitStruct);	
000018  4661              MOV      r1,r12
00001a  f7fffffe          BL       HAL_GPIO_Init
;;;17     	  return 0;
00001e  2000              MOVS     r0,#0
;;;18     }
000020  bd10              POP      {r4,pc}
;;;19     
                          ENDP

                  _Z16DEV_AltGpio_InitP12GPIO_TypeDefijj PROC ; DEV_AltGpio_Init(GPIO_TypeDef*, int, unsigned, unsigned)
;;;20     int32_t DEV_AltGpio_Init (GPIO_TypeDef *port, int pin_bm, uint32_t mode, uint32_t alt)
000022  b510              PUSH     {r4,lr}
;;;21     {
;;;22       GPIO_InitStruct.Pull      = GPIO_PULLUP;
000024  f8dfc0b4          LDR      r12,|L1.220|
000028  2401              MOVS     r4,#1
00002a  f8cc4008          STR      r4,[r12,#8]  ; GPIO_InitStruct
;;;23       GPIO_InitStruct.Mode      = mode;
00002e  f8cc2004          STR      r2,[r12,#4]  ; GPIO_InitStruct
;;;24       GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
000032  2202              MOVS     r2,#2
000034  f8cc200c          STR      r2,[r12,#0xc]  ; GPIO_InitStruct
;;;25       GPIO_InitStruct.Pin       = pin_bm;
000038  f8cc1000          STR      r1,[r12,#0]  ; GPIO_InitStruct
;;;26       GPIO_InitStruct.Alternate = alt;
00003c  f8cc3010          STR      r3,[r12,#0x10]  ; GPIO_InitStruct
;;;27     	
;;;28       HAL_GPIO_Init(port, &GPIO_InitStruct);	
000040  4661              MOV      r1,r12
000042  f7fffffe          BL       HAL_GPIO_Init
;;;29     	return 0;
000046  2000              MOVS     r0,#0
;;;30     }
000048  bd10              POP      {r4,pc}
;;;31     /*
                          ENDP

                  _ZN14SpiSoftTypeDef9DummyWaitEj PROC ; SpiSoftTypeDef::DummyWait(unsigned)
;;;64     
;;;65     void SpiSoftTypeDef::DummyWait (uint32_t _us)
00004a  2900              CMP      r1,#0
;;;66     {
00004c  dd03              BLE      |L1.86|
                  |L1.78|
;;;67     	for (int i = _us; i > 0; i--)
;;;68     			asm volatile ("nop \n\t");
00004e  bf00              NOP      
000050  1e49              SUBS     r1,r1,#1              ;67
000052  2900              CMP      r1,#0                 ;67
000054  dcfb              BGT      |L1.78|
                  |L1.86|
;;;69     }
000056  4770              BX       lr
;;;70     
                          ENDP

                  _ZN14SpiSoftTypeDef4InitEv PROC ; SpiSoftTypeDef::Init()
;;;71     void SpiSoftTypeDef::Init (void)
000058  4821              LDR      r0,|L1.224|
;;;72     {
;;;73     	DEV_Pin_Set(Lcd_Cs_Port, LCD_CS_Pin);
00005a  2108              MOVS     r1,#8
00005c  6001              STR      r1,[r0,#0]
;;;74     	DEV_Pin_Clr(Lcd_Sck_Port, LCD_SCK_Pin);
00005e  03c9              LSLS     r1,r1,#15
000060  6001              STR      r1,[r0,#0]
;;;75     	DEV_Pin_Clr(Lcd_Mosi_Port, LCD_MOSI_Pin);
000062  1049              ASRS     r1,r1,#1
000064  6001              STR      r1,[r0,#0]
;;;76     }
000066  4770              BX       lr
;;;77     
                          ENDP

                  _ZN14SpiSoftTypeDef6SelectEv PROC ; SpiSoftTypeDef::Select()
;;;78     void SpiSoftTypeDef::Select (void)
000068  491d              LDR      r1,|L1.224|
;;;79     {
;;;80     	DEV_Pin_Clr(Lcd_Cs_Port, LCD_CS_Pin);
00006a  f44f2000          MOV      r0,#0x80000
00006e  6008              STR      r0,[r1,#0]
;;;81     }
000070  4770              BX       lr
;;;82     
                          ENDP

                  _ZN14SpiSoftTypeDef8DeSelectEv PROC ; SpiSoftTypeDef::DeSelect()
;;;83     void SpiSoftTypeDef::DeSelect (void)
000072  491b              LDR      r1,|L1.224|
;;;84     {
;;;85     	DEV_Pin_Set(Lcd_Cs_Port, LCD_CS_Pin);
000074  2008              MOVS     r0,#8
000076  6008              STR      r0,[r1,#0]
;;;86     }
000078  4770              BX       lr
;;;87     
                          ENDP

                  _ZN14SpiSoftTypeDef10DummyClockEv PROC ; SpiSoftTypeDef::DummyClock()
;;;88     void SpiSoftTypeDef::DummyClock (void)
00007a  4819              LDR      r0,|L1.224|
;;;89     {
;;;90     	DEV_Pin_Clr(Lcd_Sck_Port, LCD_SCK_Pin);
00007c  f44f2180          MOV      r1,#0x40000
000080  6001              STR      r1,[r0,#0]
;;;91     	DEV_Pin_Set(Lcd_Sck_Port, LCD_SCK_Pin);
000082  2104              MOVS     r1,#4
000084  6001              STR      r1,[r0,#0]
;;;92     }
000086  4770              BX       lr
;;;93     
                          ENDP

                  _ZN14SpiSoftTypeDef14Send_9bit_DataEbh PROC ; SpiSoftTypeDef::Send_9bit_Data(bool, unsigned char)
;;;94     void SpiSoftTypeDef::Send_9bit_Data (bool bit, uint8_t data)
000088  b5f0              PUSH     {r4-r7,lr}
;;;95     {
00008a  4606              MOV      r6,r0
;;;96     	DEV_Pin_Clr(Lcd_Sck_Port, LCD_SCK_Pin);
00008c  4b14              LDR      r3,|L1.224|
00008e  f44f2480          MOV      r4,#0x40000
000092  601c              STR      r4,[r3,#0]
;;;97     	DEV_Pin_Put(Lcd_Mosi_Port, LCD_MOSI_Pin, bit);
000094  2502              MOVS     r5,#2
000096  1067              ASRS     r7,r4,#1
000098  2900              CMP      r1,#0
00009a  d001              BEQ      |L1.160|
00009c  601d              STR      r5,[r3,#0]
00009e  e000              B        |L1.162|
                  |L1.160|
0000a0  601f              STR      r7,[r3,#0]
                  |L1.162|
;;;98     	this->Select();
0000a2  4630              MOV      r0,r6
0000a4  f7fffffe          BL       _ZN14SpiSoftTypeDef6SelectEv ; SpiSoftTypeDef::Select()
;;;99     	DEV_Pin_Set(Lcd_Sck_Port, LCD_SCK_Pin);
0000a8  f04f0c04          MOV      r12,#4
0000ac  f8c3c000          STR      r12,[r3,#0]
;;;100    	for (int i = 7; i >= 0; i--) {
0000b0  2107              MOVS     r1,#7
                  |L1.178|
;;;101    		  DEV_Pin_Clr(Lcd_Sck_Port, LCD_SCK_Pin);
0000b2  601c              STR      r4,[r3,#0]
;;;102    		  DEV_Pin_Put(Lcd_Mosi_Port, LCD_MOSI_Pin, (data >> i) & 1);	
0000b4  fa22f001          LSR      r0,r2,r1
0000b8  f0100f01          TST      r0,#1
0000bc  d001              BEQ      |L1.194|
0000be  601d              STR      r5,[r3,#0]
0000c0  e000              B        |L1.196|
                  |L1.194|
0000c2  601f              STR      r7,[r3,#0]
                  |L1.196|
;;;103          DEV_Pin_Set(Lcd_Sck_Port, LCD_SCK_Pin);		
0000c4  f8c3c000          STR      r12,[r3,#0]
0000c8  1e49              SUBS     r1,r1,#1              ;100
0000ca  2900              CMP      r1,#0                 ;100
0000cc  daf1              BGE      |L1.178|
;;;104    	}  
;;;105    	this->DeSelect();
0000ce  4630              MOV      r0,r6
0000d0  e8bd40f0          POP      {r4-r7,lr}
0000d4  e7fe              B        _ZN14SpiSoftTypeDef8DeSelectEv ; SpiSoftTypeDef::DeSelect()
;;;106    }
;;;107    			
                          ENDP

                  _ZN14SpiSoftTypeDef14Read_8bit_DataEv PROC ; SpiSoftTypeDef::Read_8bit_Data()
;;;108    uint8_t SpiSoftTypeDef::Read_8bit_Data (void)		
0000d6  2000              MOVS     r0,#0
;;;109    {
;;;110    	/*
;;;111    	uint8_t Data = 0;
;;;112    	this->Select();
;;;113    	this->DummyClock();
;;;114    	for (int i = 7; i >= 0; i--) {
;;;115    		  DEV_Pin_Clr(Lcd_Sck_Port, LCD_SCK_Pin);
;;;116    		  Data |= (MISO_Pin->Read() << i);
;;;117          DEV_Pin_Set(Lcd_Sck_Port, LCD_SCK_Pin);	
;;;118    	} 
;;;119    	this->DummyClock();
;;;120    	this->DeSelect();
;;;121    	return Data;
;;;122    	*/
;;;123        return 0;
;;;124    }
0000d8  4770              BX       lr
;;;125    
                          ENDP

0000da  0000              DCW      0x0000
                  |L1.220|
                          DCD      ||.bss||
                  |L1.224|
                          DCD      0x40020818

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  GPIO_InitStruct
                          %        20

;*** Start embedded assembler ***

#line 1 "device\\hardware\\src\\gpio_ex.cpp"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_gpio_ex_cpp_bec25c1a___Z7__REV16j|
#line 138 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.3.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_gpio_ex_cpp_bec25c1a___Z7__REV16j| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_gpio_ex_cpp_bec25c1a___Z7__REVSHi|
#line 153
|__asm___11_gpio_ex_cpp_bec25c1a___Z7__REVSHi| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___11_gpio_ex_cpp_bec25c1a___Z5__RRXj|
#line 328
|__asm___11_gpio_ex_cpp_bec25c1a___Z5__RRXj| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
