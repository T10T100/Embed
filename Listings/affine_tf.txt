; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\objects\affine_tf.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\affine_tf.d --cpu=Cortex-M4.fp --apcs=interwork -O1 -Otime --diag_suppress=9931 -I.\device\GUI\inc -I.\device\hardware\inc -I.\device\init\inc -I.\misc\inc -I.\user\inc -I..\tester_1.03 -I.\memory\inc -I.\drivers\inc -IE:\KeilProj\tester_1.03\tester_1.03\tester_1.03\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F417xx -DSTM32F417xx -DColorDepthBpp16 -Dtftili9486 -DSOFTWARE_GL -DGUI_ALLIGN_LAYSIZE_TO_POW2 --omf_browse=.\objects\affine_tf.crf misc\src\affine_tf.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  _ZN11Affine_BodyC2Ev                  ; Alternate entry point ; Affine_Body::Affine_Body__sub_object()
                  _ZN11Affine_BodyC1Ev PROC ; Affine_Body::Affine_Body()
;;;8      
;;;9      Affine_Body::Affine_Body () {}
;;;10     	
000000  4770              BX       lr
                          ENDP

                  _ZN11Affine_BodyclEv PROC ; Affine_Body::operator ()()
;;;11     void Affine_Body::operator () ()
000002  4770              BX       lr
;;;12     {
;;;13     
;;;14     }
;;;15     
                          ENDP

                  _ZN11Affine_Body12PointRotateZEfffff PROC ; Affine_Body::PointRotateZ(float, float, float, float, float)
;;;16     f2D Affine_Body::PointRotateZ (float x0, float y0, float x, float y, float A)
000004  b084              SUB      sp,sp,#0x10
;;;17     {
;;;18     	f2D rect = {0, 0, 0, 0};
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
00000a  9001              STR      r0,[sp,#4]
00000c  9002              STR      r0,[sp,#8]
00000e  9003              STR      r0,[sp,#0xc]
;;;19     	rect.x = x0 + x + y * A;
000010  ee300a01          VADD.F32 s0,s0,s2
000014  ee010a82          VMLA.F32 s0,s3,s4
;;;20     	rect.y = y0 + y - x * A; 
000018  ee700aa1          VADD.F32 s1,s1,s3
00001c  ee410a42          VMLS.F32 s1,s2,s4
;;;21     	return rect;
000020  ed9d1a02          VLDR     s2,[sp,#8]
000024  eddd1a03          VLDR     s3,[sp,#0xc]
;;;22     }
000028  b004              ADD      sp,sp,#0x10
00002a  4770              BX       lr
;;;23     
                          ENDP

                  _ZN11Affine_Body12PointRotateZE3f2Df PROC ; Affine_Body::PointRotateZ(f2D, float)
;;;24     
;;;25     f2D Affine_Body::PointRotateZ (f2D rect, float A)
00002c  b411              PUSH     {r0,r4}
;;;26     {
00002e  ed2d0b06          VPUSH    {d0-d2}
;;;27     	return this->PointRotateZ(rect.x, rect.y, rect.w, rect.h, A);
000032  eddd1a03          VLDR     s3,[sp,#0xc]
000036  ed9d1a02          VLDR     s2,[sp,#8]
00003a  eddd0a01          VLDR     s1,[sp,#4]
00003e  ed9d0a00          VLDR     s0,[sp,#0]
000042  b007              ADD      sp,sp,#0x1c
000044  bc10              POP      {r4}
000046  e7fe              B        _ZN11Affine_Body12PointRotateZEfffff ; Affine_Body::PointRotateZ(float, float, float, float, float)
;;;28     }
;;;29     
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001
