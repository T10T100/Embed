; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\objects\physic.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\physic.d --cpu=Cortex-M4.fp --apcs=interwork -O1 -Otime --diag_suppress=9931 -I.\device\GUI\inc -I.\device\hardware\inc -I.\device\init\inc -I.\misc\inc -I.\user\inc -I..\tester_1.03 -I.\memory\inc -I.\drivers\inc -IE:\KeilProj\tester_1.03\tester_1.03\tester_1.03\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F417xx -DSTM32F417xx -DColorDepthBpp16 -Dtftili9486 -DSOFTWARE_GL -DGUI_ALLIGN_LAYSIZE_TO_POW2 --omf_browse=.\objects\physic.crf misc\src\physic.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ZN6Physic6BounceC2Ev                  ; Alternate entry point ; Physic::Bounce::Bounce__sub_object()
                  _ZN6Physic6BounceC1Ev PROC ; Physic::Bounce::Bounce()
;;;4      
;;;5      Bounce::Bounce () {}
;;;6      	
000000  4770              BX       lr
                          ENDP

                  _ZN6Physic6BounceclEfffff PROC ; Physic::Bounce::operator ()(float, float, float, float, float)
;;;7      void Bounce::operator () (float w0, float g, float air, float dt, float m)
000002  ed801a08          VSTR     s2,[r0,#0x20]
;;;8      {
;;;9      	this->Air = air;
;;;10     	this->W0 = w0;
000006  ed800a05          VSTR     s0,[r0,#0x14]
;;;11     	this->W = w0;
00000a  ed800a04          VSTR     s0,[r0,#0x10]
;;;12     	this->dt = dt;
00000e  edc01a07          VSTR     s3,[r0,#0x1c]
;;;13     	this->g = g;
000012  edc00a06          VSTR     s1,[r0,#0x18]
;;;14     	this->E = w0;
000016  ed800a02          VSTR     s0,[r0,#8]
;;;15     	this->K = 0;
00001a  ed9f1afe          VLDR     s2,|L1.1044|
00001e  ed801a03          VSTR     s2,[r0,#0xc]
;;;16     	this->S = w0 / (g * m);
000022  ee600a82          VMUL.F32 s1,s1,s4
000026  eec01a20          VDIV.F32 s3,s0,s1
00002a  edc01a01          VSTR     s3,[r0,#4]
;;;17     	this->m = m;
00002e  ed802a09          VSTR     s4,[r0,#0x24]
;;;18     	this->V = 0;
000032  ed801a00          VSTR     s2,[r0,#0]
;;;19     	this->sign = 1.0F;
000036  eeb70a00          VMOV.F32 s0,#1.00000000
00003a  ed800a0a          VSTR     s0,[r0,#0x28]
;;;20     }
00003e  4770              BX       lr
;;;21     
                          ENDP

                  _ZN6Physic6Bounce4StepEv PROC ; Physic::Bounce::Step()
;;;22     float Bounce::Step ()
000040  ed900a04          VLDR     s0,[r0,#0x10]
;;;23     {
;;;24     	E = W - K;
000044  ed902a03          VLDR     s4,[r0,#0xc]
000048  ee700a42          VSUB.F32 s1,s0,s4
00004c  edc00a02          VSTR     s1,[r0,#8]
;;;25     	S = E / (m * g);
000050  ed903a09          VLDR     s6,[r0,#0x24]
000054  ed901a06          VLDR     s2,[r0,#0x18]
000058  ee631a01          VMUL.F32 s3,s6,s2
00005c  eec02aa1          VDIV.F32 s5,s1,s3
000060  edc02a01          VSTR     s5,[r0,#4]
;;;26     	V = V + g * dt * sign;
000064  edd03a07          VLDR     s7,[r0,#0x1c]
000068  edd01a0a          VLDR     s3,[r0,#0x28]
00006c  edd02a00          VLDR     s5,[r0,#0]
000070  ee214a23          VMUL.F32 s8,s2,s7
000074  ee442a21          VMLA.F32 s5,s8,s3
000078  edc02a00          VSTR     s5,[r0,#0]
;;;27     	K = K + m * V * g * dt * sign;
00007c  ee632a22          VMUL.F32 s5,s6,s5
000080  ee221a81          VMUL.F32 s2,s5,s2
000084  ee211a23          VMUL.F32 s2,s2,s7
000088  ee012a21          VMLA.F32 s4,s2,s3
00008c  ed802a03          VSTR     s4,[r0,#0xc]
;;;28     			
;;;29     	if (E <= 0 && sign > 0) {
;;;30     		S = 0;
000090  ed9f1ae0          VLDR     s2,|L1.1044|
000094  eef50ac0          VCMPE.F32 s1,#0.0               ;29
000098  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;29
00009c  d80c              BHI      |L1.184|
00009e  eef51ac0          VCMPE.F32 s3,#0.0               ;29
0000a2  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;29
0000a6  dd07              BLE      |L1.184|
0000a8  ed801a01          VSTR     s2,[r0,#4]
;;;31     		K = W;
0000ac  ed800a03          VSTR     s0,[r0,#0xc]
;;;32     		sign = -1.0F;
0000b0  eeff0a00          VMOV.F32 s1,#-1.00000000
0000b4  edc00a0a          VSTR     s1,[r0,#0x28]
                  |L1.184|
;;;33     	} else {}
;;;34     	if (K <= 0 && sign < 0) {
0000b8  edd00a03          VLDR     s1,[r0,#0xc]
0000bc  eef50ac0          VCMPE.F32 s1,#0.0
0000c0  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000c4  d80e              BHI      |L1.228|
0000c6  edd00a0a          VLDR     s1,[r0,#0x28]
0000ca  eef50ac0          VCMPE.F32 s1,#0.0
0000ce  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000d2  d207              BCS      |L1.228|
;;;35     		sign = 1.0F;
0000d4  eef70a00          VMOV.F32 s1,#1.00000000
0000d8  edc00a0a          VSTR     s1,[r0,#0x28]
;;;36     		K = 0;
0000dc  ed801a03          VSTR     s2,[r0,#0xc]
;;;37     		V = 0;
0000e0  ed801a00          VSTR     s2,[r0,#0]
                  |L1.228|
;;;38     	}
;;;39     			
;;;40     	W -= 5;
0000e4  eef10a04          VMOV.F32 s1,#5.00000000
0000e8  ee300a60          VSUB.F32 s0,s0,s1
0000ec  ed800a04          VSTR     s0,[r0,#0x10]
;;;41     	if (W < 0) {
0000f0  eeb50ac0          VCMPE.F32 s0,#0.0
0000f4  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000f8  d203              BCS      |L1.258|
;;;42     	  W = W0;
0000fa  ed900a05          VLDR     s0,[r0,#0x14]
0000fe  ed800a04          VSTR     s0,[r0,#0x10]
                  |L1.258|
;;;43     	} else {}	
;;;44     	return S;
000102  ed900a01          VLDR     s0,[r0,#4]
;;;45     }
000106  4770              BX       lr
;;;46     
                          ENDP

                  _ZN6Physic6Bounce4StepEf PROC ; Physic::Bounce::Step(float)
;;;47     float Bounce::Step(float g)
000108  ed800a06          VSTR     s0,[r0,#0x18]
;;;48     {
;;;49     	this->g = g;
;;;50     	return this->Step();
00010c  e7fe              B        _ZN6Physic6Bounce4StepEv ; Physic::Bounce::Step()
;;;51     }
;;;52     
                          ENDP

                  _ZN6Physic6Ball2DC2Ev                  ; Alternate entry point ; Physic::Ball2D::Ball2D__sub_object()
                  _ZN6Physic6Ball2DC1Ev PROC ; Physic::Ball2D::Ball2D()
;;;56     
;;;57     Ball2D::Ball2D () {}
;;;58         
00010e  4770              BX       lr
                          ENDP

                  _ZN6Physic6Ball2D3DirEf PROC ; Physic::Ball2D::Dir(float)
;;;226    
;;;227    void Ball2D::Dir (float a)
000110  b510              PUSH     {r4,lr}
;;;228    {
000112  4604              MOV      r4,r0
;;;229        A = a;
000114  ed840a0b          VSTR     s0,[r4,#0x2c]
000118  f7fffffe          BL       __hardfp_sinf
;;;230    	  sina = sin(A);
00011c  ed840a0c          VSTR     s0,[r4,#0x30]
;;;231    	  cosa = cos(A);
000120  ed940a0b          VLDR     s0,[r4,#0x2c]
000124  f7fffffe          BL       __hardfp_cosf
000128  ed840a0d          VSTR     s0,[r4,#0x34]
;;;232        Vx = V * sina;
00012c  edd40a04          VLDR     s1,[r4,#0x10]
000130  ed941a0c          VLDR     s2,[r4,#0x30]
000134  ee201a81          VMUL.F32 s2,s1,s2
000138  ed841a05          VSTR     s2,[r4,#0x14]
;;;233        Vy = V * cosa;
00013c  ee200a80          VMUL.F32 s0,s1,s0
000140  ed840a06          VSTR     s0,[r4,#0x18]
;;;234    }
000144  bd10              POP      {r4,pc}
;;;235    
                          ENDP

                  _ZN6Physic6Ball2DclEfff PROC ; Physic::Ball2D::operator ()(float, float, float)
;;;58         
;;;59     void Ball2D::operator () (float m, float p, float a)
000146  eef01a40          VMOV.F32 s3,s0
;;;60     { 
00014a  eeb00a41          VMOV.F32 s0,s2
;;;61         this->dt = 1.0F;
00014e  eeb72a00          VMOV.F32 s4,#1.00000000
000152  ed802a03          VSTR     s4,[r0,#0xc]
;;;62         this->A = a;
000156  ed800a0b          VSTR     s0,[r0,#0x2c]
;;;63         this->m  = m;
00015a  edc01a0a          VSTR     s3,[r0,#0x28]
;;;64         this->p  = p;
00015e  edc00a09          VSTR     s1,[r0,#0x24]
;;;65         this->Sx = 0;
000162  ed9f1aac          VLDR     s2,|L1.1044|
000166  ed801a07          VSTR     s2,[r0,#0x1c]
;;;66         this->Sy = 0;
00016a  ed801a08          VSTR     s2,[r0,#0x20]
;;;67         V = p / m;
00016e  ee801aa1          VDIV.F32 s2,s1,s3
000172  ed801a04          VSTR     s2,[r0,#0x10]
;;;68     	/*
;;;69         this->W = 1000;
;;;70     	  this->K = 0.0F;
;;;71     	  this->E = W - K;
;;;72     	  this->g = 1.0F;
;;;73     	  this->Vg = 0.0F;
;;;74     	  this->h = E / (m * g);
;;;75     	*/
;;;76         this->Dir(A);
000176  e7fe              B        _ZN6Physic6Ball2D3DirEf ; Physic::Ball2D::Dir(float)
;;;77     }
;;;78     
                          ENDP

                  _ZN6Physic6Ball2D4TestE3b2DRf PROC ; Physic::Ball2D::Test(b2D, float&)
;;;175    
;;;176    uint32_t Ball2D::Test (b2D r, float &a)
000178  b40f              PUSH     {r0-r3}
;;;177    {
;;;178       uint32_t tst = 0;
00017a  2100              MOVS     r1,#0
;;;179         if (Sx < m) {
00017c  edd00a07          VLDR     s1,[r0,#0x1c]
000180  ed900a0a          VLDR     s0,[r0,#0x28]
000184  eef40ac0          VCMPE.F32 s1,s0
000188  eef1fa10          VMRS     APSR_nzcv,FPSCR
00018c  d209              BCS      |L1.418|
;;;180            Sx = m;
00018e  ed800a07          VSTR     s0,[r0,#0x1c]
;;;181            a = -A;
000192  ed900a0b          VLDR     s0,[r0,#0x2c]
000196  eeb10a40          VNEG.F32 s0,s0
00019a  ed830a00          VSTR     s0,[r3,#0]
;;;182            tst = 1;
00019e  2101              MOVS     r1,#1
0001a0  e043              B        |L1.554|
                  |L1.418|
;;;183        } else if (Sx > r.w) {
0001a2  f9bd2008          LDRSH    r2,[sp,#8]
0001a6  ee012a10          VMOV     s2,r2
0001aa  eeb81ac1          VCVT.F32.S32 s2,s2
0001ae  eef40ac1          VCMPE.F32 s1,s2
0001b2  eef1fa10          VMRS     APSR_nzcv,FPSCR
0001b6  dd0d              BLE      |L1.468|
;;;184            Sx = r.w;
0001b8  ee002a10          VMOV     s0,r2
0001bc  eeb80ac0          VCVT.F32.S32 s0,s0
0001c0  ed800a07          VSTR     s0,[r0,#0x1c]
;;;185            a = -A;
0001c4  ed900a0b          VLDR     s0,[r0,#0x2c]
0001c8  eeb10a40          VNEG.F32 s0,s0
0001cc  ed830a00          VSTR     s0,[r3,#0]
;;;186            tst = 2;
0001d0  2102              MOVS     r1,#2
0001d2  e02a              B        |L1.554|
                  |L1.468|
;;;187        } else if (Sy < m) {
0001d4  edd00a08          VLDR     s1,[r0,#0x20]
;;;188            Sy = m;
;;;189            a = - (PI_const + A);
0001d8  ed9f1a8f          VLDR     s2,|L1.1048|
0001dc  eef40ac0          VCMPE.F32 s1,s0                 ;187
0001e0  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;187
0001e4  d209              BCS      |L1.506|
0001e6  ed800a08          VSTR     s0,[r0,#0x20]         ;188
0001ea  ed900a0b          VLDR     s0,[r0,#0x2c]
0001ee  ee310a40          VSUB.F32 s0,s2,s0
0001f2  ed830a00          VSTR     s0,[r3,#0]
;;;190            tst = 3;
0001f6  2103              MOVS     r1,#3
0001f8  e017              B        |L1.554|
                  |L1.506|
;;;191        } else if (Sy > r.h) {
0001fa  f9bd200a          LDRSH    r2,[sp,#0xa]
0001fe  ee002a10          VMOV     s0,r2
000202  eeb80ac0          VCVT.F32.S32 s0,s0
000206  eef40ac0          VCMPE.F32 s1,s0
00020a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00020e  dd0c              BLE      |L1.554|
;;;192            Sy = r.h;
000210  ee002a10          VMOV     s0,r2
000214  eeb80ac0          VCVT.F32.S32 s0,s0
000218  ed800a08          VSTR     s0,[r0,#0x20]
;;;193            a = - (PI_const + A);
00021c  ed900a0b          VLDR     s0,[r0,#0x2c]
000220  ee310a40          VSUB.F32 s0,s2,s0
000224  ed830a00          VSTR     s0,[r3,#0]
;;;194            tst = 4;
000228  2104              MOVS     r1,#4
                  |L1.554|
;;;195        } else {}
;;;196    
;;;197        return tst;
00022a  4608              MOV      r0,r1
;;;198    }
00022c  b004              ADD      sp,sp,#0x10
00022e  4770              BX       lr
;;;199    
                          ENDP

                  _ZN6Physic6Ball2D4StepE3b2D PROC ; Physic::Ball2D::Step(b2D)
;;;78     
;;;79     f2P Ball2D::Step (b2D r)
000230  b537              PUSH     {r0-r2,r4,r5,lr}
;;;80     {
000232  4604              MOV      r4,r0
;;;81         Sx = (Sx + Vx * dt);
000234  edd40a07          VLDR     s1,[r4,#0x1c]
000238  ed941a05          VLDR     s2,[r4,#0x14]
00023c  ed940a03          VLDR     s0,[r4,#0xc]
000240  ee410a00          VMLA.F32 s1,s2,s0
000244  edc40a07          VSTR     s1,[r4,#0x1c]
;;;82         Sy = (Sy + Vy * dt);
000248  edd40a08          VLDR     s1,[r4,#0x20]
00024c  ed941a06          VLDR     s2,[r4,#0x18]
000250  ee410a00          VMLA.F32 s1,s2,s0
000254  edc40a08          VSTR     s1,[r4,#0x20]
;;;83     	  
;;;84         uint32_t t = this->Test(r, A);
000258  f104032c          ADD      r3,r4,#0x2c
00025c  4620              MOV      r0,r4
00025e  9a02              LDR      r2,[sp,#8]
000260  9901              LDR      r1,[sp,#4]
000262  f7fffffe          BL       _ZN6Physic6Ball2D4TestE3b2DRf ; Physic::Ball2D::Test(b2D, float&)
;;;85         if (t) {
000266  b320              CBZ      r0,|L1.690|
;;;86     			  switch (t) {
000268  2801              CMP      r0,#1
00026a  d002              BEQ      |L1.626|
00026c  2802              CMP      r0,#2
00026e  d11b              BNE      |L1.680|
000270  e00d              B        |L1.654|
                  |L1.626|
;;;87     					case 1: if (V > 5.0F) {
000272  ed940a04          VLDR     s0,[r4,#0x10]
000276  4969              LDR      r1,|L1.1052|
000278  ee100a10          VMOV     r0,s0
00027c  4288              CMP      r0,r1
00027e  dd13              BLE      |L1.680|
;;;88     							        V -= 0.1F;
000280  eddf0a67          VLDR     s1,|L1.1056|
000284  ee300a60          VSUB.F32 s0,s0,s1
000288  ed840a04          VSTR     s0,[r4,#0x10]
00028c  e00c              B        |L1.680|
                  |L1.654|
;;;89                       } else {}
;;;90     						break;
;;;91     					case 2: if (V < 30.0F) {
00028e  ed940a04          VLDR     s0,[r4,#0x10]
000292  4964              LDR      r1,|L1.1060|
000294  ee100a10          VMOV     r0,s0
000298  4288              CMP      r0,r1
00029a  da05              BGE      |L1.680|
;;;92     							        V += 0.3F;
00029c  eddf0a62          VLDR     s1,|L1.1064|
0002a0  ee300a20          VADD.F32 s0,s0,s1
0002a4  ed840a04          VSTR     s0,[r4,#0x10]
                  |L1.680|
;;;93                       } else {}
;;;94     						break;	
;;;95               default: break;													
;;;96     				}
;;;97     				this->Dir(A);
0002a8  ed940a0b          VLDR     s0,[r4,#0x2c]
0002ac  4620              MOV      r0,r4
0002ae  f7fffffe          BL       _ZN6Physic6Ball2D3DirEf ; Physic::Ball2D::Dir(float)
                  |L1.690|
;;;98         } else {}
;;;99         
;;;100        f2P point = {Sx, Sy};
0002b2  ed940a07          VLDR     s0,[r4,#0x1c]
0002b6  edd40a08          VLDR     s1,[r4,#0x20]
;;;101        return point;
;;;102    }
0002ba  b003              ADD      sp,sp,#0xc
0002bc  bd30              POP      {r4,r5,pc}
;;;103    
                          ENDP

                  _ZN6Physic6Ball2D4StepEv PROC ; Physic::Ball2D::Step()
;;;104    void Ball2D::Step ()
0002be  edd00a07          VLDR     s1,[r0,#0x1c]
;;;105    {   
;;;106        Sx = Sx + Vx * dt;
0002c2  ed901a05          VLDR     s2,[r0,#0x14]
0002c6  ed900a03          VLDR     s0,[r0,#0xc]
0002ca  ee410a00          VMLA.F32 s1,s2,s0
0002ce  edc00a07          VSTR     s1,[r0,#0x1c]
;;;107        Sy = Sy + Vy * dt;
0002d2  edd00a08          VLDR     s1,[r0,#0x20]
0002d6  ed901a06          VLDR     s2,[r0,#0x18]
0002da  ee410a00          VMLA.F32 s1,s2,s0
0002de  edc00a08          VSTR     s1,[r0,#0x20]
;;;108    }
0002e2  4770              BX       lr
;;;109    
                          ENDP

                  _ZN6Physic6Ball2D4TestEffff PROC ; Physic::Ball2D::Test(float, float, float, float)
;;;201    
;;;202    bool Ball2D::Test (float x0, float y0, float x, float y)
0002e4  b570              PUSH     {r4-r6,lr}
;;;203    {
0002e6  4604              MOV      r4,r0
0002e8  ed2d8b08          VPUSH    {d8-d11}
0002ec  eef08a40          VMOV.F32 s17,s0
0002f0  eeb09a60          VMOV.F32 s18,s1
0002f4  eef09a41          VMOV.F32 s19,s2
0002f8  eeb0aa61          VMOV.F32 s20,s3
;;;204        bool tst = false;
;;;205        float xa = Vx + Sx;
0002fc  ed940a05          VLDR     s0,[r4,#0x14]
000300  ed942a07          VLDR     s4,[r4,#0x1c]
000304  ee70aa02          VADD.F32 s21,s0,s4
;;;206        float ya = Vy + Sy;
000308  ed940a06          VLDR     s0,[r4,#0x18]
00030c  edd42a08          VLDR     s5,[r4,#0x20]
000310  ee30ba22          VADD.F32 s22,s0,s5
;;;207        float a = 0.0F;
000314  ed9f8a3f          VLDR     s16,|L1.1044|
;;;208        
;;;209        tst = gTest::TestLineIntersect(x0, y0, x, y, Sx, Sy, xa, ya);
000318  eeb03a6a          VMOV.F32 s6,s21
00031c  eef01a4a          VMOV.F32 s3,s20
000320  eef03a4b          VMOV.F32 s7,s22
000324  eeb01a69          VMOV.F32 s2,s19
000328  eef00a49          VMOV.F32 s1,s18
00032c  eeb00a68          VMOV.F32 s0,s17
000330  f7fffffe          BL       _ZN5gTest17TestLineIntersectEffffffff ; gTest::TestLineIntersect(float, float, float, float, float, float, float, float)
000334  4605              MOV      r5,r0
;;;210        if (!tst) {
000336  b995              CBNZ     r5,|L1.862|
;;;211            tst = gTest::TestLineIntersect(x0, y0, x, y, xa, ya, Sx, Sy);
000338  edd43a08          VLDR     s7,[r4,#0x20]
00033c  ed943a07          VLDR     s6,[r4,#0x1c]
000340  eef02a4b          VMOV.F32 s5,s22
000344  eeb02a6a          VMOV.F32 s4,s21
000348  eef01a4a          VMOV.F32 s3,s20
00034c  eeb01a69          VMOV.F32 s2,s19
000350  eef00a49          VMOV.F32 s1,s18
000354  eeb00a68          VMOV.F32 s0,s17
000358  f7fffffe          BL       _ZN5gTest17TestLineIntersectEffffffff ; gTest::TestLineIntersect(float, float, float, float, float, float, float, float)
00035c  4605              MOV      r5,r0
                  |L1.862|
;;;212        } else {}
;;;213        if (tst) {
00035e  b33d              CBZ      r5,|L1.944|
;;;214          if (y0 == y) {
000360  eeb49a4a          VCMP.F32 s18,s20
000364  eef1fa10          VMRS     APSR_nzcv,FPSCR
000368  d01b              BEQ      |L1.930|
;;;215              a = 0;
;;;216          } else if (x0 == x) {
00036a  eef48a69          VCMP.F32 s17,s19
00036e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000372  d102              BNE      |L1.890|
;;;217              a = -PI_const;
000374  ed9f8a28          VLDR     s16,|L1.1048|
000378  e013              B        |L1.930|
                  |L1.890|
;;;218          } else {
;;;219              a = atan(double((y - y0) / (x - x0)));
00037a  ee7a0a49          VSUB.F32 s1,s20,s18
00037e  ee391ae8          VSUB.F32 s2,s19,s17
000382  ee800a81          VDIV.F32 s0,s1,s2
000386  ee100a10          VMOV     r0,s0
00038a  f7fffffe          BL       __aeabi_f2d
00038e  ec410b10          VMOV     d0,r0,r1
000392  f7fffffe          BL       __hardfp_atan
000396  ec510b10          VMOV     r0,r1,d0
00039a  f7fffffe          BL       __aeabi_d2f
00039e  ee080a10          VMOV     s16,r0
                  |L1.930|
;;;220          }
;;;221          this->Dir(-A + a);  
0003a2  ed940a0b          VLDR     s0,[r4,#0x2c]
0003a6  4620              MOV      r0,r4
0003a8  ee380a40          VSUB.F32 s0,s16,s0
0003ac  f7fffffe          BL       _ZN6Physic6Ball2D3DirEf ; Physic::Ball2D::Dir(float)
                  |L1.944|
;;;222        } else {}
;;;223        
;;;224        return tst;
;;;225    }
0003b0  ecbd8b08          VPOP     {d8-d11}
0003b4  4628              MOV      r0,r5                 ;224
0003b6  bd70              POP      {r4-r6,pc}
;;;226    
                          ENDP

                  _ZN6Physic6Ball2D3DirEff PROC ; Physic::Ball2D::Dir(float, float)
;;;235    
;;;236    void Ball2D::Dir (float a, float b)
0003b8  ed800a0c          VSTR     s0,[r0,#0x30]
;;;237    {
;;;238    	  sina = a;
;;;239    	  cosa = b;
0003bc  edc00a0d          VSTR     s1,[r0,#0x34]
;;;240        Vx = V * sina;
0003c0  ed901a04          VLDR     s2,[r0,#0x10]
0003c4  ee210a00          VMUL.F32 s0,s2,s0
0003c8  ed800a05          VSTR     s0,[r0,#0x14]
;;;241        Vy = V * cosa;
0003cc  ee210a20          VMUL.F32 s0,s2,s1
0003d0  ed800a06          VSTR     s0,[r0,#0x18]
;;;242    }
0003d4  4770              BX       lr
;;;243    
                          ENDP

                  _ZN6Physic6Ball2D4TestERS0_ PROC ; Physic::Ball2D::Test(Physic::Ball2D&)
;;;109    
;;;110    bool Ball2D::Test (Ball2D &ball)
0003d6  b088              SUB      sp,sp,#0x20
;;;111    {
;;;112        f2D r = {ball.Sx, ball.Sy, ball.m, ball.m};
0003d8  ed912a07          VLDR     s4,[r1,#0x1c]
0003dc  ed8d2a04          VSTR     s4,[sp,#0x10]
0003e0  edd12a08          VLDR     s5,[r1,#0x20]
0003e4  edcd2a05          VSTR     s5,[sp,#0x14]
0003e8  ed913a0a          VLDR     s6,[r1,#0x28]
0003ec  ed8d3a06          VSTR     s6,[sp,#0x18]
0003f0  ed8d3a07          VSTR     s6,[sp,#0x1c]
;;;113    		f2D r0 = {Sx, Sy, this->m, this->m};
0003f4  ed900a07          VLDR     s0,[r0,#0x1c]
0003f8  ed8d0a00          VSTR     s0,[sp,#0]
0003fc  edd00a08          VLDR     s1,[r0,#0x20]
000400  edcd0a01          VSTR     s1,[sp,#4]
000404  ed901a0a          VLDR     s2,[r0,#0x28]
000408  ed8d1a02          VSTR     s2,[sp,#8]
00040c  ed8d1a03          VSTR     s2,[sp,#0xc]
;;;114    		if (Sx >= ball.Sx) {
;;;115    			if ((Vx > 0)) {
000410  e00c              B        |L1.1068|
000412  0000              DCW      0x0000
                  |L1.1044|
000414  00000000          DCFS     0x00000000 ; 0
                  |L1.1048|
000418  c0490fdb          DCFS     0xc0490fdb ; -3.1415927410125732
                  |L1.1052|
                          DCD      0x40a00000
                  |L1.1056|
000420  3dcccccd          DCFS     0x3dcccccd ; 0.10000000149011612
                  |L1.1060|
                          DCD      0x41f00000
                  |L1.1064|
000428  3e99999a          DCFS     0x3e99999a ; 0.30000001192092896
                  |L1.1068|
00042c  ed904a05          VLDR     s8,[r0,#0x14]
000430  eeb40ac2          VCMPE.F32 s0,s4                 ;114
000434  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;114
000438  db16              BLT      |L1.1128|
00043a  eeb54ac0          VCMPE.F32 s8,#0.0
00043e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000442  dd28              BLE      |L1.1174|
;;;116    				if ((ball.Vx < 0)) {
000444  edd14a05          VLDR     s9,[r1,#0x14]
000448  eef54ac0          VCMPE.F32 s9,#0.0
00044c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000450  d202              BCS      |L1.1112|
;;;117    				  return false;
000452  2000              MOVS     r0,#0
;;;118    				} else if (Vx > ball.Vx){
;;;119    					return false;
;;;120    				}
;;;121    			} else {}
;;;122    		} else {
;;;123    			if ((Vx < 0)) {
;;;124    				if ((ball.Vx > 0)) {
;;;125    				  return false;
;;;126    				} else if (Vx < ball.Vx){
;;;127    					return false;
;;;128    				}
;;;129    			} else {}
;;;130    		}
;;;131    				
;;;132    		if (Sy >= ball.Sy) {
;;;133    			if ((Vy > 0)) {
;;;134    				if ((ball.Vy < 0)) {
;;;135    				  return false;
;;;136    				} else if (Vy > ball.Vy){
;;;137    					return false;
;;;138    				}
;;;139    			} else {}
;;;140    		} else {
;;;141    			if ((Vy < 0)) {
;;;142    				if ((ball.Vy > 0)) {
;;;143    				  return false;
;;;144    				} else if (Vy < ball.Vy){
;;;145    					return false;
;;;146    				}
;;;147    			} else {}
;;;148    		}
;;;149        return (gTest::TestBoxBounds(r0, r)); 
;;;150    }
000454  b008              ADD      sp,sp,#0x20
000456  4770              BX       lr
                  |L1.1112|
000458  eeb44ae4          VCMPE.F32 s8,s9                 ;118
00045c  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;118
000460  dd19              BLE      |L1.1174|
000462  2000              MOVS     r0,#0                 ;119
000464  b008              ADD      sp,sp,#0x20
000466  4770              BX       lr
                  |L1.1128|
000468  eeb54ac0          VCMPE.F32 s8,#0.0               ;123
00046c  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;123
000470  d211              BCS      |L1.1174|
000472  edd14a05          VLDR     s9,[r1,#0x14]         ;124
000476  eef54ac0          VCMPE.F32 s9,#0.0               ;124
00047a  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;124
00047e  dd02              BLE      |L1.1158|
000480  2000              MOVS     r0,#0                 ;125
000482  b008              ADD      sp,sp,#0x20
000484  4770              BX       lr
                  |L1.1158|
000486  eeb44ae4          VCMPE.F32 s8,s9                 ;126
00048a  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;126
00048e  d202              BCS      |L1.1174|
000490  2000              MOVS     r0,#0                 ;127
000492  b008              ADD      sp,sp,#0x20
000494  4770              BX       lr
                  |L1.1174|
000496  eef01a60          VMOV.F32 s3,s1                 ;132
00049a  eef03a62          VMOV.F32 s7,s5                 ;132
00049e  eef41ae3          VCMPE.F32 s3,s7                 ;132
0004a2  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;132
0004a6  db18              BLT      |L1.1242|
0004a8  edd04a06          VLDR     s9,[r0,#0x18]         ;133
0004ac  eef54ac0          VCMPE.F32 s9,#0.0               ;133
0004b0  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;133
0004b4  dd2a              BLE      |L1.1292|
0004b6  ed914a06          VLDR     s8,[r1,#0x18]         ;134
0004ba  eeb54ac0          VCMPE.F32 s8,#0.0               ;134
0004be  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;134
0004c2  d202              BCS      |L1.1226|
0004c4  2000              MOVS     r0,#0                 ;135
0004c6  b008              ADD      sp,sp,#0x20
0004c8  4770              BX       lr
                  |L1.1226|
0004ca  eef44ac4          VCMPE.F32 s9,s8                 ;136
0004ce  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;136
0004d2  dd1b              BLE      |L1.1292|
0004d4  2000              MOVS     r0,#0                 ;137
0004d6  b008              ADD      sp,sp,#0x20
0004d8  4770              BX       lr
                  |L1.1242|
0004da  ed904a06          VLDR     s8,[r0,#0x18]         ;141
0004de  eeb54ac0          VCMPE.F32 s8,#0.0               ;141
0004e2  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;141
0004e6  d211              BCS      |L1.1292|
0004e8  edd14a06          VLDR     s9,[r1,#0x18]         ;142
0004ec  eef54ac0          VCMPE.F32 s9,#0.0               ;142
0004f0  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;142
0004f4  dd02              BLE      |L1.1276|
0004f6  2000              MOVS     r0,#0                 ;143
0004f8  b008              ADD      sp,sp,#0x20
0004fa  4770              BX       lr
                  |L1.1276|
0004fc  eeb44ae4          VCMPE.F32 s8,s9                 ;144
000500  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;144
000504  d202              BCS      |L1.1292|
000506  2000              MOVS     r0,#0                 ;145
000508  b008              ADD      sp,sp,#0x20
00050a  4770              BX       lr
                  |L1.1292|
00050c  eef03a43          VMOV.F32 s7,s6                 ;149
000510  eef01a41          VMOV.F32 s3,s2                 ;149
000514  b008              ADD      sp,sp,#0x20           ;149
000516  f7ffbffe          B.W      _ZN5gTest13TestBoxBoundsE3f2DS0_ ; gTest::TestBoxBounds(f2D, f2D)
;;;151    
                          ENDP

                  _ZN6Physic6Ball2D5SwapPERS0_ PROC ; Physic::Ball2D::SwapP(Physic::Ball2D&)
;;;152    bool Ball2D::SwapP (Ball2D &ball)
00051a  b500              PUSH     {lr}
;;;153    {
00051c  4602              MOV      r2,r0
00051e  4608              MOV      r0,r1
;;;154    	
;;;155        float ta, tV, tm, sa, ca; 
;;;156    	  
;;;157    	  tV =  ball.V;
000520  ed901a04          VLDR     s2,[r0,#0x10]
;;;158    	  ta =  ball.A;
000524  edd02a0b          VLDR     s5,[r0,#0x2c]
;;;159    	  tm = ball.m; 
000528  edd01a0a          VLDR     s3,[r0,#0x28]
;;;160    	  sa = ball.sina;
00052c  edd03a0c          VLDR     s7,[r0,#0x30]
;;;161    	  ca = ball.cosa;
000530  ed904a0d          VLDR     s8,[r0,#0x34]
;;;162    	  float km = 1 / (ball.m + m);
000534  ed922a0a          VLDR     s4,[r2,#0x28]
000538  eef70a00          VMOV.F32 s1,#1.00000000
00053c  ee310a82          VADD.F32 s0,s3,s4
000540  ee803a80          VDIV.F32 s6,s1,s0
;;;163    	  float k = (V + tV) * km;
000544  ed920a04          VLDR     s0,[r2,#0x10]
000548  ee300a01          VADD.F32 s0,s0,s2
00054c  ee201a03          VMUL.F32 s2,s0,s6
;;;164    	  
;;;165    	  ball.V  = k * m;
000550  ee220a01          VMUL.F32 s0,s4,s2
000554  ed800a04          VSTR     s0,[r0,#0x10]
;;;166    	  V  =  k * tm;
000558  ee210a21          VMUL.F32 s0,s2,s3
00055c  ed820a04          VSTR     s0,[r2,#0x10]
;;;167    	  ball.p = ball.m * ball.V;
000560  ed900a0a          VLDR     s0,[r0,#0x28]
000564  edd00a04          VLDR     s1,[r0,#0x10]
000568  ee200a20          VMUL.F32 s0,s0,s1
00056c  ed800a09          VSTR     s0,[r0,#0x24]
;;;168    	  p = m * V;
000570  ed920a0a          VLDR     s0,[r2,#0x28]
000574  edd20a04          VLDR     s1,[r2,#0x10]
000578  ee200a20          VMUL.F32 s0,s0,s1
00057c  ed820a09          VSTR     s0,[r2,#0x24]
;;;169    	  ball.A = A;
000580  ed920a0b          VLDR     s0,[r2,#0x2c]
000584  ed800a0b          VSTR     s0,[r0,#0x2c]
;;;170    	  A = ta;
000588  edc22a0b          VSTR     s5,[r2,#0x2c]
;;;171    	  ball.Dir(sina, cosa);
00058c  edd20a0d          VLDR     s1,[r2,#0x34]
000590  ed920a0c          VLDR     s0,[r2,#0x30]
000594  f7fffffe          BL       _ZN6Physic6Ball2D3DirEff ; Physic::Ball2D::Dir(float, float)
;;;172    	  this->Dir(sa, ca);
000598  eef00a44          VMOV.F32 s1,s8
00059c  eeb00a63          VMOV.F32 s0,s7
0005a0  4610              MOV      r0,r2
0005a2  f7fffffe          BL       _ZN6Physic6Ball2D3DirEff ; Physic::Ball2D::Dir(float, float)
;;;173        return false;
0005a6  2000              MOVS     r0,#0
;;;174    }
0005a8  bd00              POP      {pc}
;;;175    
                          ENDP

                  _ZN6Physic11Ball2DGroupC2Ev                  ; Alternate entry point ; Physic::Ball2DGroup::Ball2DGroup__sub_object()
                  _ZN6Physic11Ball2DGroupC1Ev PROC ; Physic::Ball2DGroup::Ball2DGroup()
;;;245    
;;;246    Ball2DGroup::Ball2DGroup () {}
;;;247        
0005aa  b510              PUSH     {r4,lr}
0005ac  4990              LDR      r1,|L1.2032|
0005ae  6001              STR      r1,[r0,#0]
0005b0  3014              ADDS     r0,r0,#0x14
0005b2  f7fffffe          BL       _ZN13List_IteratorIN6Physic6Ball2DEEC1Ev ; List_Iterator<Physic::Ball2D>::List_Iterator()
0005b6  3814              SUBS     r0,r0,#0x14
0005b8  bd10              POP      {r4,pc}
                          ENDP

                  _ZN6Physic11Ball2DGroupclE3b2Dff PROC ; Physic::Ball2DGroup::operator ()(b2D, float, float)
;;;248    void Ball2DGroup::operator () (b2D r, float m, float p)
0005ba  b407              PUSH     {r0-r2}
;;;249    {
0005bc  ed2d0b02          VPUSH    {d0}
;;;250        this->Rect = r;
0005c0  9a04              LDR      r2,[sp,#0x10]
0005c2  9903              LDR      r1,[sp,#0xc]
0005c4  6102              STR      r2,[r0,#0x10]
0005c6  60c1              STR      r1,[r0,#0xc]
;;;251        this->p = p;
0005c8  edc00a01          VSTR     s1,[r0,#4]
;;;252        this->m = m;    
0005cc  ed800a02          VSTR     s0,[r0,#8]
;;;253    }
0005d0  b005              ADD      sp,sp,#0x14
0005d2  4770              BX       lr
;;;254    
                          ENDP

                  _ZN6Physic11Ball2DGroup4StepEv PROC ; Physic::Ball2DGroup::Step()
;;;255    void Ball2DGroup::Step ()
0005d4  e92d43f0          PUSH     {r4-r9,lr}
;;;256    {
0005d8  b083              SUB      sp,sp,#0xc
0005da  4604              MOV      r4,r0
;;;257        uint32_t t = this->Balls.Contain();
0005dc  f1040014          ADD      r0,r4,#0x14
0005e0  f7fffffe          BL       _ZN13List_IteratorIN6Physic6Ball2DEE7ContainEv ; List_Iterator<Physic::Ball2D>::Contain()
0005e4  4606              MOV      r6,r0
;;;258    	  lArray<Ball2D> *array = this->New<lArray<Ball2D> >();
0005e6  4620              MOV      r0,r4
0005e8  f7fffffe          BL       _ZN9AllocatorIN6Physic6Ball2DEE3NewI6lArrayIS1_EEEPT_v ; T1* Allocator<Physic::Ball2D>::New<lArray<Physic::Ball2D>>()
0005ec  4680              MOV      r8,r0
;;;259    	  (*array)(t);
0005ee  4631              MOV      r1,r6
0005f0  4640              MOV      r0,r8
0005f2  f7fffffe          BL       _ZN6lArrayIN6Physic6Ball2DEEclEj ; lArray<Physic::Ball2D>::operator ()(unsigned)
;;;260    	  uint32_t moved = 0;
0005f6  2700              MOVS     r7,#0
;;;261        uint32_t c = t;
;;;262    	  Ball2D *ball, *ball2;
;;;263    	  ball = this->Balls.GetFirst();
0005f8  f1040014          ADD      r0,r4,#0x14
0005fc  f7fffffe          BL       _ZN13List_IteratorIN6Physic6Ball2DEE8GetFirstEv ; List_Iterator<Physic::Ball2D>::GetFirst()
000600  4605              MOV      r5,r0
;;;264    	  while (ball) {
000602  b185              CBZ      r5,|L1.1574|
                  |L1.1540|
;;;265    			 ball->Step(this->Rect); 
000604  4628              MOV      r0,r5
000606  6922              LDR      r2,[r4,#0x10]
000608  68e1              LDR      r1,[r4,#0xc]
00060a  f7fffffe          BL       _ZN6Physic6Ball2D4StepE3b2D ; Physic::Ball2D::Step(b2D)
00060e  ed8d0a00          VSTR     s0,[sp,#0]
000612  edcd0a01          VSTR     s1,[sp,#4]
;;;266    			 ball = this->Balls.GetNext(ball);
000616  4629              MOV      r1,r5
000618  f1040014          ADD      r0,r4,#0x14
00061c  f7fffffe          BL       _ZN13List_IteratorIN6Physic6Ball2DEE7GetNextEPS1_ ; List_Iterator<Physic::Ball2D>::GetNext(Physic::Ball2D*)
000620  4605              MOV      r5,r0
000622  2d00              CMP      r5,#0                 ;264
000624  d1ee              BNE      |L1.1540|
                  |L1.1574|
;;;267    		}
;;;268        for (int32_t i = c; i >= 0; i--) {
000626  2e00              CMP      r6,#0
000628  db3e              BLT      |L1.1704|
                  |L1.1578|
;;;269            ball = this->Balls.Get(i);
00062a  4631              MOV      r1,r6
00062c  f1040014          ADD      r0,r4,#0x14
000630  f7fffffe          BL       _ZN13List_IteratorIN6Physic6Ball2DEE3GetEj ; List_Iterator<Physic::Ball2D>::Get(unsigned)
000634  4681              MOV      r9,r0
;;;270    			  this->Balls - ball;
000636  4649              MOV      r1,r9
000638  f1040014          ADD      r0,r4,#0x14
00063c  f7fffffe          BL       _ZN13List_IteratorIN6Physic6Ball2DEEmiEPS1_ ; List_Iterator<Physic::Ball2D>::operator -(Physic::Ball2D*)
;;;271    			  ball2 = this->Balls.GetFirst();
000640  f1040014          ADD      r0,r4,#0x14
000644  f7fffffe          BL       _ZN13List_IteratorIN6Physic6Ball2DEE8GetFirstEv ; List_Iterator<Physic::Ball2D>::GetFirst()
000648  4605              MOV      r5,r0
;;;272            while (ball2) {
00064a  0028              MOVS     r0,r5
00064c  d024              BEQ      |L1.1688|
                  |L1.1614|
;;;273                if (ball2->Test(*ball)) {
00064e  4649              MOV      r1,r9
000650  4628              MOV      r0,r5
000652  f7fffffe          BL       _ZN6Physic6Ball2D4TestERS0_ ; Physic::Ball2D::Test(Physic::Ball2D&)
000656  b178              CBZ      r0,|L1.1656|
;;;274    							  ball2->SwapP(*ball);	
000658  4649              MOV      r1,r9
00065a  4628              MOV      r0,r5
00065c  f7fffffe          BL       _ZN6Physic6Ball2D5SwapPERS0_ ; Physic::Ball2D::SwapP(Physic::Ball2D&)
;;;275                    array->Add(ball2, moved++);
000660  463a              MOV      r2,r7
000662  1c7f              ADDS     r7,r7,#1
000664  4629              MOV      r1,r5
000666  4640              MOV      r0,r8
000668  f7fffffe          BL       _ZN6lArrayIN6Physic6Ball2DEE3AddEPS1_j ; lArray<Physic::Ball2D>::Add(Physic::Ball2D*, unsigned)
;;;276    							  i--;
00066c  1e76              SUBS     r6,r6,#1
;;;277                    this->Balls - ball2;							
00066e  4629              MOV      r1,r5
000670  f1040014          ADD      r0,r4,#0x14
000674  f7fffffe          BL       _ZN13List_IteratorIN6Physic6Ball2DEEmiEPS1_ ; List_Iterator<Physic::Ball2D>::operator -(Physic::Ball2D*)
                  |L1.1656|
;;;278                } else {}
;;;279    					  ball2->key = ball2->Sx * ball2->Sy;
000678  ed950a07          VLDR     s0,[r5,#0x1c]
00067c  edd50a08          VLDR     s1,[r5,#0x20]
000680  ee200a20          VMUL.F32 s0,s0,s1
000684  ed850a02          VSTR     s0,[r5,#8]
;;;280    						ball2 = this->Balls.GetNext(ball2);
000688  4629              MOV      r1,r5
00068a  f1040014          ADD      r0,r4,#0x14
00068e  f7fffffe          BL       _ZN13List_IteratorIN6Physic6Ball2DEE7GetNextEPS1_ ; List_Iterator<Physic::Ball2D>::GetNext(Physic::Ball2D*)
000692  4605              MOV      r5,r0
000694  2d00              CMP      r5,#0                 ;272
000696  d1da              BNE      |L1.1614|
                  |L1.1688|
;;;281            }
;;;282    				this->Balls + ball;
000698  4649              MOV      r1,r9
00069a  f1040014          ADD      r0,r4,#0x14
00069e  f7fffffe          BL       _ZN13List_IteratorIN6Physic6Ball2DEEplEPS1_ ; List_Iterator<Physic::Ball2D>::operator +(Physic::Ball2D*)
0006a2  1e76              SUBS     r6,r6,#1              ;268
0006a4  2e00              CMP      r6,#0                 ;268
0006a6  dac0              BGE      |L1.1578|
                  |L1.1704|
;;;283        }
;;;284    		this->Balls.Array(array, moved);
0006a8  463a              MOV      r2,r7
0006aa  4641              MOV      r1,r8
0006ac  f1040014          ADD      r0,r4,#0x14
0006b0  f7fffffe          BL       _ZN13List_IteratorIN6Physic6Ball2DEE5ArrayI6lArrayIS1_EEERS2_PT_j ; List_Iterator<Physic::Ball2D>& List_Iterator<Physic::Ball2D>::Array<lArray<Physic::Ball2D>>(T1*, unsigned)
;;;285    		(*array).~lArray();
0006b4  b003              ADD      sp,sp,#0xc
0006b6  4640              MOV      r0,r8
0006b8  e8bd43f0          POP      {r4-r9,lr}
0006bc  f7ffbffe          B.W      _ZN6lArrayIN6Physic6Ball2DEED1Ev ; lArray<Physic::Ball2D>::~lArray()
;;;286    }
;;;287    
                          ENDP

                  _ZN6Physic11Ball2DGroup3AddEj PROC ; Physic::Ball2DGroup::Add(unsigned)
;;;288    void Ball2DGroup::Add (uint32_t q)
0006c0  b570              PUSH     {r4-r6,lr}
;;;289    {
0006c2  4604              MOV      r4,r0
0006c4  ed2d8b06          VPUSH    {d8-d10}
;;;290        float a = PI2_const - 0.7F;
0006c8  ed9f8a4a          VLDR     s16,|L1.2036|
;;;291    	  float x = 30, y = 30, p = 3.0F;
0006cc  eeb39a0e          VMOV.F32 s18,#30.00000000
0006d0  eef08a08          VMOV.F32 s17,#3.00000000
;;;292        Ball2D *ball;
;;;293        while (q--) {
0006d4  1e4e              SUBS     r6,r1,#1
0006d6  d329              BCC      |L1.1836|
;;;294            ball = this->New();
;;;295            if (! ball) {
;;;296                return;
;;;297            } else {}
;;;298            (*ball)(m, p, a);
;;;299    				m += 0.1F;
0006d8  ed5f9aaf          VLDR     s19,|L1.1056|
;;;300    				ball->Sx = 30;
;;;301    				ball->Sy = 30;	
;;;302    				p += 1.5F;
0006dc  eeb7aa08          VMOV.F32 s20,#1.50000000
;;;303            this->Balls + ball;
;;;304            a += 0.01F;
0006e0  eddfaa45          VLDR     s21,|L1.2040|
                  |L1.1764|
0006e4  4620              MOV      r0,r4                 ;294
0006e6  f7fffffe          BL       _ZN9AllocatorIN6Physic6Ball2DEE3NewEv ; Allocator<Physic::Ball2D>::New()
0006ea  4605              MOV      r5,r0                 ;294
0006ec  2d00              CMP      r5,#0                 ;295
0006ee  d01d              BEQ      |L1.1836|
0006f0  ed940a02          VLDR     s0,[r4,#8]            ;298
0006f4  eeb01a48          VMOV.F32 s2,s16                ;298
0006f8  eef00a68          VMOV.F32 s1,s17                ;298
0006fc  4628              MOV      r0,r5                 ;298
0006fe  f7fffffe          BL       _ZN6Physic6Ball2DclEfff ; Physic::Ball2D::operator ()(float, float, float)
000702  ed940a02          VLDR     s0,[r4,#8]            ;299
000706  ee300a29          VADD.F32 s0,s0,s19             ;299
00070a  ed840a02          VSTR     s0,[r4,#8]            ;299
00070e  ed859a07          VSTR     s18,[r5,#0x1c]        ;300
000712  ed859a08          VSTR     s18,[r5,#0x20]        ;301
000716  ee788a8a          VADD.F32 s17,s17,s20           ;302
00071a  4629              MOV      r1,r5                 ;303
00071c  f1040014          ADD      r0,r4,#0x14           ;303
000720  f7fffffe          BL       _ZN13List_IteratorIN6Physic6Ball2DEEplEPS1_ ; List_Iterator<Physic::Ball2D>::operator +(Physic::Ball2D*)
000724  ee388a2a          VADD.F32 s16,s16,s21
000728  1e76              SUBS     r6,r6,#1              ;293
00072a  d2db              BCS      |L1.1764|
                  |L1.1836|
;;;305        }
;;;306    }
00072c  ecbd8b06          VPOP     {d8-d10}
000730  bd70              POP      {r4-r6,pc}
;;;307    
                          ENDP

                  _ZN6Physic11Ball2DGroup3AddEfff PROC ; Physic::Ball2DGroup::Add(float, float, float)
;;;308    void Ball2DGroup::Add (float M, float P, float A)
000732  b570              PUSH     {r4-r6,lr}
;;;309    {
000734  4605              MOV      r5,r0
000736  ed2d8b04          VPUSH    {d8-d9}
00073a  eeb08a40          VMOV.F32 s16,s0
00073e  eef08a60          VMOV.F32 s17,s1
000742  eeb09a41          VMOV.F32 s18,s2
;;;310        Ball2D *ball;
;;;311        ball = this->New();
000746  4628              MOV      r0,r5
000748  f7fffffe          BL       _ZN9AllocatorIN6Physic6Ball2DEE3NewEv ; Allocator<Physic::Ball2D>::New()
00074c  4604              MOV      r4,r0
;;;312        if (! ball) {
00074e  2c00              CMP      r4,#0
000750  d017              BEQ      |L1.1922|
;;;313            return;
;;;314        } else {}
;;;315        (*ball)(M, P, A);
000752  eeb01a49          VMOV.F32 s2,s18
000756  eef00a68          VMOV.F32 s1,s17
00075a  eeb00a48          VMOV.F32 s0,s16
00075e  4620              MOV      r0,r4
000760  f7fffffe          BL       _ZN6Physic6Ball2DclEfff ; Physic::Ball2D::operator ()(float, float, float)
;;;316    		ball->Sx = 30;
000764  eeb30a0e          VMOV.F32 s0,#30.00000000
000768  ed840a07          VSTR     s0,[r4,#0x1c]
;;;317    		ball->Sy = 30;
00076c  ed840a08          VSTR     s0,[r4,#0x20]
;;;318    	  this->Balls + ball;
000770  4621              MOV      r1,r4
000772  ecbd8b04          VPOP     {d8-d9}
000776  f1050014          ADD      r0,r5,#0x14
00077a  e8bd4070          POP      {r4-r6,lr}
00077e  f7ffbffe          B.W      _ZN13List_IteratorIN6Physic6Ball2DEEplEPS1_ ; List_Iterator<Physic::Ball2D>::operator +(Physic::Ball2D*)
                  |L1.1922|
;;;319    }
000782  ecbd8b04          VPOP     {d8-d9}
000786  bd70              POP      {r4-r6,pc}
;;;320    
                          ENDP

                  _ZN6Physic11Ball2DGroup6RemoveEj PROC ; Physic::Ball2DGroup::Remove(unsigned)
;;;321    void Ball2DGroup::Remove (uint32_t q)
000788  4770              BX       lr
;;;322    {
;;;323        
;;;324    }
;;;325    
                          ENDP

                  _ZN6Physic11Ball2DGroup4DrawEv PROC ; Physic::Ball2DGroup::Draw()
;;;326    void Ball2DGroup::Draw ()
00078a  b570              PUSH     {r4-r6,lr}
;;;327    {
00078c  b082              SUB      sp,sp,#8
00078e  4605              MOV      r5,r0
;;;328        f2P p = {0, 0};
000790  2000              MOVS     r0,#0
000792  9000              STR      r0,[sp,#0]
000794  9001              STR      r0,[sp,#4]
;;;329        Ball2D *ball = this->Balls.GetFirst();
000796  f1050014          ADD      r0,r5,#0x14
00079a  f7fffffe          BL       _ZN13List_IteratorIN6Physic6Ball2DEE8GetFirstEv ; List_Iterator<Physic::Ball2D>::GetFirst()
00079e  4604              MOV      r4,r0
;;;330        while (ball) {
0007a0  0020              MOVS     r0,r4
0007a2  d023              BEQ      |L1.2028|
;;;331            p.x = ball->Sx - ball->m;
;;;332            p.y = ball->Sy - ball->m;
;;;333            this->Draw (p, ball->m, 0xcccc + (uint16_t)ball->p);    
0007a4  f64c46cc          MOV      r6,#0xcccc
                  |L1.1960|
0007a8  ed940a07          VLDR     s0,[r4,#0x1c]         ;331
0007ac  ed941a0a          VLDR     s2,[r4,#0x28]         ;331
0007b0  ee300a41          VSUB.F32 s0,s0,s2              ;331
0007b4  ed8d0a00          VSTR     s0,[sp,#0]            ;331
0007b8  edd40a08          VLDR     s1,[r4,#0x20]         ;332
0007bc  ee700ac1          VSUB.F32 s1,s1,s2              ;332
0007c0  edcd0a01          VSTR     s1,[sp,#4]            ;332
0007c4  edd41a09          VLDR     s3,[r4,#0x24]
0007c8  eefc1ae1          VCVT.U32.F32 s3,s3
0007cc  ee110a90          VMOV     r0,s3
0007d0  b280              UXTH     r0,r0
0007d2  1981              ADDS     r1,r0,r6
0007d4  6828              LDR      r0,[r5,#0]
0007d6  6802              LDR      r2,[r0,#0]
0007d8  4628              MOV      r0,r5
0007da  4790              BLX      r2
;;;334            ball = this->Balls.GetNext(ball);
0007dc  4621              MOV      r1,r4
0007de  f1050014          ADD      r0,r5,#0x14
0007e2  f7fffffe          BL       _ZN13List_IteratorIN6Physic6Ball2DEE7GetNextEPS1_ ; List_Iterator<Physic::Ball2D>::GetNext(Physic::Ball2D*)
0007e6  4604              MOV      r4,r0
0007e8  2c00              CMP      r4,#0                 ;330
0007ea  d1dd              BNE      |L1.1960|
                  |L1.2028|
;;;335        }    
;;;336    }
0007ec  b002              ADD      sp,sp,#8
0007ee  bd70              POP      {r4-r6,pc}
;;;337    
                          ENDP

                  |L1.2032|
                          DCD      _ZTVN6Physic11Ball2DGroupE+0x8 ; vtable for Physic::Ball2DGroup
                  |L1.2036|
0007f4  3f5eec83          DCFS     0x3f5eec83 ; 0.87079638242721558
                  |L1.2040|
0007f8  3c23d70a          DCFS     0x3c23d70a ; 0.0099999997764825821

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||t._ZN9AllocatorIN6Physic6Ball2DEE3NewEv||, COMGROUP=_ZN9AllocatorIN6Physic6Ball2DEE3NewEv, CODE, READONLY, ALIGN=1

                  _ZN9AllocatorIN6Physic6Ball2DEE3NewEv PROC ; Allocator<Physic::Ball2D>::New()
;;;79     template <typename native>
;;;80       native *Allocator<native>::New ()
000000  2038              MOVS     r0,#0x38
;;;81     {
;;;82       return (native *)Alloc (sizeof(native));
000002  f7ffbffe          B.W      _Z5Allocj ; Alloc(unsigned)
;;;83     }
;;;84     
                          ENDP


                          AREA ||area_number.15||, COMGROUP=_ZN9AllocatorIN6Physic6Ball2DEE3NewEv, LINKORDER=||t._ZN9AllocatorIN6Physic6Ball2DEE3NewEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN9AllocatorIN6Physic6Ball2DEE3NewEv||
                          DCD      0x00000001

                          AREA ||t._ZN9AllocatorIN6Physic6Ball2DEE9NewlArrayEj||, COMGROUP=_ZN9AllocatorIN6Physic6Ball2DEE9NewlArrayEj, CODE, READONLY, ALIGN=1

                  _ZN9AllocatorIN6Physic6Ball2DEE9NewlArrayEj PROC ; Allocator<Physic::Ball2D>::NewlArray(unsigned)
;;;98     template <typename native>
;;;99       native **Allocator<native>::NewlArray (uint32_t size)
000000  0088              LSLS     r0,r1,#2
;;;100    {
;;;101      return (native **)Alloc (sizeof(native *) * size);
000002  f7ffbffe          B.W      _Z5Allocj ; Alloc(unsigned)
;;;102    }
;;;103    
                          ENDP


                          AREA ||area_number.22||, COMGROUP=_ZN9AllocatorIN6Physic6Ball2DEE9NewlArrayEj, LINKORDER=||t._ZN9AllocatorIN6Physic6Ball2DEE9NewlArrayEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN9AllocatorIN6Physic6Ball2DEE9NewlArrayEj||
                          DCD      0x00000001

                          AREA ||t._ZN9AllocatorIN6Physic6Ball2DEE3NewI6lArrayIS1_EEEPT_v||, COMGROUP=_ZN9AllocatorIN6Physic6Ball2DEE3NewI6lArrayIS1_EEEPT_v, CODE, READONLY, ALIGN=1

                  _ZN9AllocatorIN6Physic6Ball2DEE3NewI6lArrayIS1_EEEPT_v PROC ; T1* Allocator<Physic::Ball2D>::New<lArray<Physic::Ball2D>>()
;;;13       template <typename Obj>
;;;14         Obj *New ();
000000  200c              MOVS     r0,#0xc
;;;15     
;;;16       template <typename Obj>
;;;17         Obj *New (uint32_t); 
;;;18     	
;;;19     	template <typename Obj>
;;;20         Obj *NewArray (uint32_t);
;;;21     	
;;;22     	template <typename Obj>
;;;23         Obj **NewlArray (uint32_t);
;;;24     
;;;25       template <typename Obj>
;;;26         int32_t Delete (Obj *); 
;;;27     	
;;;28         native *New ();
;;;29         native *New (uint32_t); 
;;;30     	  native *NewArray (uint32_t);
;;;31     	  native **NewlArray (uint32_t);
;;;32       
;;;33       private:     
;;;34     };
;;;35     
;;;36     void *Alloc (uint32_t);
;;;37     int32_t Free (void *); 
;;;38     
;;;39     /*
;;;40     Allocator::Allocator () {}
;;;41     Allocator::~Allocator() {}
;;;42     */
;;;43     
;;;44     template <typename native>
;;;45     template <typename Obj>
;;;46       Obj *Allocator<native>::New ()
;;;47     {
;;;48       return (Obj *)Alloc (sizeof(Obj));
000002  f7ffbffe          B.W      _Z5Allocj ; Alloc(unsigned)
;;;49     }
;;;50     
                          ENDP


                          AREA ||area_number.29||, COMGROUP=_ZN9AllocatorIN6Physic6Ball2DEE3NewI6lArrayIS1_EEEPT_v, LINKORDER=||t._ZN9AllocatorIN6Physic6Ball2DEE3NewI6lArrayIS1_EEEPT_v||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.29||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN9AllocatorIN6Physic6Ball2DEE3NewI6lArrayIS1_EEEPT_v||
                          DCD      0x00000001

                          AREA ||t._ZN9AllocatorIN6Physic6Ball2DEE6DeleteIPS1_EEiPT_||, COMGROUP=_ZN9AllocatorIN6Physic6Ball2DEE6DeleteIPS1_EEiPT_, CODE, READONLY, ALIGN=1

                  _ZN9AllocatorIN6Physic6Ball2DEE6DeleteIPS1_EEiPT_ PROC ; int Allocator<Physic::Ball2D>::Delete<Physic::Ball2D*>(T1*)
;;;25       template <typename Obj>
;;;26         int32_t Delete (Obj *); 
000000  4608              MOV      r0,r1
;;;27     	
;;;28         native *New ();
;;;29         native *New (uint32_t); 
;;;30     	  native *NewArray (uint32_t);
;;;31     	  native **NewlArray (uint32_t);
;;;32       
;;;33       private:     
;;;34     };
;;;35     
;;;36     void *Alloc (uint32_t);
;;;37     int32_t Free (void *); 
;;;38     
;;;39     /*
;;;40     Allocator::Allocator () {}
;;;41     Allocator::~Allocator() {}
;;;42     */
;;;43     
;;;44     template <typename native>
;;;45     template <typename Obj>
;;;46       Obj *Allocator<native>::New ()
;;;47     {
;;;48       return (Obj *)Alloc (sizeof(Obj));
;;;49     }
;;;50     
;;;51     template <typename native>
;;;52     template <typename Obj>
;;;53       Obj *Allocator<native>::New (uint32_t size)
;;;54     {
;;;55       return (Obj *)Alloc (sizeof(Obj) + size);
;;;56     }
;;;57     
;;;58     template <typename native>
;;;59     template <typename Obj>
;;;60       Obj *Allocator<native>::NewArray (uint32_t size)
;;;61     {
;;;62       return (Obj *)Alloc (sizeof(Obj) * size);
;;;63     }
;;;64     
;;;65     template <typename native>
;;;66     template <typename Obj>
;;;67       Obj **Allocator<native>::NewlArray (uint32_t size)
;;;68     {
;;;69       return (Obj **)Alloc (sizeof(Obj *) * size);
;;;70     }
;;;71     
;;;72     template <typename native>
;;;73     template <typename Obj>
;;;74       int32_t Allocator<native>::Delete (Obj *o)
;;;75     {
;;;76       return Free(static_cast<void *>(o)); 
000002  f7ffbffe          B.W      _Z4FreePv ; Free(void*)
;;;77     }
;;;78     
                          ENDP


                          AREA ||area_number.36||, COMGROUP=_ZN9AllocatorIN6Physic6Ball2DEE6DeleteIPS1_EEiPT_, LINKORDER=||t._ZN9AllocatorIN6Physic6Ball2DEE6DeleteIPS1_EEiPT_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN9AllocatorIN6Physic6Ball2DEE6DeleteIPS1_EEiPT_||
                          DCD      0x00000001

                          AREA ||t._ZN9AllocatorIN6Physic6Ball2DEE6DeleteI6lArrayIS1_EEEiPT_||, COMGROUP=_ZN9AllocatorIN6Physic6Ball2DEE6DeleteI6lArrayIS1_EEEiPT_, CODE, READONLY, ALIGN=1

                  _ZN9AllocatorIN6Physic6Ball2DEE6DeleteI6lArrayIS1_EEEiPT_ PROC ; int Allocator<Physic::Ball2D>::Delete<lArray<Physic::Ball2D>>(T1*)
;;;25       template <typename Obj>
;;;26         int32_t Delete (Obj *); 
000000  4608              MOV      r0,r1
;;;27     	
;;;28         native *New ();
;;;29         native *New (uint32_t); 
;;;30     	  native *NewArray (uint32_t);
;;;31     	  native **NewlArray (uint32_t);
;;;32       
;;;33       private:     
;;;34     };
;;;35     
;;;36     void *Alloc (uint32_t);
;;;37     int32_t Free (void *); 
;;;38     
;;;39     /*
;;;40     Allocator::Allocator () {}
;;;41     Allocator::~Allocator() {}
;;;42     */
;;;43     
;;;44     template <typename native>
;;;45     template <typename Obj>
;;;46       Obj *Allocator<native>::New ()
;;;47     {
;;;48       return (Obj *)Alloc (sizeof(Obj));
;;;49     }
;;;50     
;;;51     template <typename native>
;;;52     template <typename Obj>
;;;53       Obj *Allocator<native>::New (uint32_t size)
;;;54     {
;;;55       return (Obj *)Alloc (sizeof(Obj) + size);
;;;56     }
;;;57     
;;;58     template <typename native>
;;;59     template <typename Obj>
;;;60       Obj *Allocator<native>::NewArray (uint32_t size)
;;;61     {
;;;62       return (Obj *)Alloc (sizeof(Obj) * size);
;;;63     }
;;;64     
;;;65     template <typename native>
;;;66     template <typename Obj>
;;;67       Obj **Allocator<native>::NewlArray (uint32_t size)
;;;68     {
;;;69       return (Obj **)Alloc (sizeof(Obj *) * size);
;;;70     }
;;;71     
;;;72     template <typename native>
;;;73     template <typename Obj>
;;;74       int32_t Allocator<native>::Delete (Obj *o)
;;;75     {
;;;76       return Free(static_cast<void *>(o)); 
000002  f7ffbffe          B.W      _Z4FreePv ; Free(void*)
;;;77     }
;;;78     
                          ENDP


                          AREA ||area_number.43||, COMGROUP=_ZN9AllocatorIN6Physic6Ball2DEE6DeleteI6lArrayIS1_EEEiPT_, LINKORDER=||t._ZN9AllocatorIN6Physic6Ball2DEE6DeleteI6lArrayIS1_EEEiPT_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.43||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN9AllocatorIN6Physic6Ball2DEE6DeleteI6lArrayIS1_EEEiPT_||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorIN6Physic6Ball2DEEC1Ev||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorIN6Physic6Ball2DEEC2Ev                  ; Alternate entry point ; List_Iterator<Physic::Ball2D>::List_Iterator__sub_object()
                  _ZN13List_IteratorIN6Physic6Ball2DEEC1Ev PROC ; List_Iterator<Physic::Ball2D>::List_Iterator()
;;;8      template <class T>
;;;9      List_Iterator<T>::List_Iterator()
;;;10     {
;;;11     }
;;;12     template <class T>
000000  4770              BX       lr
                          ENDP


                          AREA ||area_number.50||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEEC1Ev, LINKORDER=||t._ZN13List_IteratorIN6Physic6Ball2DEEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.50||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorIN6Physic6Ball2DEEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorIN6Physic6Ball2DEEplERS1_||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEEplERS1_, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorIN6Physic6Ball2DEEplERS1_ PROC ; List_Iterator<Physic::Ball2D>::operator +(Physic::Ball2D&)
;;;12     template <class T>
;;;13     bool List_Iterator<T>::operator + (T &item)
000000  6882              LDR      r2,[r0,#8]
;;;14     {
;;;15     	this->Elements++;
000002  1c52              ADDS     r2,r2,#1
000004  6082              STR      r2,[r0,#8]
;;;16     		T *i,*j;
;;;17     		if (!this->First) {
000006  6802              LDR      r2,[r0,#0]
000008  f04f0c00          MOV      r12,#0
00000c  2a00              CMP      r2,#0
00000e  d013              BEQ      |L56.56|
;;;18     			this->First = &item;
;;;19     			this->Last = &item;
;;;20     			item.rlink = (T *)0;
;;;21     			item.llink = (T *)0;
;;;22     			return true;
;;;23     		}
;;;24     		i = this->First;
;;;25     		j = (T *)0;
;;;26     		while (i != (T *)0) {
;;;27     			if (i->key > item.key) {
000010  ed910a02          VLDR     s0,[r1,#8]
                  |L56.20|
000014  edd20a02          VLDR     s1,[r2,#8]
000018  eef40ac0          VCMPE.F32 s1,s0
00001c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000020  dd12              BLE      |L56.72|
;;;28     				j = i;
000022  4613              MOV      r3,r2
;;;29     				i = i->rlink;
000024  6812              LDR      r2,[r2,#0]
000026  2a00              CMP      r2,#0                 ;26
;;;30     				continue;
000028  d1f4              BNE      |L56.20|
;;;31     			}
;;;32     			if (i->llink) {
;;;33     				i->llink->rlink = &item;
;;;34     				item.rlink = i;
;;;35     				item.llink = i->llink;
;;;36     				i->llink = &item;
;;;37     				return true;
;;;38     			}
;;;39     			item.rlink = i;
;;;40     			item.llink = (T *)0;
;;;41     			i->llink = &item;
;;;42     			this->First = &item;
;;;43     			return true;
;;;44     		}
;;;45     		j->rlink = &item;
00002a  6019              STR      r1,[r3,#0]
;;;46     		item.rlink = (T *)0;
00002c  f8c1c000          STR      r12,[r1,#0]
;;;47     		this->Last = &item;
000030  6041              STR      r1,[r0,#4]
;;;48     		item.llink = j;
000032  604b              STR      r3,[r1,#4]
;;;49     		return true;	
000034  2001              MOVS     r0,#1
;;;50     }
000036  4770              BX       lr
                  |L56.56|
000038  6001              STR      r1,[r0,#0]            ;18
00003a  6041              STR      r1,[r0,#4]            ;19
00003c  f8c1c000          STR      r12,[r1,#0]           ;20
000040  f8c1c004          STR      r12,[r1,#4]           ;21
000044  2001              MOVS     r0,#1                 ;22
000046  4770              BX       lr
                  |L56.72|
000048  6853              LDR      r3,[r2,#4]            ;32
00004a  b133              CBZ      r3,|L56.90|
00004c  6019              STR      r1,[r3,#0]            ;33
00004e  600a              STR      r2,[r1,#0]            ;34
000050  6850              LDR      r0,[r2,#4]            ;35
000052  6048              STR      r0,[r1,#4]            ;35
000054  6051              STR      r1,[r2,#4]            ;36
000056  2001              MOVS     r0,#1                 ;37
000058  4770              BX       lr
                  |L56.90|
00005a  600a              STR      r2,[r1,#0]            ;39
00005c  f8c1c004          STR      r12,[r1,#4]           ;40
000060  6051              STR      r1,[r2,#4]            ;41
000062  6001              STR      r1,[r0,#0]            ;42
000064  2001              MOVS     r0,#1                 ;43
000066  4770              BX       lr
;;;51     template <class T>
                          ENDP


                          AREA ||area_number.57||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEEplERS1_, LINKORDER=||t._ZN13List_IteratorIN6Physic6Ball2DEEplERS1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.57||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorIN6Physic6Ball2DEEplERS1_||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorIN6Physic6Ball2DEEmiERS1_||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEEmiERS1_, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorIN6Physic6Ball2DEEmiERS1_ PROC ; List_Iterator<Physic::Ball2D>::operator -(Physic::Ball2D&)
;;;51     template <class T>
;;;52     T *List_Iterator<T>::operator - (T &item)
000000  b410              PUSH     {r4}
;;;53     {
000002  4603              MOV      r3,r0
;;;54     	if (this->Elements == 0)return (T *)0;
000004  6898              LDR      r0,[r3,#8]
000006  2800              CMP      r0,#0
000008  d00f              BEQ      |L63.42|
;;;55     	this->Elements--;
00000a  1e40              SUBS     r0,r0,#1
00000c  6098              STR      r0,[r3,#8]
;;;56     	T *l = item.llink,*r = item.rlink;
00000e  6848              LDR      r0,[r1,#4]
000010  680a              LDR      r2,[r1,#0]
;;;57     		if (!l&&!r) {
000012  f04f0c00          MOV      r12,#0
000016  ea500402          ORRS     r4,r0,r2
00001a  d009              BEQ      |L63.48|
;;;58     			this->First = (T *)0;
;;;59     			this->Last = (T *)0;
;;;60     			return (T *)0;
;;;61     		}
;;;62     		if (!l) {
00001c  b178              CBZ      r0,|L63.62|
;;;63     			this->First = r;
;;;64     			r->llink = (T *)0;
;;;65     		}
;;;66     		else    l->rlink = r;
00001e  6002              STR      r2,[r0,#0]
                  |L63.32|
;;;67     		
;;;68     		if (!r) {
000020  b18a              CBZ      r2,|L63.70|
;;;69        			l->rlink = (T *)0;
;;;70     			  this->Last = l;
;;;71     		}
;;;72     		else    r->llink = l;
000022  6050              STR      r0,[r2,#4]
                  |L63.36|
;;;73     		return &item;	
;;;74     }
000024  bc10              POP      {r4}
000026  4608              MOV      r0,r1                 ;73
000028  4770              BX       lr
                  |L63.42|
00002a  bc10              POP      {r4}
00002c  2000              MOVS     r0,#0                 ;54
00002e  4770              BX       lr
                  |L63.48|
000030  f8c3c000          STR      r12,[r3,#0]           ;58
000034  f8c3c004          STR      r12,[r3,#4]           ;59
000038  bc10              POP      {r4}
00003a  2000              MOVS     r0,#0                 ;60
00003c  4770              BX       lr
                  |L63.62|
00003e  601a              STR      r2,[r3,#0]            ;63
000040  f8c2c004          STR      r12,[r2,#4]           ;64
000044  e7ec              B        |L63.32|
                  |L63.70|
000046  f8c0c000          STR      r12,[r0,#0]           ;69
00004a  6058              STR      r0,[r3,#4]            ;70
00004c  e7ea              B        |L63.36|
;;;75     
                          ENDP


                          AREA ||area_number.64||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEEmiERS1_, LINKORDER=||t._ZN13List_IteratorIN6Physic6Ball2DEEmiERS1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.64||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorIN6Physic6Ball2DEEmiERS1_||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorIN6Physic6Ball2DEEplEPS1_||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEEplEPS1_, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorIN6Physic6Ball2DEEplEPS1_ PROC ; List_Iterator<Physic::Ball2D>::operator +(Physic::Ball2D*)
;;;76     template <class T>
;;;77     bool List_Iterator<T>::operator + (T *item)
000000  f7ffbffe          B.W      _ZN13List_IteratorIN6Physic6Ball2DEEplERS1_ ; List_Iterator<Physic::Ball2D>::operator +(Physic::Ball2D&)
;;;78     {
;;;79     	return *this + *item;
;;;80     }
;;;81     
                          ENDP


                          AREA ||area_number.71||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEEplEPS1_, LINKORDER=||t._ZN13List_IteratorIN6Physic6Ball2DEEplEPS1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.71||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorIN6Physic6Ball2DEEplEPS1_||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorIN6Physic6Ball2DEEmiEPS1_||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEEmiEPS1_, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorIN6Physic6Ball2DEEmiEPS1_ PROC ; List_Iterator<Physic::Ball2D>::operator -(Physic::Ball2D*)
;;;121    template <class T>
;;;122    T *List_Iterator<T>::operator - (T *item)
000000  f7ffbffe          B.W      _ZN13List_IteratorIN6Physic6Ball2DEEmiERS1_ ; List_Iterator<Physic::Ball2D>::operator -(Physic::Ball2D&)
;;;123    {
;;;124    	return *this - *item;
;;;125    }
;;;126    /*
                          ENDP


                          AREA ||area_number.78||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEEmiEPS1_, LINKORDER=||t._ZN13List_IteratorIN6Physic6Ball2DEEmiEPS1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.78||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorIN6Physic6Ball2DEEmiEPS1_||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorIN6Physic6Ball2DEE3GetEj||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEE3GetEj, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorIN6Physic6Ball2DEE3GetEj PROC ; List_Iterator<Physic::Ball2D>::Get(unsigned)
;;;139    template <class T>
;;;140    T *List_Iterator<T>::Get (uint32_t index)
000000  6882              LDR      r2,[r0,#8]
;;;141    {
;;;142    	if (this->Elements < index) return (T *)0;
000002  428a              CMP      r2,r1
000004  d201              BCS      |L84.10|
000006  2000              MOVS     r0,#0
                  |L84.8|
;;;143    	
;;;144    	T *item = this->First;
;;;145    	while (index--)
;;;146    		  item = item->rlink;
;;;147    	return item;
;;;148    }
000008  4770              BX       lr
                  |L84.10|
00000a  6800              LDR      r0,[r0,#0]            ;144
00000c  1e49              SUBS     r1,r1,#1              ;145
00000e  d3fb              BCC      |L84.8|
                  |L84.16|
000010  6800              LDR      r0,[r0,#0]            ;146
000012  1e49              SUBS     r1,r1,#1              ;145
000014  d2fc              BCS      |L84.16|
000016  4770              BX       lr
;;;149    template <class T>
                          ENDP


                          AREA ||area_number.85||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEE3GetEj, LINKORDER=||t._ZN13List_IteratorIN6Physic6Ball2DEE3GetEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.85||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorIN6Physic6Ball2DEE3GetEj||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorIN6Physic6Ball2DEE8GetFirstEv||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEE8GetFirstEv, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorIN6Physic6Ball2DEE8GetFirstEv PROC ; List_Iterator<Physic::Ball2D>::GetFirst()
;;;155    template <class T>
;;;156    T *List_Iterator<T>::GetFirst ()
000000  6800              LDR      r0,[r0,#0]
;;;157    {
;;;158    	return this->First;
;;;159    }
000002  4770              BX       lr
;;;160    
                          ENDP


                          AREA ||area_number.92||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEE8GetFirstEv, LINKORDER=||t._ZN13List_IteratorIN6Physic6Ball2DEE8GetFirstEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.92||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorIN6Physic6Ball2DEE8GetFirstEv||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorIN6Physic6Ball2DEE7GetNextEPS1_||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEE7GetNextEPS1_, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorIN6Physic6Ball2DEE7GetNextEPS1_ PROC ; List_Iterator<Physic::Ball2D>::GetNext(Physic::Ball2D*)
;;;161    template <class T>
;;;162    T *List_Iterator<T>::GetNext (T *item)
000000  2900              CMP      r1,#0
;;;163    {
000002  d002              BEQ      |L98.10|
;;;164        if (item != (T *)0)
;;;165            if (item->rlink != (T *)0) return item->rlink;
000004  6808              LDR      r0,[r1,#0]
000006  2800              CMP      r0,#0
000008  d100              BNE      |L98.12|
                  |L98.10|
;;;166        return (T *)0;
00000a  2000              MOVS     r0,#0
                  |L98.12|
;;;167    }
00000c  4770              BX       lr
;;;168    
                          ENDP


                          AREA ||area_number.99||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEE7GetNextEPS1_, LINKORDER=||t._ZN13List_IteratorIN6Physic6Ball2DEE7GetNextEPS1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.99||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorIN6Physic6Ball2DEE7GetNextEPS1_||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorIN6Physic6Ball2DEE7ContainEv||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEE7ContainEv, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorIN6Physic6Ball2DEE7ContainEv PROC ; List_Iterator<Physic::Ball2D>::Contain()
;;;204    template <class T>
;;;205    uint32_t List_Iterator<T>::Contain ()
000000  6880              LDR      r0,[r0,#8]
;;;206    {
;;;207    	return this->Elements;
;;;208    }
000002  4770              BX       lr
;;;209    
                          ENDP


                          AREA ||area_number.106||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEE7ContainEv, LINKORDER=||t._ZN13List_IteratorIN6Physic6Ball2DEE7ContainEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.106||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorIN6Physic6Ball2DEE7ContainEv||
                          DCD      0x00000001

                          AREA ||t._ZN6lArrayIN6Physic6Ball2DEEixEj||, COMGROUP=_ZN6lArrayIN6Physic6Ball2DEEixEj, CODE, READONLY, ALIGN=1

                  _ZN6lArrayIN6Physic6Ball2DEEixEj PROC ; lArray<Physic::Ball2D>::operator [](unsigned)
;;;105    template <typename I>
;;;106    I *lArray<I>::operator [] (uint32_t i)
000000  6880              LDR      r0,[r0,#8]
;;;107    {
;;;108    	return this->larray[i];
000002  f8500021          LDR      r0,[r0,r1,LSL #2]
;;;109    }
000006  4770              BX       lr
;;;110    
                          ENDP


                          AREA ||area_number.113||, COMGROUP=_ZN6lArrayIN6Physic6Ball2DEEixEj, LINKORDER=||t._ZN6lArrayIN6Physic6Ball2DEEixEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.113||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6lArrayIN6Physic6Ball2DEEixEj||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorIN6Physic6Ball2DEE5ArrayI6lArrayIS1_EEERS2_RT_j||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEE5ArrayI6lArrayIS1_EEERS2_RT_j, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorIN6Physic6Ball2DEE5ArrayI6lArrayIS1_EEERS2_RT_j PROC ; List_Iterator<Physic::Ball2D>& List_Iterator<Physic::Ball2D>::Array<lArray<Physic::Ball2D>>(T1&, unsigned)
;;;24     		template <typename A>
;;;25     		  List_Iterator &Array (A &, uint32_t);
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
000006  1e54              SUBS     r4,r2,#1
000008  d309              BCC      |L119.30|
                  |L119.10|
00000a  4621              MOV      r1,r4
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       _ZN6lArrayIN6Physic6Ball2DEEixEj ; lArray<Physic::Ball2D>::operator [](unsigned)
000012  4601              MOV      r1,r0
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       _ZN13List_IteratorIN6Physic6Ball2DEEplEPS1_ ; List_Iterator<Physic::Ball2D>::operator +(Physic::Ball2D*)
00001a  1e64              SUBS     r4,r4,#1
00001c  d2f5              BCS      |L119.10|
                  |L119.30|
00001e  4630              MOV      r0,r6
000020  bd70              POP      {r4-r6,pc}
;;;26     		template <typename A>
;;;27     		  List_Iterator &Array (A *, uint32_t);
;;;28     		  /*
;;;29     	    bool operator << (T &);
;;;30     	    bool operator >> (T &);
;;;31     		  */
;;;32     	    T *Get (uint32_t index);
;;;33     	    T *GetLast ();
;;;34           T *GetFirst ();
;;;35           T *GetNext (T *);
;;;36     	    int32_t Put (T &, uint32_t index);
;;;37     	    T *Remove (uint32_t index);
;;;38     		  int32_t Remove (T *);
;;;39     		  int32_t Remove (T &);
;;;40     	    uint32_t Contain ();
;;;41     	  private:
;;;42     		  T *First, *Last;
;;;43     	    uint32_t Elements;
;;;44       };
;;;45     
;;;6      
;;;7      
;;;8      template <class T>
;;;9      List_Iterator<T>::List_Iterator()
;;;10     {
;;;11     }
;;;12     template <class T>
;;;13     bool List_Iterator<T>::operator + (T &item)
;;;14     {
;;;15     	this->Elements++;
;;;16     		T *i,*j;
;;;17     		if (!this->First) {
;;;18     			this->First = &item;
;;;19     			this->Last = &item;
;;;20     			item.rlink = (T *)0;
;;;21     			item.llink = (T *)0;
;;;22     			return true;
;;;23     		}
;;;24     		i = this->First;
;;;25     		j = (T *)0;
;;;26     		while (i != (T *)0) {
;;;27     			if (i->key > item.key) {
;;;28     				j = i;
;;;29     				i = i->rlink;
;;;30     				continue;
;;;31     			}
;;;32     			if (i->llink) {
;;;33     				i->llink->rlink = &item;
;;;34     				item.rlink = i;
;;;35     				item.llink = i->llink;
;;;36     				i->llink = &item;
;;;37     				return true;
;;;38     			}
;;;39     			item.rlink = i;
;;;40     			item.llink = (T *)0;
;;;41     			i->llink = &item;
;;;42     			this->First = &item;
;;;43     			return true;
;;;44     		}
;;;45     		j->rlink = &item;
;;;46     		item.rlink = (T *)0;
;;;47     		this->Last = &item;
;;;48     		item.llink = j;
;;;49     		return true;	
;;;50     }
;;;51     template <class T>
;;;52     T *List_Iterator<T>::operator - (T &item)
;;;53     {
;;;54     	if (this->Elements == 0)return (T *)0;
;;;55     	this->Elements--;
;;;56     	T *l = item.llink,*r = item.rlink;
;;;57     		if (!l&&!r) {
;;;58     			this->First = (T *)0;
;;;59     			this->Last = (T *)0;
;;;60     			return (T *)0;
;;;61     		}
;;;62     		if (!l) {
;;;63     			this->First = r;
;;;64     			r->llink = (T *)0;
;;;65     		}
;;;66     		else    l->rlink = r;
;;;67     		
;;;68     		if (!r) {
;;;69        			l->rlink = (T *)0;
;;;70     			  this->Last = l;
;;;71     		}
;;;72     		else    r->llink = l;
;;;73     		return &item;	
;;;74     }
;;;75     
;;;76     template <class T>
;;;77     bool List_Iterator<T>::operator + (T *item)
;;;78     {
;;;79     	return *this + *item;
;;;80     }
;;;81     
;;;82     template <class T>
;;;83     	template <typename A>
;;;84     List_Iterator<T> &List_Iterator<T>::operator + (A &array)
;;;85     {
;;;86     	uint32_t t = array.Contain();
;;;87     	while (t--) {
;;;88     		(*this) + array[t];
;;;89     	}
;;;90     	return *this;
;;;91     }
;;;92     
;;;93     template <class T>
;;;94     	template <typename A>
;;;95     List_Iterator<T> &List_Iterator<T>::operator + (A *array)
;;;96     {
;;;97     	A &a = *array;
;;;98     	return (*this) + a;
;;;99     }
;;;100    
;;;101    template <class T>
;;;102    	template <typename A>
;;;103    List_Iterator<T> &List_Iterator<T>::Array (A &array, uint32_t t)
;;;104    {
;;;105    	while (t--) {
;;;106    		(*this) + array[t];
;;;107    	}
;;;108    	return *this;
;;;109    }
;;;110    
                          ENDP


                          AREA ||area_number.120||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEE5ArrayI6lArrayIS1_EEERS2_RT_j, LINKORDER=||t._ZN13List_IteratorIN6Physic6Ball2DEE5ArrayI6lArrayIS1_EEERS2_RT_j||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.120||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorIN6Physic6Ball2DEE5ArrayI6lArrayIS1_EEERS2_RT_j||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorIN6Physic6Ball2DEE5ArrayI6lArrayIS1_EEERS2_PT_j||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEE5ArrayI6lArrayIS1_EEERS2_PT_j, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorIN6Physic6Ball2DEE5ArrayI6lArrayIS1_EEERS2_PT_j PROC ; List_Iterator<Physic::Ball2D>& List_Iterator<Physic::Ball2D>::Array<lArray<Physic::Ball2D>>(T1*, unsigned)
;;;26     		template <typename A>
;;;27     		  List_Iterator &Array (A *, uint32_t);
000000  f7ffbffe          B.W      _ZN13List_IteratorIN6Physic6Ball2DEE5ArrayI6lArrayIS1_EEERS2_RT_j ; List_Iterator<Physic::Ball2D>& List_Iterator<Physic::Ball2D>::Array<lArray<Physic::Ball2D>>(T1&, unsigned)
;;;28     		  /*
;;;29     	    bool operator << (T &);
;;;30     	    bool operator >> (T &);
;;;31     		  */
;;;32     	    T *Get (uint32_t index);
;;;33     	    T *GetLast ();
;;;34           T *GetFirst ();
;;;35           T *GetNext (T *);
;;;36     	    int32_t Put (T &, uint32_t index);
;;;37     	    T *Remove (uint32_t index);
;;;38     		  int32_t Remove (T *);
;;;39     		  int32_t Remove (T &);
;;;40     	    uint32_t Contain ();
;;;41     	  private:
;;;42     		  T *First, *Last;
;;;43     	    uint32_t Elements;
;;;44       };
;;;45     
;;;6      
;;;7      
;;;8      template <class T>
;;;9      List_Iterator<T>::List_Iterator()
;;;10     {
;;;11     }
;;;12     template <class T>
;;;13     bool List_Iterator<T>::operator + (T &item)
;;;14     {
;;;15     	this->Elements++;
;;;16     		T *i,*j;
;;;17     		if (!this->First) {
;;;18     			this->First = &item;
;;;19     			this->Last = &item;
;;;20     			item.rlink = (T *)0;
;;;21     			item.llink = (T *)0;
;;;22     			return true;
;;;23     		}
;;;24     		i = this->First;
;;;25     		j = (T *)0;
;;;26     		while (i != (T *)0) {
;;;27     			if (i->key > item.key) {
;;;28     				j = i;
;;;29     				i = i->rlink;
;;;30     				continue;
;;;31     			}
;;;32     			if (i->llink) {
;;;33     				i->llink->rlink = &item;
;;;34     				item.rlink = i;
;;;35     				item.llink = i->llink;
;;;36     				i->llink = &item;
;;;37     				return true;
;;;38     			}
;;;39     			item.rlink = i;
;;;40     			item.llink = (T *)0;
;;;41     			i->llink = &item;
;;;42     			this->First = &item;
;;;43     			return true;
;;;44     		}
;;;45     		j->rlink = &item;
;;;46     		item.rlink = (T *)0;
;;;47     		this->Last = &item;
;;;48     		item.llink = j;
;;;49     		return true;	
;;;50     }
;;;51     template <class T>
;;;52     T *List_Iterator<T>::operator - (T &item)
;;;53     {
;;;54     	if (this->Elements == 0)return (T *)0;
;;;55     	this->Elements--;
;;;56     	T *l = item.llink,*r = item.rlink;
;;;57     		if (!l&&!r) {
;;;58     			this->First = (T *)0;
;;;59     			this->Last = (T *)0;
;;;60     			return (T *)0;
;;;61     		}
;;;62     		if (!l) {
;;;63     			this->First = r;
;;;64     			r->llink = (T *)0;
;;;65     		}
;;;66     		else    l->rlink = r;
;;;67     		
;;;68     		if (!r) {
;;;69        			l->rlink = (T *)0;
;;;70     			  this->Last = l;
;;;71     		}
;;;72     		else    r->llink = l;
;;;73     		return &item;	
;;;74     }
;;;75     
;;;76     template <class T>
;;;77     bool List_Iterator<T>::operator + (T *item)
;;;78     {
;;;79     	return *this + *item;
;;;80     }
;;;81     
;;;82     template <class T>
;;;83     	template <typename A>
;;;84     List_Iterator<T> &List_Iterator<T>::operator + (A &array)
;;;85     {
;;;86     	uint32_t t = array.Contain();
;;;87     	while (t--) {
;;;88     		(*this) + array[t];
;;;89     	}
;;;90     	return *this;
;;;91     }
;;;92     
;;;93     template <class T>
;;;94     	template <typename A>
;;;95     List_Iterator<T> &List_Iterator<T>::operator + (A *array)
;;;96     {
;;;97     	A &a = *array;
;;;98     	return (*this) + a;
;;;99     }
;;;100    
;;;101    template <class T>
;;;102    	template <typename A>
;;;103    List_Iterator<T> &List_Iterator<T>::Array (A &array, uint32_t t)
;;;104    {
;;;105    	while (t--) {
;;;106    		(*this) + array[t];
;;;107    	}
;;;108    	return *this;
;;;109    }
;;;110    
;;;111    template <class T>
;;;112    	template <typename A>
;;;113    List_Iterator<T> &List_Iterator<T>::Array (A *array, uint32_t t)
;;;114    {
;;;115    	A &a = *array;
;;;116    	return this->Array(a, t);
;;;117    }
;;;118    
                          ENDP


                          AREA ||area_number.127||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEE5ArrayI6lArrayIS1_EEERS2_PT_j, LINKORDER=||t._ZN13List_IteratorIN6Physic6Ball2DEE5ArrayI6lArrayIS1_EEERS2_PT_j||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.127||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorIN6Physic6Ball2DEE5ArrayI6lArrayIS1_EEERS2_PT_j||
                          DCD      0x00000001

                          AREA ||t._ZN6lArrayIN6Physic6Ball2DEEclEj||, COMGROUP=_ZN6lArrayIN6Physic6Ball2DEEclEj, CODE, READONLY, ALIGN=1

                  _ZN6lArrayIN6Physic6Ball2DEEclEj PROC ; lArray<Physic::Ball2D>::operator ()(unsigned)
;;;57     template <typename I>
;;;58     void lArray<I>::operator () (uint32_t q)
000000  b570              PUSH     {r4-r6,lr}
;;;59     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;60     	this->larray = this->NewlArray(q);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN9AllocatorIN6Physic6Ball2DEE9NewlArrayEj ; Allocator<Physic::Ball2D>::NewlArray(unsigned)
00000e  60a0              STR      r0,[r4,#8]
;;;61     	
;;;62     	if (this->larray == (I **)0) {
000010  2800              CMP      r0,#0
000012  d002              BEQ      |L133.26|
;;;63     		return;
;;;64     	} else {}
;;;65     	this->Elements = q;
000014  6025              STR      r5,[r4,#0]
;;;66       this->P = 0;
000016  2000              MOVS     r0,#0
000018  6060              STR      r0,[r4,#4]
                  |L133.26|
;;;67     }
00001a  bd70              POP      {r4-r6,pc}
;;;68     
                          ENDP


                          AREA ||area_number.134||, COMGROUP=_ZN6lArrayIN6Physic6Ball2DEEclEj, LINKORDER=||t._ZN6lArrayIN6Physic6Ball2DEEclEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.134||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6lArrayIN6Physic6Ball2DEEclEj||
                          DCD      0x00000001

                          AREA ||t._ZN6lArrayIN6Physic6Ball2DEE3AddEPS1_j||, COMGROUP=_ZN6lArrayIN6Physic6Ball2DEE3AddEPS1_j, CODE, READONLY, ALIGN=1

                  _ZN6lArrayIN6Physic6Ball2DEE3AddEPS1_j PROC ; lArray<Physic::Ball2D>::Add(Physic::Ball2D*, unsigned)
;;;137    template <typename I>
;;;138    void lArray<I>::Add (I *item, uint32_t i)
000000  6803              LDR      r3,[r0,#0]
;;;139    {
;;;140    	if (i < this->Elements) {
000002  4293              CMP      r3,r2
000004  d902              BLS      |L140.12|
;;;141    	    this->larray[i] = item;
000006  6880              LDR      r0,[r0,#8]
000008  f8401022          STR      r1,[r0,r2,LSL #2]
                  |L140.12|
;;;142    	} else {}
;;;143    }
00000c  4770              BX       lr
;;;144    
                          ENDP


                          AREA ||area_number.141||, COMGROUP=_ZN6lArrayIN6Physic6Ball2DEE3AddEPS1_j, LINKORDER=||t._ZN6lArrayIN6Physic6Ball2DEE3AddEPS1_j||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.141||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6lArrayIN6Physic6Ball2DEE3AddEPS1_j||
                          DCD      0x00000001

                          AREA ||t._ZN6lArrayIN6Physic6Ball2DEED1Ev||, COMGROUP=_ZN6lArrayIN6Physic6Ball2DEED1Ev, CODE, READONLY, ALIGN=1

                  _ZN6lArrayIN6Physic6Ball2DEED2Ev                  ; Alternate entry point ; lArray<Physic::Ball2D>::~lArray__sub_object()
                  _ZN6lArrayIN6Physic6Ball2DEED1Ev PROC ; lArray<Physic::Ball2D>::~lArray()
;;;49     template <typename I>
;;;50     lArray<I>::~lArray () 
;;;51     {
;;;52       this->Delete(this->larray);
;;;53     	this->Delete(this);
;;;54     }
;;;55     
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  68a1              LDR      r1,[r4,#8]
000008  f7fffffe          BL       _ZN9AllocatorIN6Physic6Ball2DEE6DeleteIPS1_EEiPT_ ; int Allocator<Physic::Ball2D>::Delete<Physic::Ball2D*>(T1*)
00000c  4621              MOV      r1,r4
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       _ZN9AllocatorIN6Physic6Ball2DEE6DeleteI6lArrayIS1_EEEiPT_ ; int Allocator<Physic::Ball2D>::Delete<lArray<Physic::Ball2D>>(T1*)
000014  4620              MOV      r0,r4
000016  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||area_number.148||, COMGROUP=_ZN6lArrayIN6Physic6Ball2DEED1Ev, LINKORDER=||t._ZN6lArrayIN6Physic6Ball2DEED1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.148||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6lArrayIN6Physic6Ball2DEED1Ev||
                          DCD      0x00000001
