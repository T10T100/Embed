<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\tester.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\tester.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Sat Sep 19 16:22:13 2015
<BR><P>
<H3>Maximum Stack Usage =        204 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; SystemClock_Config() &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[221]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">HardFault_Handler</a><BR>
 <LI><a href="#[11]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">MemManage_Handler</a><BR>
 <LI><a href="#[12]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">BusFault_Handler</a><BR>
 <LI><a href="#[13]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">UsageFault_Handler</a><BR>
 <LI><a href="#[2a]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">ADC_IRQHandler</a><BR>
 <LI><a href="#[182]">Error_Handler()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[182]">Error_Handler()</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2a]">ADC_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[12]">BusFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[2c]">CAN1_RX0_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[2d]">CAN1_RX1_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[2e]">CAN1_SCE_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[2b]">CAN1_TX_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[58]">CAN2_RX0_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[59]">CAN2_RX1_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[5a]">CAN2_SCE_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[57]">CAN2_TX_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[67]">CRYP_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[66]">DCMI_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream0_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[24]">DMA1_Stream1_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[25]">DMA1_Stream2_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[26]">DMA1_Stream3_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[27]">DMA1_Stream4_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[28]">DMA1_Stream5_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[29]">DMA1_Stream6_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[47]">DMA1_Stream7_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream0_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream1_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream2_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream3_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[54]">DMA2_Stream4_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[5c]">DMA2_Stream5_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[5d]">DMA2_Stream6_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[5e]">DMA2_Stream7_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[15]">DebugMon_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[55]">ETH_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[56]">ETH_WKUP_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[1e]">EXTI0_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[40]">EXTI15_10_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[1f]">EXTI1_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[20]">EXTI2_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[21]">EXTI3_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[22]">EXTI4_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[2f]">EXTI9_5_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[1c]">FLASH_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[48]">FMC_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[69]">FPU_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[75]">HAL_SRAM_DMA_XferCpltCallback</a> from stm32f4xx_hal_sram.o(.text) referenced from stm32f4xx_hal_sram.o(.text)
 <LI><a href="#[76]">HAL_SRAM_DMA_XferErrorCallback</a> from stm32f4xx_hal_sram.o(.text) referenced from stm32f4xx_hal_sram.o(.text)
 <LI><a href="#[68]">HASH_RNG_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[10]">HardFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[38]">I2C1_ER_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[37]">I2C1_EV_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[3a]">I2C2_ER_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[39]">I2C2_EV_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[61]">I2C3_ER_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[60]">I2C3_EV_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[11]">MemManage_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[f]">NMI_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[5b]">OTG_FS_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[42]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[63]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[62]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[65]">OTG_HS_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[64]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[19]">PVD_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[16]">PendSV_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[1d]">RCC_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[41]">RTC_Alarm_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[1b]">RTC_WKUP_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[e]">Reset_Handler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[49]">SDIO_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[3b]">SPI1_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[3c]">SPI2_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[4b]">SPI3_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[14]">SVC_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[17]">SysTick_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[80]">SystemInit</a> from system_stm32f4xx.o(.text) referenced from startup_stm32f417xx.o(.text)
 <LI><a href="#[1a]">TAMP_STAMP_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[30]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[33]">TIM1_CC_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[32]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[31]">TIM1_UP_TIM10_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[34]">TIM2_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[35]">TIM3_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[36]">TIM4_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[4a]">TIM5_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[4e]">TIM6_DAC_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[4f]">TIM7_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[43]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[46]">TIM8_CC_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[45]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[44]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[7a]">TIMEx_DMACommutationCplt</a> from stm32f4xx_hal_tim_ex.o(.text) referenced 2 times from stm32f4xx_hal_tim.o(.text)
 <LI><a href="#[7c]">TIM_DMACaptureCplt</a> from stm32f4xx_hal_tim.o(.text) referenced 4 times from stm32f4xx_hal_tim.o(.text)
 <LI><a href="#[79]">TIM_DMADelayPulseCplt</a> from stm32f4xx_hal_tim.o(.text) referenced 5 times from stm32f4xx_hal_tim.o(.text)
 <LI><a href="#[78]">TIM_DMAError</a> from stm32f4xx_hal_tim.o(.text) referenced 8 times from stm32f4xx_hal_tim.o(.text)
 <LI><a href="#[4c]">UART4_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[4d]">UART5_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[3d]">USART1_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[3e]">USART2_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[3f]">USART3_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[5f]">USART6_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[13]">UsageFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[18]">WWDG_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[70]">SPI_DMAError(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(.text) referenced 2 times from stm32f4xx_hal_spi.o(.text)
 <LI><a href="#[6c]">SPI_2LinesRxISR(__SPI_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(.text) referenced from stm32f4xx_hal_spi.o(.text)
 <LI><a href="#[74]">SPI_DMAReceiveCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(.text) referenced from stm32f4xx_hal_spi.o(.text)
 <LI><a href="#[7b]">TIM_DMATriggerCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_tim.o(.text) referenced from stm32f4xx_hal_tim.o(.text)
 <LI><a href="#[6f]">SPI_DMATransmitCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(.text) referenced from stm32f4xx_hal_spi.o(.text)
 <LI><a href="#[73]">SPI_DMAHalfReceiveCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(.text) referenced from stm32f4xx_hal_spi.o(.text)
 <LI><a href="#[6e]">SPI_DMAHalfTransmitCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(.text) referenced from stm32f4xx_hal_spi.o(.text)
 <LI><a href="#[77]">TIM_DMAPeriodElapsedCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_tim.o(.text) referenced 2 times from stm32f4xx_hal_tim.o(.text)
 <LI><a href="#[72]">SPI_DMATransmitReceiveCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(.text) referenced from stm32f4xx_hal_spi.o(.text)
 <LI><a href="#[71]">SPI_DMAHalfTransmitReceiveCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(.text) referenced from stm32f4xx_hal_spi.o(.text)
 <LI><a href="#[6d]">SPI_RxISR(__SPI_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(.text) referenced from stm32f4xx_hal_spi.o(.text)
 <LI><a href="#[6b]">SPI_TxISR(__SPI_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(.text) referenced from stm32f4xx_hal_spi.o(.text)
 <LI><a href="#[83]">List_Order&lang;Physic::DustPart, float&rang;::List_Order()</a> from physic.o(t._ZN10List_OrderIN6Physic8DustPartEfEC1Ev) referenced from physic.o(t._ZN7storage3MapILi2EN6Physic8DustPartEfEC1Ev)
 <LI><a href="#[82]">List_Order&lang;Physic::DustPart, float&rang;::~List_Order()</a> from physic.o(t._ZN10List_OrderIN6Physic8DustPartEfED1Ev) referenced from physic.o(i._ZN7storage3MapILi2EN6Physic8DustPartEfED1Ev)
 <LI><a href="#[84]">LcdDriverDef::ExtInput(b2D, unsigned)</a> from device.o(.text) referenced from device.o(.constdata__ZTV12LcdDriverDef)
 <LI><a href="#[85]">LcdDriverDef::BcklApply(unsigned char)</a> from device.o(.text) referenced from device.o(.constdata__ZTV12LcdDriverDef)
 <LI><a href="#[7d]">ScreenManager::~ScreenManager()</a> from device.o(i._ZN13ScreenManagerD1Ev) referenced from device.o(.text)
 <LI><a href="#[86]">Physic::Ball2DGroup::Draw(f2P, float, unsigned)</a> from main.o(.text) referenced from main.o(.constdata__ZTVN6Physic11Ball2DGroupE)
 <LI><a href="#[6a]">Physic::StarDust::~StarDust()</a> from physic.o(.text) referenced from main.o(.text)
 <LI><a href="#[7e]">storage::Map&lang;(int)2, Physic::DustPart, float&rang;::Map()</a> from physic.o(t._ZN7storage3MapILi2EN6Physic8DustPartEfEC1Ev) referenced from physic.o(.text)
 <LI><a href="#[7f]">storage::Map&lang;(int)2, Physic::DustPart, float&rang;::~Map()</a> from physic.o(i._ZN7storage3MapILi2EN6Physic8DustPartEfED1Ev) referenced from physic.o(.text)
 <LI><a href="#[89]">__main</a> from __main.o(!!!main) referenced from startup_stm32f417xx.o(.text)
 <LI><a href="#[88]">__sti___10_device_cpp_c6d18d2d</a> from device.o(.text) referenced from device.o(.init_array)
 <LI><a href="#[87]">__sti___8_main_cpp_c</a> from main.o(.text) referenced from main.o(.init_array)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[89]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8b]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[8d]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[25e]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[25f]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[8e]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[260]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[9b]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[8f]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[91]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[261]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[262]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[93]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[263]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[264]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[265]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[266]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[267]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[95]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[268]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[269]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[26a]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[26b]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[26c]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[26d]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[26e]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[26f]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[270]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[271]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[272]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[273]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[274]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[a0]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[96]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_1 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[275]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[276]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[277]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[278]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[279]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[27a]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[8c]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[27b]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[98]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[9a]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[27c]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[9c]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; SystemClock_Config() &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[27d]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[222]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[9f]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[27e]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[a1]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1fe]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::StarDust::SetUp(Physic::DustPart*, const tImage&, unsigned)
</UL>

<P><STRONG><a name="[27f]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[9d]"></a>main</STRONG> (Thumb, 416 bytes, Stack size 64 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = main &rArr; SystemClock_Config() &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::MakeTexture(b2D)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::StarDust::SetUp(Physic::DustPart*, const tImage&, unsigned)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2DGroup::operator ()(b2D, float, float)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2DGroup::Step()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2DGroup::Draw()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2DGroup::Add(unsigned)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::operator ()(void*, unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenManager::operator ()()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenManager::Create(b2D, Frame2D&lang;short&rang;*)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::Backlight(unsigned char)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::Init(unsigned)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::Fill(Frame2D&lang;short&rang;&, b2D)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HsramInit()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmaInit()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockEnable()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frame2DManager&lang;short&rang;::operator ()()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frame2DManager&lang;short&rang;::Create(b2D)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_Class&lang;Screen&rang;::SetScale(float, float)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int Bitmap_Class&lang;Screen&rang;::Tile&lang;tTexture&rang;(b2D, T1*, unsigned short)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int Bitmap_Class&lang;Screen&rang;::Fill&lang;tTexture&rang;(T1*, unsigned short)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_Class&lang;Screen&rang;::NewBitmapClose()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_Class&lang;Screen&rang;::NewBitmapOpen(tTexture&)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Class&lang;Screen&rang;::UseFont(const tFont*)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_Class&lang;Screen&rang;::Fill(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[86]"></a>Physic::Ball2DGroup::Draw(f2P, float, unsigned)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Physic::Ball2DGroup::Draw(f2P, float, unsigned) &rArr; Circle_Class&lang;Screen&rang;::Draw(short, short, float, unsigned short) &rArr; Circle_Class&lang;Screen&rang;::Draw(b2D, float, unsigned short) &rArr; Circle_Class&lang;Screen&rang;::Point(int, int, int, int, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Class&lang;Screen&rang;::Draw(short, short, float, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN6Physic11Ball2DGroupE)
</UL>
<P><STRONG><a name="[c0]"></a>Physic::StarDust::ReadPixel(float, float)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Pixel(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::StarDust::TestAround(Physic::DustPart&)
</UL>

<P><STRONG><a name="[c2]"></a>Physic::StarDust::ReadAround(float, float)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::PixelsAround(short, short)
</UL>

<P><STRONG><a name="[c4]"></a>Physic::StarDust::Draw(float, float, unsigned)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Pixel(short, short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::StarDust::Draw()
</UL>

<P><STRONG><a name="[d0]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[cb]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a3]"></a>HAL_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>HAL_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DeInit
</UL>

<P><STRONG><a name="[d1]"></a>HAL_DeInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspDeInit
</UL>

<P><STRONG><a name="[1d0]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d3]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_GetECC
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_PollForTransfer
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[a4]"></a>HAL_Delay</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::Init(unsigned)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::RstHw()
</UL>

<P><STRONG><a name="[280]"></a>HAL_SuspendTick</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[281]"></a>HAL_ResumeTick</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[282]"></a>HAL_GetHalVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>HAL_GetREVID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[283]"></a>HAL_GetDEVID</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[284]"></a>HAL_DBGMCU_EnableDBGSleepMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[285]"></a>HAL_DBGMCU_DisableDBGSleepMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[286]"></a>HAL_DBGMCU_EnableDBGStopMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[287]"></a>HAL_DBGMCU_DisableDBGStopMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[288]"></a>HAL_DBGMCU_EnableDBGStandbyMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[289]"></a>HAL_DBGMCU_DisableDBGStandbyMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[28a]"></a>HAL_EnableCompensationCell</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[28b]"></a>HAL_DisableCompensationCell</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[ce]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, stm32f4xx_hal_cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimInit()
</UL>

<P><STRONG><a name="[188]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimInit()
</UL>

<P><STRONG><a name="[28c]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[28e]"></a>HAL_NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>HAL_NVIC_GetPriority</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[290]"></a>HAL_NVIC_SetPendingIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[291]"></a>HAL_NVIC_GetPendingIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[292]"></a>HAL_NVIC_ClearPendingIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[293]"></a>HAL_NVIC_GetActive</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[294]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>

<P><STRONG><a name="[185]"></a>HAL_DMA_Init</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmaInit()
</UL>

<P><STRONG><a name="[295]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 2880 bytes, Stack size 36 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start
</UL>

<P><STRONG><a name="[d6]"></a>HAL_DMA_Start</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[d8]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start_DMA
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Start_DMA
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Start_DMA
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_DMABurst_ReadStart
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_DMABurst_WriteStart
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start_DMA
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_DMA
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start_DMA
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_DMA
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_DMA
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Write_DMA
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Read_DMA
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
</UL>

<P><STRONG><a name="[d9]"></a>HAL_DMA_Abort</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_DMABurst_ReadStop
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_DMABurst_WriteStop
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DMAStop
</UL>

<P><STRONG><a name="[da]"></a>HAL_DMA_PollForTransfer</STRONG> (Thumb, 7652 bytes, Stack size 56 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[296]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 7040 bytes, Stack size 40 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[297]"></a>HAL_DMA_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[298]"></a>HAL_DMA_GetError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>HAL_GPIO_Init</STRONG> (Thumb, 506 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_MCOConfig
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_AltGpio_Init(GPIO_TypeDef*, int, unsigned, unsigned)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_Gpio_Init(GPIO_TypeDef*, int, unsigned, unsigned)
</UL>

<P><STRONG><a name="[299]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 328 bytes, Stack size 36 bytes, stm32f4xx_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[29a]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[29b]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[29c]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[29d]"></a>HAL_GPIO_LockPin</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, stm32f4xx_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[db]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[de]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[dd]"></a>HAL_SPI_Init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit()
</UL>

<P><STRONG><a name="[e0]"></a>HAL_SPI_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
</UL>

<P><STRONG><a name="[df]"></a>HAL_SPI_DeInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
</UL>

<P><STRONG><a name="[e2]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>

<P><STRONG><a name="[e3]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 760 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[e4]"></a>HAL_SPI_Receive</STRONG> (Thumb, 522 bytes, Stack size 32 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>

<P><STRONG><a name="[e6]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt(__DMA_HandleTypeDef*)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt(__DMA_HandleTypeDef*)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt(__DMA_HandleTypeDef*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAError(__DMA_HandleTypeDef*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxCloseIRQHandler(__SPI_HandleTypeDef*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxCloseIRQHandler(__SPI_HandleTypeDef*)
</UL>

<P><STRONG><a name="[e7]"></a>HAL_SPI_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt(__DMA_HandleTypeDef*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxCloseIRQHandler(__SPI_HandleTypeDef*)
</UL>

<P><STRONG><a name="[e8]"></a>HAL_SPI_TxRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt(__DMA_HandleTypeDef*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxCloseIRQHandler(__SPI_HandleTypeDef*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxCloseIRQHandler(__SPI_HandleTypeDef*)
</UL>

<P><STRONG><a name="[29e]"></a>HAL_SPI_Transmit_IT</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>HAL_SPI_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt(__DMA_HandleTypeDef*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxCloseIRQHandler(__SPI_HandleTypeDef*)
</UL>

<P><STRONG><a name="[ec]"></a>HAL_SPI_TransmitReceive_IT</STRONG> (Thumb, 186 bytes, Stack size 4 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_IT
</UL>

<P><STRONG><a name="[eb]"></a>HAL_SPI_Receive_IT</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_IT
</UL>

<P><STRONG><a name="[ed]"></a>HAL_SPI_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfTransmitCplt(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[ee]"></a>HAL_SPI_Transmit_DMA</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[f0]"></a>HAL_SPI_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfReceiveCplt(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[f1]"></a>HAL_SPI_TxRxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfTransmitReceiveCplt(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[f2]"></a>HAL_SPI_TransmitReceive_DMA</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
</UL>

<P><STRONG><a name="[f3]"></a>HAL_SPI_Receive_DMA</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[29f]"></a>HAL_SPI_DMAPause</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[2a0]"></a>HAL_SPI_DMAResume</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>HAL_SPI_DMAStop</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[f5]"></a>HAL_SPI_IRQHandler</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>

<P><STRONG><a name="[2a1]"></a>HAL_SPI_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[2a2]"></a>HAL_SPI_GetError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>HAL_SRAM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sram.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[f6]"></a>HAL_SRAM_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_hal_sram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_SRAM_Init &rArr; FSMC_NORSRAM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_MspInit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Timing_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HsramInit()
</UL>

<P><STRONG><a name="[fc]"></a>HAL_SRAM_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sram.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_DeInit
</UL>

<P><STRONG><a name="[fb]"></a>HAL_SRAM_DeInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_sram.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_MspDeInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_DeInit
</UL>

<P><STRONG><a name="[75]"></a>HAL_SRAM_DMA_XferCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sram.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sram.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>HAL_SRAM_DMA_XferErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sram.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sram.o(.text)
</UL>
<P><STRONG><a name="[2a3]"></a>HAL_SRAM_Read_8b</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, stm32f4xx_hal_sram.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>HAL_SRAM_Write_8b</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, stm32f4xx_hal_sram.o(.text), UNUSED)

<P><STRONG><a name="[2a5]"></a>HAL_SRAM_Read_16b</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, stm32f4xx_hal_sram.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>HAL_SRAM_Write_16b</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, stm32f4xx_hal_sram.o(.text), UNUSED)

<P><STRONG><a name="[2a7]"></a>HAL_SRAM_Read_32b</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, stm32f4xx_hal_sram.o(.text), UNUSED)

<P><STRONG><a name="[2a8]"></a>HAL_SRAM_Write_32b</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, stm32f4xx_hal_sram.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>HAL_SRAM_Read_DMA</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_hal_sram.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[ff]"></a>HAL_SRAM_Write_DMA</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_hal_sram.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[100]"></a>HAL_SRAM_WriteOperation_Enable</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f4xx_hal_sram.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_WriteOperation_Enable
</UL>

<P><STRONG><a name="[102]"></a>HAL_SRAM_WriteOperation_Disable</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_hal_sram.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_WriteOperation_Disable
</UL>

<P><STRONG><a name="[2a9]"></a>HAL_SRAM_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_sram.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[105]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[104]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimInit()
</UL>

<P><STRONG><a name="[108]"></a>HAL_TIM_Base_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_DeInit
</UL>

<P><STRONG><a name="[107]"></a>HAL_TIM_Base_DeInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspDeInit
</UL>

<P><STRONG><a name="[2aa]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ab]"></a>HAL_TIM_Base_Stop</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimInit()
</UL>

<P><STRONG><a name="[2ac]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>HAL_TIM_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMAError
</UL>

<P><STRONG><a name="[78]"></a>TIM_DMAError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ErrorCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_tim.o(.text)
<LI> stm32f4xx_hal_tim_ex.o(.text)
</UL>
<P><STRONG><a name="[10a]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMAPeriodElapsedCplt(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[10b]"></a>HAL_TIM_Base_Start_DMA</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[2ad]"></a>HAL_TIM_Base_Stop_DMA</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>HAL_TIM_OC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[10c]"></a>HAL_TIM_OC_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>

<P><STRONG><a name="[10f]"></a>HAL_TIM_OC_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DeInit
</UL>

<P><STRONG><a name="[10e]"></a>HAL_TIM_OC_DeInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspDeInit
</UL>

<P><STRONG><a name="[111]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Stop_DMA
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Start_DMA
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Stop_IT
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Start_IT
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Stop
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Start
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Stop_DMA
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start_DMA
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Stop_IT
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start_IT
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Stop
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Stop_IT
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Start_IT
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Stop
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Start
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Stop_DMA
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_DMA
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Stop_IT
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Stop
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop_DMA
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start_DMA
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop_IT
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start_IT
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop_DMA
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_DMA
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop_IT
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_IT
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
</UL>

<P><STRONG><a name="[110]"></a>HAL_TIM_OC_Start</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[112]"></a>HAL_TIM_OC_Stop</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[113]"></a>HAL_TIM_OC_Start_IT</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[114]"></a>HAL_TIM_OC_Stop_IT</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[115]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMADelayPulseCplt
</UL>

<P><STRONG><a name="[79]"></a>TIM_DMADelayPulseCplt</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DMADelayPulseCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_tim.o(.text)
<LI> stm32f4xx_hal_tim_ex.o(.text)
</UL>
<P><STRONG><a name="[116]"></a>HAL_TIM_OC_Start_DMA</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[117]"></a>HAL_TIM_OC_Stop_DMA</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[119]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[118]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>

<P><STRONG><a name="[11b]"></a>HAL_TIM_PWM_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_DeInit
</UL>

<P><STRONG><a name="[11a]"></a>HAL_TIM_PWM_DeInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspDeInit
</UL>

<P><STRONG><a name="[11c]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[11d]"></a>HAL_TIM_PWM_Stop</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[11e]"></a>HAL_TIM_PWM_Start_IT</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[11f]"></a>HAL_TIM_PWM_Stop_IT</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[120]"></a>HAL_TIM_PWM_Start_DMA</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[121]"></a>HAL_TIM_PWM_Stop_DMA</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[123]"></a>HAL_TIM_IC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
</UL>

<P><STRONG><a name="[122]"></a>HAL_TIM_IC_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>

<P><STRONG><a name="[125]"></a>HAL_TIM_IC_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_DeInit
</UL>

<P><STRONG><a name="[124]"></a>HAL_TIM_IC_DeInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspDeInit
</UL>

<P><STRONG><a name="[126]"></a>HAL_TIM_IC_Start</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[127]"></a>HAL_TIM_IC_Stop</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[128]"></a>HAL_TIM_IC_Start_IT</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[129]"></a>HAL_TIM_IC_Stop_IT</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[12a]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMACaptureCplt
</UL>

<P><STRONG><a name="[7c]"></a>TIM_DMACaptureCplt</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DMACaptureCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_tim.o(.text)
<LI> stm32f4xx_hal_tim_ex.o(.text)
</UL>
<P><STRONG><a name="[12b]"></a>HAL_TIM_IC_Start_DMA</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[12c]"></a>HAL_TIM_IC_Stop_DMA</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[12e]"></a>HAL_TIM_OnePulse_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Init
</UL>

<P><STRONG><a name="[12d]"></a>HAL_TIM_OnePulse_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_MspInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>

<P><STRONG><a name="[130]"></a>HAL_TIM_OnePulse_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_DeInit
</UL>

<P><STRONG><a name="[12f]"></a>HAL_TIM_OnePulse_DeInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_MspDeInit
</UL>

<P><STRONG><a name="[131]"></a>HAL_TIM_OnePulse_Start</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[132]"></a>HAL_TIM_OnePulse_Stop</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[133]"></a>HAL_TIM_OnePulse_Start_IT</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[134]"></a>HAL_TIM_OnePulse_Stop_IT</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[136]"></a>HAL_TIM_Encoder_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
</UL>

<P><STRONG><a name="[135]"></a>HAL_TIM_Encoder_Init</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>

<P><STRONG><a name="[138]"></a>HAL_TIM_Encoder_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_DeInit
</UL>

<P><STRONG><a name="[137]"></a>HAL_TIM_Encoder_DeInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspDeInit
</UL>

<P><STRONG><a name="[139]"></a>HAL_TIM_Encoder_Start</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[13a]"></a>HAL_TIM_Encoder_Stop</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[13b]"></a>HAL_TIM_Encoder_Start_IT</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[13c]"></a>HAL_TIM_Encoder_Stop_IT</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[13d]"></a>HAL_TIM_Encoder_Start_DMA</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[13e]"></a>HAL_TIM_Encoder_Stop_DMA</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[142]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMATriggerCplt(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[140]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[13f]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[146]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 108 bytes, Stack size 4 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_ConfigChannel
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[144]"></a>HAL_TIM_OC_ConfigChannel</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
</UL>

<P><STRONG><a name="[14b]"></a>TIM_TI1_SetConfig</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_ConfigChannel
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[149]"></a>HAL_TIM_IC_ConfigChannel</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_SetConfig(TIM_TypeDef*, unsigned, unsigned, unsigned)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI3_SetConfig(TIM_TypeDef*, unsigned, unsigned, unsigned)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI4_SetConfig(TIM_TypeDef*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[14e]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
</UL>

<P><STRONG><a name="[14f]"></a>HAL_TIM_OnePulse_ConfigChannel</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_SetConfig(TIM_TypeDef*, unsigned, unsigned, unsigned)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
</UL>

<P><STRONG><a name="[150]"></a>HAL_TIM_DMABurst_WriteStart</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[151]"></a>HAL_TIM_DMABurst_WriteStop</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[152]"></a>HAL_TIM_DMABurst_ReadStart</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[153]"></a>HAL_TIM_DMABurst_ReadStop</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[2ae]"></a>HAL_TIM_GenerateEvent</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>HAL_TIM_ConfigOCrefClear</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig(TIM_TypeDef*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[156]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig(TIM_TypeDef*, unsigned short)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig(TIM_TypeDef*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[2af]"></a>HAL_TIM_ConfigTI1Input</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>HAL_TIM_SlaveConfigSynchronization</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef*, TIM_SlaveConfigTypeDef*)
</UL>

<P><STRONG><a name="[15c]"></a>HAL_TIM_SlaveConfigSynchronization_IT</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef*, TIM_SlaveConfigTypeDef*)
</UL>

<P><STRONG><a name="[2b0]"></a>HAL_TIM_ReadCapturedValue</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b1]"></a>HAL_TIM_Base_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b2]"></a>HAL_TIM_OC_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b3]"></a>HAL_TIM_PWM_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b4]"></a>HAL_TIM_IC_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b5]"></a>HAL_TIM_OnePulse_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b6]"></a>HAL_TIM_Encoder_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>HAL_TIMEx_HallSensor_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Init
</UL>

<P><STRONG><a name="[15d]"></a>HAL_TIMEx_HallSensor_Init</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_MspInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>

<P><STRONG><a name="[160]"></a>HAL_TIMEx_HallSensor_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_DeInit
</UL>

<P><STRONG><a name="[15f]"></a>HAL_TIMEx_HallSensor_DeInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_MspDeInit
</UL>

<P><STRONG><a name="[161]"></a>HAL_TIMEx_HallSensor_Start</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[162]"></a>HAL_TIMEx_HallSensor_Stop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[163]"></a>HAL_TIMEx_HallSensor_Start_IT</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[164]"></a>HAL_TIMEx_HallSensor_Stop_IT</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[165]"></a>HAL_TIMEx_HallSensor_Start_DMA</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[166]"></a>HAL_TIMEx_HallSensor_Stop_DMA</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[167]"></a>HAL_TIMEx_OCN_Start</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[169]"></a>HAL_TIMEx_OCN_Stop</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[16a]"></a>HAL_TIMEx_OCN_Start_IT</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[16b]"></a>HAL_TIMEx_OCN_Stop_IT</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[16c]"></a>HAL_TIMEx_OCN_Start_DMA</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[16d]"></a>HAL_TIMEx_OCN_Stop_DMA</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[16e]"></a>HAL_TIMEx_PWMN_Start</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[16f]"></a>HAL_TIMEx_PWMN_Stop</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[170]"></a>HAL_TIMEx_PWMN_Start_IT</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[171]"></a>HAL_TIMEx_PWMN_Stop_IT</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[172]"></a>HAL_TIMEx_PWMN_Start_DMA</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[173]"></a>HAL_TIMEx_PWMN_Stop_DMA</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[174]"></a>HAL_TIMEx_OnePulseN_Start</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[175]"></a>HAL_TIMEx_OnePulseN_Stop</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[176]"></a>HAL_TIMEx_OnePulseN_Start_IT</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[177]"></a>HAL_TIMEx_OnePulseN_Stop_IT</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[2b7]"></a>HAL_TIMEx_ConfigCommutationEvent</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[2b8]"></a>HAL_TIMEx_ConfigCommutationEvent_IT</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEx_DMACommutationCplt
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[7a]"></a>TIMEx_DMACommutationCplt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMEx_DMACommutationCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_tim.o(.text)
<LI> stm32f4xx_hal_tim_ex.o(.text)
</UL>
<P><STRONG><a name="[2b9]"></a>HAL_TIMEx_ConfigCommutationEvent_DMA</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[2ba]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 110 bytes, Stack size 4 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[2bb]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[2bc]"></a>HAL_TIMEx_RemapConfig</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2bd]"></a>HAL_TIMEx_HallSensor_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>FSMC_NORSRAM_Init</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, stm32f4xx_ll_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FSMC_NORSRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[fd]"></a>FSMC_NORSRAM_DeInit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f4xx_ll_fsmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_DeInit
</UL>

<P><STRONG><a name="[f9]"></a>FSMC_NORSRAM_Timing_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f4xx_ll_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FSMC_NORSRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[fa]"></a>FSMC_NORSRAM_Extended_Timing_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_ll_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[101]"></a>FSMC_NORSRAM_WriteOperation_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_ll_fsmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_WriteOperation_Enable
</UL>

<P><STRONG><a name="[103]"></a>FSMC_NORSRAM_WriteOperation_Disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_ll_fsmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_WriteOperation_Disable
</UL>

<P><STRONG><a name="[2be]"></a>FSMC_NAND_Init</STRONG> (Thumb, 82 bytes, Stack size 4 bytes, stm32f4xx_ll_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[2bf]"></a>FSMC_NAND_CommonSpace_Timing_Init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_ll_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[2c0]"></a>FSMC_NAND_AttributeSpace_Timing_Init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_ll_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[2c1]"></a>FSMC_NAND_DeInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f4xx_ll_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[2c2]"></a>FSMC_NAND_ECC_Enable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_ll_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[2c3]"></a>FSMC_NAND_ECC_Disable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_ll_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>FSMC_NAND_GetECC</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, stm32f4xx_ll_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[2c4]"></a>FSMC_PCCARD_Init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_ll_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[2c5]"></a>FSMC_PCCARD_CommonSpace_Timing_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_ll_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[2c6]"></a>FSMC_PCCARD_AttributeSpace_Timing_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_ll_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[2c7]"></a>FSMC_PCCARD_IOSpace_Timing_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_ll_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[2c8]"></a>FSMC_PCCARD_DeInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_ll_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[2c9]"></a>HAL_RCC_DeInit</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1086 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[17a]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 628 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[17b]"></a>HAL_RCC_MCOConfig</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>

<P><STRONG><a name="[2ca]"></a>HAL_RCC_EnableCSS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2cb]"></a>HAL_RCC_DisableCSS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 126 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[cc]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[17e]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[17f]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[2cc]"></a>HAL_RCC_GetOscConfig</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2cd]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>HAL_RCC_CSSCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_NMI_IRQHandler
</UL>

<P><STRONG><a name="[180]"></a>HAL_RCC_NMI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_CSSCallback
</UL>

<P><STRONG><a name="[182]"></a>Error_Handler()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HsramInit()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmaInit()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimInit()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler()
</UL>

<P><STRONG><a name="[a6]"></a>ClockEnable()</STRONG> (Thumb, 274 bytes, Stack size 4 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ClockEnable()
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>SystemClock_Config()</STRONG> (Thumb, 140 bytes, Stack size 88 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SystemClock_Config() &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>HsramInit()</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HsramInit() &rArr; HAL_SRAM_Init &rArr; FSMC_NORSRAM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ce]"></a>DacInit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2cf]"></a>AdcInit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2d0]"></a>AdcReinit(ADC_HandleTypeDef&, unsigned, unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>SpiInit()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler()
</UL>

<P><STRONG><a name="[a8]"></a>DmaInit()</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DmaInit() &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[186]"></a>TimInit()</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler()
</UL>

<P><STRONG><a name="[a9]"></a>GpioInit()</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GpioInit() &rArr; DEV_AltGpio_Init(GPIO_TypeDef*, int, unsigned, unsigned) &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_AltGpio_Init(GPIO_TypeDef*, int, unsigned, unsigned)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_Gpio_Init(GPIO_TypeDef*, int, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18b]"></a>Screen::Screen()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Locker::Locker()
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Affine_Body::Affine_Body()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle_Class&lang;Screen&rang;::Rectangle_Class()
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Class&lang;Screen&rang;::Circle_Class()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_Class&lang;Screen&rang;::Bitmap_Class()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Class&lang;Screen&rang;::Print_Class()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Class&lang;Screen&rang;::Line_Class()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_Class&lang;Screen&rang;::Fill_Class()
</UL>

<P><STRONG><a name="[2d1]"></a>Screen::Screen__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>Screen::operator ()(b2D, Frame2D&lang;short&rang;&)</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Screen::operator ()(b2D, Frame2D&lang;short&rang;&) &rArr; Print_Class&lang;Screen&rang;::Init() &rArr; Coordinates::GetRect()
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_Class&lang;Screen&rang;::SetScale(float, float)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinates::Dispose(b2D)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frame2D&lang;short&rang;::GetBuff()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frame2D&lang;short&rang;::GetH()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle_Class&lang;Screen&rang;::Init()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Class&lang;Screen&rang;::Init()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_Obj&lang;Screen&rang;::operator ()(Screen&)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Class&lang;Screen&rang;::Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenManager::Create(b2D, Frame2D&lang;short&rang;*)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_Class&lang;Screen&rang;::NewBitmapClose()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_Class&lang;Screen&rang;::NewBitmapOpen(tTexture&)
</UL>

<P><STRONG><a name="[19c]"></a>Screen::Refresh()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_Class&lang;Screen&rang;::Fill(unsigned short)
</UL>

<P><STRONG><a name="[19d]"></a>Screen::MakeTexture(short, short)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Screen::MakeTexture(short, short) &rArr; T1* Allocator&lang;Screen&rang;::New&lang;tTexture&rang;(unsigned) &rArr; Alloc(unsigned) &rArr; MemoryAllocator::New(unsigned) &rArr; List_Iterator&lang;MemoryChunk&rang;::Remove(MemoryChunk*)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* Allocator&lang;Screen&rang;::New&lang;tTexture&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::MakeTexture(b2D)
</UL>

<P><STRONG><a name="[b2]"></a>Screen::MakeTexture(b2D)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Screen::MakeTexture(b2D) &rArr; Screen::MakeTexture(short, short) &rArr; T1* Allocator&lang;Screen&rang;::New&lang;tTexture&rang;(unsigned) &rArr; Alloc(unsigned) &rArr; MemoryAllocator::New(unsigned) &rArr; List_Iterator&lang;MemoryChunk&rang;::Remove(MemoryChunk*)
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::MakeTexture(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19f]"></a>Screen::KillTexture(tTexture*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int Allocator&lang;Screen&rang;::Delete&lang;tTexture&rang;(T1*)
</UL>

<P><STRONG><a name="[c5]"></a>Screen::Pixel(short, short, unsigned short)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, screen.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::StarDust::Draw(float, float, unsigned)
</UL>

<P><STRONG><a name="[c1]"></a>Screen::Pixel(short, short)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, screen.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::StarDust::ReadPixel(float, float)
</UL>

<P><STRONG><a name="[c3]"></a>Screen::PixelsAround(short, short)</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, screen.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::StarDust::ReadAround(float, float)
</UL>

<P><STRONG><a name="[241]"></a>Screen::GetFrame()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_Class&lang;Screen&rang;::NewBitmapOpen(tTexture&)
</UL>

<P><STRONG><a name="[1a1]"></a>ScreenManager::ScreenManager()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ScreenManager::ScreenManager()
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Locker::Locker()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Order&lang;Screen, unsigned char&rang;::List_Order()
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_device_cpp_c6d18d2d
</UL>

<P><STRONG><a name="[2d2]"></a>ScreenManager::ScreenManager__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>ScreenManager::operator ()()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Locker::Unlock(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>ScreenManager::Create(b2D, Frame2D&lang;short&rang;*)</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ScreenManager::Create(b2D, Frame2D&lang;short&rang;*) &rArr; Screen::operator ()(b2D, Frame2D&lang;short&rang;&) &rArr; Print_Class&lang;Screen&rang;::Init() &rArr; Coordinates::GetRect()
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::operator ()(b2D, Frame2D&lang;short&rang;&)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Allocator&lang;Screen&rang;::New()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Order&lang;Screen, unsigned char&rang;::operator +(Screen*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d3]"></a>ScreenManager::Kill(Screen*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, screen.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>ScreenManager::Refresh(unsigned)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Locker::Test()
</UL>

<P><STRONG><a name="[1cc]"></a>__TTY::__TTY()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, terminal_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_device_cpp_c6d18d2d
</UL>

<P><STRONG><a name="[2d4]"></a>__TTY::__TTY__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, terminal_interface.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>__TTY::operator ()(void*, unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, terminal_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::operator ()(void*, unsigned)
</UL>

<P><STRONG><a name="[1ad]"></a>__TTY::Print(int, char*, unsigned)</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, terminal_interface.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TTY::operator &lang;&lang;(int)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::PrintTable()
</UL>

<P><STRONG><a name="[1b3]"></a>__TTY::Print(char*, unsigned)</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, terminal_interface.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TTY::operator +(int)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::PrintTable()
</UL>

<P><STRONG><a name="[1a9]"></a>__TTY::Print(int, char*)</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, terminal_interface.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TTY::operator &lang;&lang;(char*)
</UL>

<P><STRONG><a name="[1b1]"></a>__TTY::Print(char*)</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, terminal_interface.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TTY::operator +(char*)
</UL>

<P><STRONG><a name="[1af]"></a>__TTY::Char(int, char)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, terminal_interface.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TTY::operator &lang;&lang;(char)
</UL>

<P><STRONG><a name="[1b5]"></a>__TTY::Char(char)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, terminal_interface.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TTY::operator +(char)
</UL>

<P><STRONG><a name="[1a8]"></a>__TTY::operator &lang;&lang;(char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, terminal_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TTY::Print(int, char*)
</UL>

<P><STRONG><a name="[1aa]"></a>__TTY::operator &lang;&lang;(int)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, terminal_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STR::itoa(int, char*, unsigned)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TTY::Print(int, char*, unsigned)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[1ae]"></a>__TTY::operator &lang;&lang;(char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, terminal_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TTY::Char(int, char)
</UL>

<P><STRONG><a name="[1b0]"></a>__TTY::operator +(char*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, terminal_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TTY::Print(char*)
</UL>

<P><STRONG><a name="[1b2]"></a>__TTY::operator +(int)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, terminal_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STR::itoa(int, char*, unsigned)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TTY::Print(char*, unsigned)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::PrintTable()
</UL>

<P><STRONG><a name="[1b4]"></a>__TTY::operator +(char)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, terminal_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TTY::Char(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::PrintTable()
</UL>

<P><STRONG><a name="[214]"></a>__TTY::Print()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, terminal_interface.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::PrintTable()
</UL>

<P><STRONG><a name="[2d5]"></a>__TTY::Clear()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, terminal_interface.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>DEV_Gpio_Init(GPIO_TypeDef*, int, unsigned, unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gpio_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DEV_Gpio_Init(GPIO_TypeDef*, int, unsigned, unsigned) &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit()
</UL>

<P><STRONG><a name="[18a]"></a>DEV_AltGpio_Init(GPIO_TypeDef*, int, unsigned, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gpio_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DEV_AltGpio_Init(GPIO_TypeDef*, int, unsigned, unsigned) &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit()
</UL>

<P><STRONG><a name="[2d6]"></a>SpiSoftTypeDef::DummyWait(unsigned)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio_ex.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>SpiSoftTypeDef::Init()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio_ex.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>SpiSoftTypeDef::Select()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio_ex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSoftTypeDef::Send_9bit_Data(bool, unsigned char)
</UL>

<P><STRONG><a name="[1b8]"></a>SpiSoftTypeDef::DeSelect()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio_ex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSoftTypeDef::Send_9bit_Data(bool, unsigned char)
</UL>

<P><STRONG><a name="[2d8]"></a>SpiSoftTypeDef::DummyClock()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio_ex.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>SpiSoftTypeDef::Send_9bit_Data(bool, unsigned char)</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, gpio_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SpiSoftTypeDef::Send_9bit_Data(bool, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSoftTypeDef::DeSelect()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSoftTypeDef::Select()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::WrCmd8(unsigned char)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::WrData8(unsigned char)
</UL>

<P><STRONG><a name="[1c7]"></a>SpiSoftTypeDef::Read_8bit_Data()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::Rd8()
</UL>

<P><STRONG><a name="[2d9]"></a>Test(unsigned short, unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tftili9486.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>LcdDriverDef::LcdDriverDef(GPIO_TypeDef*, SpiSoftTypeDef&, unsigned)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tftili9486.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_device_cpp_c6d18d2d
</UL>

<P><STRONG><a name="[2da]"></a>LcdDriverDef::LcdDriverDef__sub_object(GPIO_TypeDef*, SpiSoftTypeDef&, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, tftili9486.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>LcdDriverDef::Backlight(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tftili9486.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ba]"></a>LcdDriverDef::DotClk(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tftili9486.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::Window(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::HsClk()
</UL>

<P><STRONG><a name="[1b9]"></a>LcdDriverDef::HsClk()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tftili9486.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LcdDriverDef::HsClk()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::DotClk(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::Fill(Frame2D&lang;short&rang;&, b2D)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::Fill(const tImage&, unsigned, unsigned)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::Fill(unsigned short, unsigned short, unsigned short)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::VsClk()
</UL>

<P><STRONG><a name="[1bb]"></a>LcdDriverDef::VsClk()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tftili9486.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LcdDriverDef::VsClk() &rArr; LcdDriverDef::HsClk()
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::HsClk()
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::Fill(Frame2D&lang;short&rang;&, b2D)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::Window(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::Fill(const tImage&, unsigned, unsigned)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::Fill(unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[1be]"></a>LcdDriverDef::DotClk()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tftili9486.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::Fill(unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[1bd]"></a>LcdDriverDef::PutColor(unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tftili9486.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::Fill(unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[1bc]"></a>LcdDriverDef::Fill(unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, tftili9486.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::PutColor(unsigned short)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::DotClk()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::VsClk()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::HsClk()
</UL>

<P><STRONG><a name="[1bf]"></a>LcdDriverDef::Fill(const tImage&, unsigned, unsigned)</STRONG> (Thumb, 132 bytes, Stack size 36 bytes, tftili9486.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::VsClk()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::HsClk()
</UL>

<P><STRONG><a name="[1c0]"></a>LcdDriverDef::WrData8(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tftili9486.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LcdDriverDef::WrData8(unsigned char) &rArr; SpiSoftTypeDef::Send_9bit_Data(bool, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSoftTypeDef::Send_9bit_Data(bool, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::Init(unsigned)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::Window(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[1c1]"></a>LcdDriverDef::WrCmd8(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tftili9486.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LcdDriverDef::WrCmd8(unsigned char) &rArr; SpiSoftTypeDef::Send_9bit_Data(bool, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSoftTypeDef::Send_9bit_Data(bool, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::Init(unsigned)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::Rd8()
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::Window(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[1c2]"></a>LcdDriverDef::Window(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, tftili9486.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LcdDriverDef::Window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; LcdDriverDef::WrCmd8(unsigned char) &rArr; SpiSoftTypeDef::Send_9bit_Data(bool, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::WrCmd8(unsigned char)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::WrData8(unsigned char)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::VsClk()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::DotClk(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::Fill(Frame2D&lang;short&rang;&, b2D)
</UL>

<P><STRONG><a name="[be]"></a>LcdDriverDef::Fill(Frame2D&lang;short&rang;&, b2D)</STRONG> (Thumb, 194 bytes, Stack size 72 bytes, tftili9486.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = LcdDriverDef::Fill(Frame2D&lang;short&rang;&, b2D) &rArr; LcdDriverDef::Window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; LcdDriverDef::WrCmd8(unsigned char) &rArr; SpiSoftTypeDef::Send_9bit_Data(bool, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frame2D&lang;short&rang;::GetRect()
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::Window(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::VsClk()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::HsClk()
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frame2D&lang;short&rang;::GetBuff()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frame2D&lang;short&rang;::GetH()
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c4]"></a>LcdDriverDef::RstHw()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tftili9486.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdDriverDef::RstHw() &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::Init(unsigned)
</UL>

<P><STRONG><a name="[b0]"></a>LcdDriverDef::Init(unsigned)</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, tftili9486.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LcdDriverDef::Init(unsigned) &rArr; LcdDriverDef::RstHw() &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::RstHw()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::WrCmd8(unsigned char)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::WrData8(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c5]"></a>LcdDriverDef::DummyCycle(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tftili9486.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::DummyCycle(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::DummyCycle(unsigned)
</UL>

<P><STRONG><a name="[1c6]"></a>LcdDriverDef::Rd8()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tftili9486.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::WrCmd8(unsigned char)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSoftTypeDef::Read_8bit_Data()
</UL>

<P><STRONG><a name="[1c8]"></a>Alloc(unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Alloc(unsigned) &rArr; MemoryAllocator::New(unsigned) &rArr; List_Iterator&lang;MemoryChunk&rang;::Remove(MemoryChunk*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::New(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Allocator&lang;Frame2D&lang;short&rang;&rang;::New(unsigned)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* Allocator&lang;void&rang;::New&lang;Node&lang;Screen, unsigned char&rang;&rang;()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* Allocator&lang;Screen&rang;::New&lang;tTexture&rang;(unsigned)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Allocator&lang;Screen&rang;::New()
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* Allocator&lang;void&rang;::New&lang;Node&lang;Physic::DustPart, float&rang;&rang;()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Allocator&lang;Physic::DustPart&rang;::New()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Allocator&lang;Physic::Ball2D&rang;::NewlArray(unsigned)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* Allocator&lang;Physic::Ball2D&rang;::New&lang;lArray&lang;Physic::Ball2D&rang;&rang;()
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Allocator&lang;Physic::Ball2D&rang;::New()
</UL>

<P><STRONG><a name="[1ca]"></a>Free(void*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Free(void*) &rArr; MemoryAllocator::Delete(void*) &rArr; MemoryAllocator::Sanitize(List_Iterator&lang;MemoryChunk&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::Delete(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int Allocator&lang;Screen&rang;::Delete&lang;tTexture&rang;(T1*)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int Allocator&lang;Physic::Ball2D&rang;::Delete&lang;Physic::Ball2D*&rang;(T1*)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int Allocator&lang;Physic::Ball2D&rang;::Delete&lang;lArray&lang;Physic::Ball2D&rang;&rang;(T1*)
</UL>

<P><STRONG><a name="[84]"></a>LcdDriverDef::ExtInput(b2D, unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata__ZTV12LcdDriverDef)
</UL>
<P><STRONG><a name="[85]"></a>LcdDriverDef::BcklApply(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, device.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata__ZTV12LcdDriverDef)
</UL>
<P><STRONG><a name="[f]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[2db]"></a>Coordinates::Place(b2D)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, geometry.o(.text), UNUSED)

<P><STRONG><a name="[2dc]"></a>Coordinates::Place(short, short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, geometry.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>Coordinates::Dispose(b2D)</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, geometry.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Coordinates::Dispose(b2D)
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::operator ()(b2D, Frame2D&lang;short&rang;&)
</UL>

<P><STRONG><a name="[2dd]"></a>Coordinates::Dispose(short, short, short, short)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, geometry.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>Coordinates::GetRect()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, geometry.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Coordinates::GetRect()
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_Class&lang;Screen&rang;::NewBitmapOpen(tTexture&)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinates::AllignBottom(b2D)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinates::AllignTop(b2D)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinates::AllignRight(b2D)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinates::AllignLeft(b2D)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Class&lang;Screen&rang;::Init()
</UL>

<P><STRONG><a name="[2de]"></a>Coordinates::GetxRect()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, geometry.o(.text), UNUSED)

<P><STRONG><a name="[2df]"></a>Coordinates::GetyRect()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, geometry.o(.text), UNUSED)

<P><STRONG><a name="[2e0]"></a>Coordinates::GetxyRect()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, geometry.o(.text), UNUSED)

<P><STRONG><a name="[2e1]"></a>Coordinates::GetH()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, geometry.o(.text), UNUSED)

<P><STRONG><a name="[2e2]"></a>Coordinates::GetW()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, geometry.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>Coordinates::AllignLeft(b2D)</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, geometry.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinates::GetRect()
</UL>

<P><STRONG><a name="[1d3]"></a>Coordinates::AllignRight(b2D)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, geometry.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinates::GetRect()
</UL>

<P><STRONG><a name="[1d4]"></a>Coordinates::AllignTop(b2D)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, geometry.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinates::GetRect()
</UL>

<P><STRONG><a name="[1d5]"></a>Coordinates::AllignBottom(b2D)</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, geometry.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinates::GetRect()
</UL>

<P><STRONG><a name="[2e3]"></a>Coordinates::Trunc(b2D*, b2D)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, geometry.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>Coordinates::Trunc(b2D*)</STRONG> (Thumb, 102 bytes, Stack size 4 bytes, geometry.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Coordinates::Trunc(b2D*)
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Class&lang;Screen&rang;::Draw(b2D, float, unsigned short)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int Bitmap_Class&lang;Screen&rang;::Tile&lang;tTexture&rang;(b2D, T1*, unsigned short)
</UL>

<P><STRONG><a name="[2e4]"></a>Coordinates::TruncLine(short, short, short, short)</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, geometry.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>gTest::TestLineIntersect(float, float, float, float, float, float, float, float)</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, geometry.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2D::Test(float, float, float, float)
</UL>

<P><STRONG><a name="[1e7]"></a>gTest::TestBoxBounds(f2D, f2D)</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, geometry.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gTest::TestBoxBounds(f2D, f2D)
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::StarDust::Test(Physic::DustPart&, Physic::DustPart&)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2D::Test(Physic::Ball2D&)
</UL>

<P><STRONG><a name="[2e5]"></a>gTest::TestPointInBox(f2D, float, float)</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, geometry.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>Locker::Locker()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, locker.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_device_cpp_c6d18d2d
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenManager::ScreenManager()
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Screen()
</UL>

<P><STRONG><a name="[2e6]"></a>Locker::Locker__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, locker.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>Locker::Unlock(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, locker.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::operator ()(void*, unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenManager::operator ()()
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::Delete(void*)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::New(unsigned)
</UL>

<P><STRONG><a name="[207]"></a>Locker::Lock(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, locker.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::Delete(void*)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::New(unsigned)
</UL>

<P><STRONG><a name="[1a7]"></a>Locker::Test()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, locker.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Class&lang;Screen&rang;::Draw(b2D, float, unsigned short)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int Bitmap_Class&lang;Screen&rang;::Tile&lang;tTexture&rang;(b2D, T1*, unsigned short)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int Bitmap_Class&lang;Screen&rang;::Fill&lang;tTexture&rang;(T1*, unsigned short)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_Class&lang;Screen&rang;::NewBitmapClose()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_Class&lang;Screen&rang;::NewBitmapOpen(tTexture&)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_Class&lang;Screen&rang;::Fill(unsigned short)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::Delete(void*)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::New(unsigned)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenManager::Refresh(unsigned)
</UL>

<P><STRONG><a name="[18d]"></a>Affine_Body::Affine_Body()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, affine_tf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Screen()
</UL>

<P><STRONG><a name="[2e7]"></a>Affine_Body::Affine_Body__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, affine_tf.o(.text), UNUSED)

<P><STRONG><a name="[2e8]"></a>Affine_Body::operator ()()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, affine_tf.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>Affine_Body::PointRotateZ(float, float, float, float, float)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, affine_tf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Affine_Body::PointRotateZ(f2D, float)
</UL>

<P><STRONG><a name="[1d6]"></a>Affine_Body::PointRotateZ(f2D, float)</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, affine_tf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Affine_Body::PointRotateZ(float, float, float, float, float)
</UL>

<P><STRONG><a name="[1ab]"></a>STR::itoa(int, char*, unsigned)</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, dtostr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STR::Reverse(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TTY::operator +(int)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TTY::operator &lang;&lang;(int)
</UL>

<P><STRONG><a name="[c6]"></a>Physic::Bounce::Bounce()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, physic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_c
</UL>

<P><STRONG><a name="[2e9]"></a>Physic::Bounce::Bounce__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, physic.o(.text), UNUSED)

<P><STRONG><a name="[2ea]"></a>Physic::Bounce::operator ()(float, float, float, float, float)</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, physic.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>Physic::Bounce::Step()</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, physic.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Bounce::Step(float)
</UL>

<P><STRONG><a name="[1d9]"></a>Physic::Bounce::Step(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, physic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Bounce::Step()
</UL>

<P><STRONG><a name="[c7]"></a>Physic::Ball2D::Ball2D()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, physic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_c
</UL>

<P><STRONG><a name="[2eb]"></a>Physic::Ball2D::Ball2D__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, physic.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>Physic::Ball2D::Dir(float)</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, physic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Physic::Ball2D::Dir(float) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2D::Test(float, float, float, float)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2D::Step(b2D)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2D::operator ()(float, float, float)
</UL>

<P><STRONG><a name="[1de]"></a>Physic::Ball2D::operator ()(float, float, float)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, physic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Physic::Ball2D::operator ()(float, float, float) &rArr; Physic::Ball2D::Dir(float) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2D::Dir(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2DGroup::Add(unsigned)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2DGroup::Add(float, float, float)
</UL>

<P><STRONG><a name="[1e0]"></a>Physic::Ball2D::Test(b2D, float&)</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, physic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Physic::Ball2D::Test(b2D, float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2D::Step(b2D)
</UL>

<P><STRONG><a name="[1df]"></a>Physic::Ball2D::Step(b2D)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, physic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Physic::Ball2D::Step(b2D) &rArr; Physic::Ball2D::Dir(float) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2D::Test(b2D, float&)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2D::Dir(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2DGroup::Step()
</UL>

<P><STRONG><a name="[2ec]"></a>Physic::Ball2D::Step()</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, physic.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>Physic::Ball2D::Test(float, float, float, float)</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, physic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gTest::TestLineIntersect(float, float, float, float, float, float, float, float)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2D::Dir(float)
</UL>

<P><STRONG><a name="[1e9]"></a>Physic::Ball2D::Dir(float, float)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, physic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2D::SwapP(Physic::Ball2D&)
</UL>

<P><STRONG><a name="[1e6]"></a>Physic::Ball2D::Test(Physic::Ball2D&)</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, physic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Physic::Ball2D::Test(Physic::Ball2D&) &rArr; gTest::TestBoxBounds(f2D, f2D)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gTest::TestBoxBounds(f2D, f2D)
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2DGroup::Step()
</UL>

<P><STRONG><a name="[1e8]"></a>Physic::Ball2D::SwapP(Physic::Ball2D&)</STRONG> (Thumb, 144 bytes, Stack size 4 bytes, physic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Physic::Ball2D::SwapP(Physic::Ball2D&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2D::Dir(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2DGroup::Step()
</UL>

<P><STRONG><a name="[c8]"></a>Physic::Ball2DGroup::Ball2DGroup()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, physic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Physic::Ball2DGroup::Ball2DGroup()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;Physic::Ball2D&rang;::List_Iterator()
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_c
</UL>

<P><STRONG><a name="[2ed]"></a>Physic::Ball2DGroup::Ball2DGroup__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, physic.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>Physic::Ball2DGroup::operator ()(b2D, float, float)</STRONG> (Thumb, 26 bytes, Stack size 20 bytes, physic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Physic::Ball2DGroup::operator ()(b2D, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>Physic::Ball2DGroup::Step()</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, physic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Physic::Ball2DGroup::Step() &rArr; Physic::Ball2D::Step(b2D) &rArr; Physic::Ball2D::Dir(float) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* Allocator&lang;Physic::Ball2D&rang;::New&lang;lArray&lang;Physic::Ball2D&rang;&rang;()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lArray&lang;Physic::Ball2D&rang;::operator ()(unsigned)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lArray&lang;Physic::Ball2D&rang;::~lArray()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lArray&lang;Physic::Ball2D&rang;::Add(Physic::Ball2D*, unsigned)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;Physic::Ball2D&rang;::operator +(Physic::Ball2D*)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;Physic::Ball2D&rang;::operator -(Physic::Ball2D*)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;Physic::Ball2D&rang;::GetFirst()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;Physic::Ball2D&rang;::GetNext(Physic::Ball2D*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;Physic::Ball2D&rang;::Contain()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;Physic::Ball2D&rang;& List_Iterator&lang;Physic::Ball2D&rang;::Array&lang;lArray&lang;Physic::Ball2D&rang;&rang;(T1*, unsigned)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;Physic::Ball2D&rang;::Get(unsigned)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2D::SwapP(Physic::Ball2D&)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2D::Test(Physic::Ball2D&)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2D::Step(b2D)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>Physic::Ball2DGroup::Add(unsigned)</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, physic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Physic::Ball2DGroup::Add(unsigned) &rArr; Physic::Ball2D::operator ()(float, float, float) &rArr; Physic::Ball2D::Dir(float) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Allocator&lang;Physic::Ball2D&rang;::New()
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;Physic::Ball2D&rang;::operator +(Physic::Ball2D*)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2D::operator ()(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f7]"></a>Physic::Ball2DGroup::Add(float, float, float)</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, physic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Allocator&lang;Physic::Ball2D&rang;::New()
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;Physic::Ball2D&rang;::operator +(Physic::Ball2D*)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2D::operator ()(float, float, float)
</UL>

<P><STRONG><a name="[2ee]"></a>Physic::Ball2DGroup::Remove(unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, physic.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>Physic::Ball2DGroup::Draw()</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, physic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Physic::Ball2DGroup::Draw()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;Physic::Ball2D&rang;::GetFirst()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;Physic::Ball2D&rang;::GetNext(Physic::Ball2D*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>Physic::StarDust::StarDust()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, physic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Physic::StarDust::StarDust() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_c
</UL>

<P><STRONG><a name="[2ef]"></a>Physic::StarDust::StarDust__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, physic.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>Physic::StarDust::~StarDust()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, physic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Physic::StarDust::~StarDust() &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[2f0]"></a>Physic::StarDust::~StarDust__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, physic.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>Physic::StarDust::operator ()()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, physic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage::Map&lang;(int)2, Physic::DustPart, float&rang;::Begin()
</UL>

<P><STRONG><a name="[1fc]"></a>Physic::StarDust::SetUp(Physic::DustPart*, unsigned)</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, physic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[b5]"></a>Physic::StarDust::SetUp(Physic::DustPart*, const tImage&, unsigned)</STRONG> (Thumb, 388 bytes, Stack size 72 bytes, physic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Physic::StarDust::SetUp(Physic::DustPart*, const tImage&, unsigned) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[200]"></a>Physic::StarDust::Add(float)</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, physic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Allocator&lang;Physic::DustPart&rang;::New()
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage::Map&lang;(int)2, Physic::DustPart, float&rang;::operator +(Physic::DustPart*)
</UL>

<P><STRONG><a name="[2f1]"></a>Physic::StarDust::Add(unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, physic.o(.text), UNUSED)

<P><STRONG><a name="[2f2]"></a>Physic::StarDust::Remove(unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, physic.o(.text), UNUSED)

<P><STRONG><a name="[203]"></a>Physic::StarDust::Test(Physic::DustPart&, Physic::DustPart&)</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, physic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gTest::TestBoxBounds(f2D, f2D)
</UL>

<P><STRONG><a name="[2f3]"></a>Physic::StarDust::Step(b2D)</STRONG> (Thumb, 210 bytes, Stack size 20 bytes, physic.o(.text), UNUSED)

<P><STRONG><a name="[204]"></a>Physic::StarDust::Draw()</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, physic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::StarDust::Draw(float, float, unsigned)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[206]"></a>Physic::StarDust::TestAround(Physic::DustPart&)</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, physic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::StarDust::ReadPixel(float, float)
</UL>

<P><STRONG><a name="[20a]"></a>MemoryAllocator::Separate(MemoryChunk*, unsigned)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, memory_alloc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::New(unsigned)
</UL>

<P><STRONG><a name="[1c9]"></a>MemoryAllocator::New(unsigned)</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, memory_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemoryAllocator::New(unsigned) &rArr; List_Iterator&lang;MemoryChunk&rang;::Remove(MemoryChunk*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Locker::Test()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Locker::Lock(unsigned)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Locker::Unlock(unsigned)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;MemoryChunk&rang;::operator +(MemoryChunk*)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;MemoryChunk&rang;::GetFirst()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;MemoryChunk&rang;::Remove(MemoryChunk*)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::Separate(MemoryChunk*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::operator ()(void*, unsigned)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alloc(unsigned)
</UL>

<P><STRONG><a name="[aa]"></a>MemoryAllocator::operator ()(void*, unsigned)</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memory_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MemoryAllocator::operator ()(void*, unsigned) &rArr; MemoryAllocator::New(unsigned) &rArr; List_Iterator&lang;MemoryChunk&rang;::Remove(MemoryChunk*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::New(unsigned)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TTY::operator ()(void*, unsigned)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Locker::Unlock(unsigned)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;MemoryChunk&rang;::operator +(MemoryChunk*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20e]"></a>MemoryAllocator::Sanitize(List_Iterator&lang;MemoryChunk&rang;&)</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, memory_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MemoryAllocator::Sanitize(List_Iterator&lang;MemoryChunk&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;MemoryChunk&rang;::operator -(MemoryChunk*)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;MemoryChunk&rang;::GetFirst()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;MemoryChunk&rang;::GetLast()
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;MemoryChunk&rang;::Contain()
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::Delete(void*)
</UL>

<P><STRONG><a name="[1cb]"></a>MemoryAllocator::Delete(void*)</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, memory_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemoryAllocator::Delete(void*) &rArr; MemoryAllocator::Sanitize(List_Iterator&lang;MemoryChunk&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Locker::Test()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Locker::Lock(unsigned)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Locker::Unlock(unsigned)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;MemoryChunk&rang;::operator +(MemoryChunk*)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;MemoryChunk&rang;::operator -(MemoryChunk*)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::Sanitize(List_Iterator&lang;MemoryChunk&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Free(void*)
</UL>

<P><STRONG><a name="[2f4]"></a>MemoryAllocator::Check()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memory_alloc.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>MemoryAllocator::PrintTable()</STRONG> (Thumb, 406 bytes, Stack size 24 bytes, memory_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TTY::Print()
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TTY::operator +(char)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TTY::operator +(int)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TTY::Print(char*, unsigned)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TTY::Print(int, char*, unsigned)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;MemoryChunk&rang;::Contain()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;MemoryChunk&rang;::Get(unsigned)
</UL>

<P><STRONG><a name="[e]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[221]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f417xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[80]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(.text)
</UL>
<P><STRONG><a name="[2f5]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, system_stm32f4xx.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::Delete(void*)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::New(unsigned)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[2f6]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[2f7]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[94]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[1ac]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STR::Reverse(char*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TTY::operator +(int)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TTY::operator &lang;&lang;(int)
</UL>

<P><STRONG><a name="[205]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::StarDust::Draw()
</UL>

<P><STRONG><a name="[2f8]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2f9]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2fa]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2fb]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[1f9]"></a>__aeabi_vec_dtor</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, aeabi_vec_dtor_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::StarDust::~StarDust()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage::Map&lang;(int)2, Physic::DustPart, float&rang;::~Map()
</UL>

<P><STRONG><a name="[2fc]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2fd]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[216]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[219]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[21a]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[217]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2fe]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[2ff]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[21c]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[92]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[21e]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[8]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[99]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[21b]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[9e]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[21d]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[a2]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[300]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[301]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[223]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[225]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[226]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[7d]"></a>ScreenManager::~ScreenManager()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, device.o(i._ZN13ScreenManagerD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ScreenManager::~ScreenManager()
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Order&lang;Screen, unsigned char&rang;::~List_Order()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.text)
</UL>
<P><STRONG><a name="[303]"></a>ScreenManager::~ScreenManager__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, device.o(i._ZN13ScreenManagerD1Ev), UNUSED)

<P><STRONG><a name="[7f]"></a>storage::Map&lang;(int)2, Physic::DustPart, float&rang;::~Map()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, physic.o(i._ZN7storage3MapILi2EN6Physic8DustPartEfED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = storage::Map&lang;(int)2, Physic::DustPart, float&rang;::~Map() &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> physic.o(.text)
</UL>
<P><STRONG><a name="[304]"></a>storage::Map&lang;(int)2, Physic::DustPart, float&rang;::~Map__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, physic.o(i._ZN7storage3MapILi2EN6Physic8DustPartEfED1Ev), UNUSED)

<P><STRONG><a name="[22a]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[235]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_atexit</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, aeabi_atexit.o(i.__aeabi_atexit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_c
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_device_cpp_c6d18d2d
</UL>

<P><STRONG><a name="[1f8]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::StarDust::StarDust()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage::Map&lang;(int)2, Physic::DustPart, float&rang;::Map()
</UL>

<P><STRONG><a name="[97]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(i.__cxa_finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_1
</UL>

<P><STRONG><a name="[1e4]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2D::Test(float, float, float, float)
</UL>

<P><STRONG><a name="[1dd]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::StarDust::SetUp(Physic::DustPart*, const tImage&, unsigned)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::StarDust::Add(float)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::StarDust::SetUp(Physic::DustPart*, unsigned)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2D::Dir(float)
</UL>

<P><STRONG><a name="[1dc]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::StarDust::SetUp(Physic::DustPart*, const tImage&, unsigned)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::StarDust::Add(float)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::StarDust::SetUp(Physic::DustPart*, unsigned)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2D::Dir(float)
</UL>

<P><STRONG><a name="[22f]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[229]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[22b]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[234]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[233]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[236]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[232]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[22c]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[b6]"></a>Fill_Class&lang;Screen&rang;::Fill(unsigned short)</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, main.o(t._ZN10Fill_ClassI6ScreenE4FillEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Fill_Class&lang;Screen&rang;::Fill(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Locker::Test()
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Refresh()
</UL>

<P><STRONG><a name="[18e]"></a>Fill_Class&lang;Screen&rang;::Fill_Class()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen.o(t._ZN10Fill_ClassI6ScreenEC1Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Screen()
</UL>

<P><STRONG><a name="[305]"></a>Fill_Class&lang;Screen&rang;::Fill_Class__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen.o(t._ZN10Fill_ClassI6ScreenEC1Ev), UNUSED)

<P><STRONG><a name="[197]"></a>Line_Class&lang;Screen&rang;::Init()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, screen.o(t._ZN10Line_ClassI6ScreenE4InitEv))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::operator ()(b2D, Frame2D&lang;short&rang;&)
</UL>

<P><STRONG><a name="[191]"></a>Line_Class&lang;Screen&rang;::Line_Class()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen.o(t._ZN10Line_ClassI6ScreenEC1Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Screen()
</UL>

<P><STRONG><a name="[306]"></a>Line_Class&lang;Screen&rang;::Line_Class__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen.o(t._ZN10Line_ClassI6ScreenEC1Ev), UNUSED)

<P><STRONG><a name="[1a2]"></a>List_Order&lang;Screen, unsigned char&rang;::List_Order()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, screen.o(t._ZN10List_OrderI6ScreenhEC1Ev))
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;Node&lang;Screen, unsigned char&rang;&rang;::List_Iterator()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenManager::ScreenManager()
</UL>

<P><STRONG><a name="[307]"></a>List_Order&lang;Screen, unsigned char&rang;::List_Order__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen.o(t._ZN10List_OrderI6ScreenhEC1Ev), UNUSED)

<P><STRONG><a name="[227]"></a>List_Order&lang;Screen, unsigned char&rang;::~List_Order()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, device.o(t._ZN10List_OrderI6ScreenhED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenManager::~ScreenManager()
</UL>

<P><STRONG><a name="[308]"></a>List_Order&lang;Screen, unsigned char&rang;::~List_Order__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, device.o(t._ZN10List_OrderI6ScreenhED1Ev), UNUSED)

<P><STRONG><a name="[1a5]"></a>List_Order&lang;Screen, unsigned char&rang;::operator +(Screen*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, screen.o(t._ZN10List_OrderI6ScreenhEplEPS0_))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenManager::Create(b2D, Frame2D&lang;short&rang;*)
</UL>

<P><STRONG><a name="[238]"></a>List_Order&lang;Screen, unsigned char&rang;::operator +(Screen&)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, screen.o(t._ZN10List_OrderI6ScreenhEplERS0_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* Allocator&lang;void&rang;::New&lang;Node&lang;Screen, unsigned char&rang;&rang;()
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;Node&lang;Screen, unsigned char&rang;&rang;::operator +(Node&lang;Screen, unsigned char&rang;*)
</UL>

<P><STRONG><a name="[23b]"></a>List_Order&lang;Physic::DustPart, float&rang;::Begin()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, physic.o(t._ZN10List_OrderIN6Physic8DustPartEfE5BeginEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;Node&lang;Physic::DustPart, float&rang;&rang;::GetFirst()
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage::Map&lang;(int)2, Physic::DustPart, float&rang;::Begin()
</UL>

<P><STRONG><a name="[83]"></a>List_Order&lang;Physic::DustPart, float&rang;::List_Order()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, physic.o(t._ZN10List_OrderIN6Physic8DustPartEfEC1Ev))
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;Node&lang;Physic::DustPart, float&rang;&rang;::List_Iterator()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> physic.o(t._ZN7storage3MapILi2EN6Physic8DustPartEfEC1Ev)
</UL>
<P><STRONG><a name="[309]"></a>List_Order&lang;Physic::DustPart, float&rang;::List_Order__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, physic.o(t._ZN10List_OrderIN6Physic8DustPartEfEC1Ev), UNUSED)

<P><STRONG><a name="[82]"></a>List_Order&lang;Physic::DustPart, float&rang;::~List_Order()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, physic.o(t._ZN10List_OrderIN6Physic8DustPartEfED1Ev))
<BR>[Address Reference Count : 1]<UL><LI> physic.o(i._ZN7storage3MapILi2EN6Physic8DustPartEfED1Ev)
</UL>
<P><STRONG><a name="[30a]"></a>List_Order&lang;Physic::DustPart, float&rang;::~List_Order__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, physic.o(t._ZN10List_OrderIN6Physic8DustPartEfED1Ev), UNUSED)

<P><STRONG><a name="[23e]"></a>List_Order&lang;Physic::DustPart, float&rang;::operator +(Physic::DustPart&)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, physic.o(t._ZN10List_OrderIN6Physic8DustPartEfEplERS1_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* Allocator&lang;void&rang;::New&lang;Node&lang;Physic::DustPart, float&rang;&rang;()
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;Node&lang;Physic::DustPart, float&rang;&rang;::operator +(Node&lang;Physic::DustPart, float&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage::Map&lang;(int)2, Physic::DustPart, float&rang;::operator +(Physic::DustPart&)
</UL>

<P><STRONG><a name="[196]"></a>Screen_Obj&lang;Screen&rang;::operator ()(Screen&)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, screen.o(t._ZN10Screen_ObjI6ScreenEclERS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Screen_Obj&lang;Screen&rang;::operator ()(Screen&)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frame2D&lang;short&rang;::GetBuff()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frame2D&lang;short&rang;::GetH()
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::operator ()(b2D, Frame2D&lang;short&rang;&)
</UL>

<P><STRONG><a name="[199]"></a>Print_Class&lang;Screen&rang;::Init()</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, screen.o(t._ZN11Print_ClassI6ScreenE4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Print_Class&lang;Screen&rang;::Init() &rArr; Coordinates::GetRect()
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinates::GetRect()
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::operator ()(b2D, Frame2D&lang;short&rang;&)
</UL>

<P><STRONG><a name="[af]"></a>Print_Class&lang;Screen&rang;::UseFont(const tFont*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(t._ZN11Print_ClassI6ScreenE7UseFontEPK5tFont))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[193]"></a>Print_Class&lang;Screen&rang;::Print_Class()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen.o(t._ZN11Print_ClassI6ScreenEC1Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Screen()
</UL>

<P><STRONG><a name="[30b]"></a>Print_Class&lang;Screen&rang;::Print_Class__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen.o(t._ZN11Print_ClassI6ScreenEC1Ev), UNUSED)

<P><STRONG><a name="[b8]"></a>Bitmap_Class&lang;Screen&rang;::NewBitmapOpen(tTexture&)</STRONG> (Thumb, 102 bytes, Stack size 72 bytes, main.o(t._ZN12Bitmap_ClassI6ScreenE13NewBitmapOpenER8tTexture))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Bitmap_Class&lang;Screen&rang;::NewBitmapOpen(tTexture&) &rArr; Screen::operator ()(b2D, Frame2D&lang;short&rang;&) &rArr; Print_Class&lang;Screen&rang;::Init() &rArr; Coordinates::GetRect()
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::operator ()(b2D, Frame2D&lang;short&rang;&)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::GetFrame()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Locker::Test()
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinates::GetRect()
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frame2D&lang;short&rang;::operator ()(b2D, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>Bitmap_Class&lang;Screen&rang;::NewBitmapClose()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(t._ZN12Bitmap_ClassI6ScreenE14NewBitmapCloseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bitmap_Class&lang;Screen&rang;::NewBitmapClose() &rArr; Screen::operator ()(b2D, Frame2D&lang;short&rang;&) &rArr; Print_Class&lang;Screen&rang;::Init() &rArr; Coordinates::GetRect()
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::operator ()(b2D, Frame2D&lang;short&rang;&)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Locker::Test()
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>int Bitmap_Class&lang;Screen&rang;::Fill&lang;tTexture&rang;(T1*, unsigned short)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main.o(t._ZN12Bitmap_ClassI6ScreenE4FillI8tTextureEEiPT_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = int Bitmap_Class&lang;Screen&rang;::Fill&lang;tTexture&rang;(T1*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Locker::Test()
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>int Bitmap_Class&lang;Screen&rang;::Tile&lang;tTexture&rang;(b2D, T1*, unsigned short)</STRONG> (Thumb, 348 bytes, Stack size 88 bytes, main.o(t._ZN12Bitmap_ClassI6ScreenE4TileI8tTextureEEi3b2DPT_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = int Bitmap_Class&lang;Screen&rang;::Tile&lang;tTexture&rang;(b2D, T1*, unsigned short) &rArr; Coordinates::Trunc(b2D*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Locker::Test()
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinates::Trunc(b2D*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>Bitmap_Class&lang;Screen&rang;::SetScale(float, float)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(t._ZN12Bitmap_ClassI6ScreenE8SetScaleEff))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::operator ()(b2D, Frame2D&lang;short&rang;&)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18f]"></a>Bitmap_Class&lang;Screen&rang;::Bitmap_Class()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen.o(t._ZN12Bitmap_ClassI6ScreenEC1Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Screen()
</UL>

<P><STRONG><a name="[30c]"></a>Bitmap_Class&lang;Screen&rang;::Bitmap_Class__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen.o(t._ZN12Bitmap_ClassI6ScreenEC1Ev), UNUSED)

<P><STRONG><a name="[245]"></a>Circle_Class&lang;Screen&rang;::Sqr(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(t._ZN12Circle_ClassI6ScreenE3SqrEi))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Class&lang;Screen&rang;::Draw(b2D, float, unsigned short)
</UL>

<P><STRONG><a name="[244]"></a>Circle_Class&lang;Screen&rang;::Draw(b2D, float, unsigned short)</STRONG> (Thumb, 304 bytes, Stack size 80 bytes, main.o(t._ZN12Circle_ClassI6ScreenE4DrawE3b2Dft))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Circle_Class&lang;Screen&rang;::Draw(b2D, float, unsigned short) &rArr; Circle_Class&lang;Screen&rang;::Point(int, int, int, int, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Locker::Test()
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coordinates::Trunc(b2D*)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Class&lang;Screen&rang;::Point(int, int, int, int, unsigned short)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Class&lang;Screen&rang;::Pixel(unsigned, unsigned, unsigned short)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Class&lang;Screen&rang;::Sqr(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Class&lang;Screen&rang;::Draw(short, short, float, unsigned short)
</UL>

<P><STRONG><a name="[bf]"></a>Circle_Class&lang;Screen&rang;::Draw(short, short, float, unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(t._ZN12Circle_ClassI6ScreenE4DrawEssft))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Circle_Class&lang;Screen&rang;::Draw(short, short, float, unsigned short) &rArr; Circle_Class&lang;Screen&rang;::Draw(b2D, float, unsigned short) &rArr; Circle_Class&lang;Screen&rang;::Point(int, int, int, int, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Class&lang;Screen&rang;::Draw(b2D, float, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2DGroup::Draw(f2P, float, unsigned)
</UL>

<P><STRONG><a name="[246]"></a>Circle_Class&lang;Screen&rang;::Pixel(unsigned, unsigned, unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(t._ZN12Circle_ClassI6ScreenE5PixelEjjt))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Class&lang;Screen&rang;::Draw(b2D, float, unsigned short)
</UL>

<P><STRONG><a name="[247]"></a>Circle_Class&lang;Screen&rang;::Point(int, int, int, int, unsigned short)</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, main.o(t._ZN12Circle_ClassI6ScreenE5PointEiiiit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Circle_Class&lang;Screen&rang;::Point(int, int, int, int, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Class&lang;Screen&rang;::Draw(b2D, float, unsigned short)
</UL>

<P><STRONG><a name="[190]"></a>Circle_Class&lang;Screen&rang;::Circle_Class()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen.o(t._ZN12Circle_ClassI6ScreenEC1Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Screen()
</UL>

<P><STRONG><a name="[30d]"></a>Circle_Class&lang;Screen&rang;::Circle_Class__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen.o(t._ZN12Circle_ClassI6ScreenEC1Ev), UNUSED)

<P><STRONG><a name="[213]"></a>List_Iterator&lang;MemoryChunk&rang;::Get(unsigned)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, memory_alloc.o(t._ZN13List_IteratorI11MemoryChunkE3GetEj), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::PrintTable()
</UL>

<P><STRONG><a name="[209]"></a>List_Iterator&lang;MemoryChunk&rang;::Remove(MemoryChunk*)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, memory_alloc.o(t._ZN13List_IteratorI11MemoryChunkE6RemoveEPS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = List_Iterator&lang;MemoryChunk&rang;::Remove(MemoryChunk*)
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;MemoryChunk&rang;::operator -(MemoryChunk*)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;MemoryChunk&rang;::Contain()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::New(unsigned)
</UL>

<P><STRONG><a name="[20f]"></a>List_Iterator&lang;MemoryChunk&rang;::Contain()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memory_alloc.o(t._ZN13List_IteratorI11MemoryChunkE7ContainEv))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;MemoryChunk&rang;::Remove(MemoryChunk*)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::PrintTable()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::Sanitize(List_Iterator&lang;MemoryChunk&rang;&)
</UL>

<P><STRONG><a name="[210]"></a>List_Iterator&lang;MemoryChunk&rang;::GetLast()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memory_alloc.o(t._ZN13List_IteratorI11MemoryChunkE7GetLastEv))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::Sanitize(List_Iterator&lang;MemoryChunk&rang;&)
</UL>

<P><STRONG><a name="[208]"></a>List_Iterator&lang;MemoryChunk&rang;::GetFirst()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memory_alloc.o(t._ZN13List_IteratorI11MemoryChunkE8GetFirstEv))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::New(unsigned)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::Sanitize(List_Iterator&lang;MemoryChunk&rang;&)
</UL>

<P><STRONG><a name="[1cd]"></a>List_Iterator&lang;MemoryChunk&rang;::List_Iterator()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, device.o(t._ZN13List_IteratorI11MemoryChunkEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_device_cpp_c6d18d2d
</UL>

<P><STRONG><a name="[30e]"></a>List_Iterator&lang;MemoryChunk&rang;::List_Iterator__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, device.o(t._ZN13List_IteratorI11MemoryChunkEC1Ev), UNUSED)

<P><STRONG><a name="[211]"></a>List_Iterator&lang;MemoryChunk&rang;::operator -(MemoryChunk*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memory_alloc.o(t._ZN13List_IteratorI11MemoryChunkEmiEPS0_))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::Delete(void*)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;MemoryChunk&rang;::Remove(MemoryChunk*)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::Sanitize(List_Iterator&lang;MemoryChunk&rang;&)
</UL>

<P><STRONG><a name="[30f]"></a>List_Iterator&lang;MemoryChunk&rang;::operator -(MemoryChunk&)</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, memory_alloc.o(t._ZN13List_IteratorI11MemoryChunkEmiERS0_), UNUSED)

<P><STRONG><a name="[20b]"></a>List_Iterator&lang;MemoryChunk&rang;::operator +(MemoryChunk*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memory_alloc.o(t._ZN13List_IteratorI11MemoryChunkEplEPS0_))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::operator ()(void*, unsigned)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::Delete(void*)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::New(unsigned)
</UL>

<P><STRONG><a name="[310]"></a>List_Iterator&lang;MemoryChunk&rang;::operator +(MemoryChunk&)</STRONG> (Thumb, 96 bytes, Stack size 4 bytes, memory_alloc.o(t._ZN13List_IteratorI11MemoryChunkEplERS0_), UNUSED)

<P><STRONG><a name="[237]"></a>List_Iterator&lang;Node&lang;Screen, unsigned char&rang;&rang;::List_Iterator()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen.o(t._ZN13List_IteratorI4NodeI6ScreenhEEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Order&lang;Screen, unsigned char&rang;::List_Order()
</UL>

<P><STRONG><a name="[311]"></a>List_Iterator&lang;Node&lang;Screen, unsigned char&rang;&rang;::List_Iterator__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen.o(t._ZN13List_IteratorI4NodeI6ScreenhEEC1Ev), UNUSED)

<P><STRONG><a name="[23a]"></a>List_Iterator&lang;Node&lang;Screen, unsigned char&rang;&rang;::operator +(Node&lang;Screen, unsigned char&rang;*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, screen.o(t._ZN13List_IteratorI4NodeI6ScreenhEEplEPS2_), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Order&lang;Screen, unsigned char&rang;::operator +(Screen&)
</UL>

<P><STRONG><a name="[312]"></a>List_Iterator&lang;Node&lang;Screen, unsigned char&rang;&rang;::operator +(Node&lang;Screen, unsigned char&rang;&)</STRONG> (Thumb, 96 bytes, Stack size 4 bytes, screen.o(t._ZN13List_IteratorI4NodeI6ScreenhEEplERS2_), UNUSED)

<P><STRONG><a name="[23c]"></a>List_Iterator&lang;Node&lang;Physic::DustPart, float&rang;&rang;::GetFirst()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, physic.o(t._ZN13List_IteratorI4NodeIN6Physic8DustPartEfEE8GetFirstEv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Order&lang;Physic::DustPart, float&rang;::Begin()
</UL>

<P><STRONG><a name="[23d]"></a>List_Iterator&lang;Node&lang;Physic::DustPart, float&rang;&rang;::List_Iterator()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, physic.o(t._ZN13List_IteratorI4NodeIN6Physic8DustPartEfEEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Order&lang;Physic::DustPart, float&rang;::List_Order()
</UL>

<P><STRONG><a name="[313]"></a>List_Iterator&lang;Node&lang;Physic::DustPart, float&rang;&rang;::List_Iterator__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, physic.o(t._ZN13List_IteratorI4NodeIN6Physic8DustPartEfEEC1Ev), UNUSED)

<P><STRONG><a name="[240]"></a>List_Iterator&lang;Node&lang;Physic::DustPart, float&rang;&rang;::operator +(Node&lang;Physic::DustPart, float&rang;*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, physic.o(t._ZN13List_IteratorI4NodeIN6Physic8DustPartEfEEplEPS3_), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Order&lang;Physic::DustPart, float&rang;::operator +(Physic::DustPart&)
</UL>

<P><STRONG><a name="[314]"></a>List_Iterator&lang;Node&lang;Physic::DustPart, float&rang;&rang;::operator +(Node&lang;Physic::DustPart, float&rang;&)</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, physic.o(t._ZN13List_IteratorI4NodeIN6Physic8DustPartEfEEplERS3_), UNUSED)

<P><STRONG><a name="[24b]"></a>List_Iterator&lang;Frame2D&lang;short&rang;&rang;::operator +(Frame2D&lang;short&rang;*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(t._ZN13List_IteratorI7Frame2DIsEEplEPS1_))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frame2DManager&lang;short&rang;::Create(b2D)
</UL>

<P><STRONG><a name="[315]"></a>List_Iterator&lang;Frame2D&lang;short&rang;&rang;::operator +(Frame2D&lang;short&rang;&)</STRONG> (Thumb, 96 bytes, Stack size 4 bytes, main.o(t._ZN13List_IteratorI7Frame2DIsEEplERS1_), UNUSED)

<P><STRONG><a name="[1f0]"></a>List_Iterator&lang;Physic::Ball2D&rang;::Get(unsigned)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, physic.o(t._ZN13List_IteratorIN6Physic6Ball2DEE3GetEj))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2DGroup::Step()
</UL>

<P><STRONG><a name="[1f4]"></a>List_Iterator&lang;Physic::Ball2D&rang;& List_Iterator&lang;Physic::Ball2D&rang;::Array&lang;lArray&lang;Physic::Ball2D&rang;&rang;(T1*, unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, physic.o(t._ZN13List_IteratorIN6Physic6Ball2DEE5ArrayI6lArrayIS1_EEERS2_PT_j))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2DGroup::Step()
</UL>

<P><STRONG><a name="[248]"></a>List_Iterator&lang;Physic::Ball2D&rang;& List_Iterator&lang;Physic::Ball2D&rang;::Array&lang;lArray&lang;Physic::Ball2D&rang;&rang;(T1&, unsigned)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, physic.o(t._ZN13List_IteratorIN6Physic6Ball2DEE5ArrayI6lArrayIS1_EEERS2_RT_j), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lArray&lang;Physic::Ball2D&rang;::operator [](unsigned)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;Physic::Ball2D&rang;::operator +(Physic::Ball2D*)
</UL>

<P><STRONG><a name="[1eb]"></a>List_Iterator&lang;Physic::Ball2D&rang;::Contain()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, physic.o(t._ZN13List_IteratorIN6Physic6Ball2DEE7ContainEv))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2DGroup::Step()
</UL>

<P><STRONG><a name="[1ef]"></a>List_Iterator&lang;Physic::Ball2D&rang;::GetNext(Physic::Ball2D*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, physic.o(t._ZN13List_IteratorIN6Physic6Ball2DEE7GetNextEPS1_))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2DGroup::Step()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2DGroup::Draw()
</UL>

<P><STRONG><a name="[1ee]"></a>List_Iterator&lang;Physic::Ball2D&rang;::GetFirst()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, physic.o(t._ZN13List_IteratorIN6Physic6Ball2DEE8GetFirstEv))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2DGroup::Step()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2DGroup::Draw()
</UL>

<P><STRONG><a name="[1ea]"></a>List_Iterator&lang;Physic::Ball2D&rang;::List_Iterator()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, physic.o(t._ZN13List_IteratorIN6Physic6Ball2DEEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2DGroup::Ball2DGroup()
</UL>

<P><STRONG><a name="[316]"></a>List_Iterator&lang;Physic::Ball2D&rang;::List_Iterator__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, physic.o(t._ZN13List_IteratorIN6Physic6Ball2DEEC1Ev), UNUSED)

<P><STRONG><a name="[1f1]"></a>List_Iterator&lang;Physic::Ball2D&rang;::operator -(Physic::Ball2D*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, physic.o(t._ZN13List_IteratorIN6Physic6Ball2DEEmiEPS1_))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2DGroup::Step()
</UL>

<P><STRONG><a name="[317]"></a>List_Iterator&lang;Physic::Ball2D&rang;::operator -(Physic::Ball2D&)</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, physic.o(t._ZN13List_IteratorIN6Physic6Ball2DEEmiERS1_), UNUSED)

<P><STRONG><a name="[1f3]"></a>List_Iterator&lang;Physic::Ball2D&rang;::operator +(Physic::Ball2D*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, physic.o(t._ZN13List_IteratorIN6Physic6Ball2DEEplEPS1_))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2DGroup::Step()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2DGroup::Add(unsigned)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;Physic::Ball2D&rang;& List_Iterator&lang;Physic::Ball2D&rang;::Array&lang;lArray&lang;Physic::Ball2D&rang;&rang;(T1&, unsigned)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2DGroup::Add(float, float, float)
</UL>

<P><STRONG><a name="[318]"></a>List_Iterator&lang;Physic::Ball2D&rang;::operator +(Physic::Ball2D&)</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, physic.o(t._ZN13List_IteratorIN6Physic6Ball2DEEplERS1_), UNUSED)

<P><STRONG><a name="[ac]"></a>Frame2DManager&lang;short&rang;::Create(b2D)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, main.o(t._ZN14Frame2DManagerIsE6CreateE3b2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Frame2DManager&lang;short&rang;::Create(b2D) &rArr; Allocator&lang;Frame2D&lang;short&rang;&rang;::New(unsigned) &rArr; Alloc(unsigned) &rArr; MemoryAllocator::New(unsigned) &rArr; List_Iterator&lang;MemoryChunk&rang;::Remove(MemoryChunk*)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Allocator&lang;Frame2D&lang;short&rang;&rang;::New(unsigned)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frame2D&lang;short&rang;::operator ()(b2D)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;Frame2D&lang;short&rang;&rang;::operator +(Frame2D&lang;short&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cf]"></a>Frame2DManager&lang;short&rang;::Frame2DManager()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, device.o(t._ZN14Frame2DManagerIsEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_device_cpp_c6d18d2d
</UL>

<P><STRONG><a name="[319]"></a>Frame2DManager&lang;short&rang;::Frame2DManager__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, device.o(t._ZN14Frame2DManagerIsEC1Ev), UNUSED)

<P><STRONG><a name="[ab]"></a>Frame2DManager&lang;short&rang;::operator ()()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(t._ZN14Frame2DManagerIsEclEv))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[198]"></a>Rectangle_Class&lang;Screen&rang;::Init()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen.o(t._ZN15Rectangle_ClassI6ScreenE4InitEv))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::operator ()(b2D, Frame2D&lang;short&rang;&)
</UL>

<P><STRONG><a name="[192]"></a>Rectangle_Class&lang;Screen&rang;::Rectangle_Class()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen.o(t._ZN15Rectangle_ClassI6ScreenEC1Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Screen()
</UL>

<P><STRONG><a name="[31a]"></a>Rectangle_Class&lang;Screen&rang;::Rectangle_Class__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen.o(t._ZN15Rectangle_ClassI6ScreenEC1Ev), UNUSED)

<P><STRONG><a name="[1f2]"></a>lArray&lang;Physic::Ball2D&rang;::Add(Physic::Ball2D*, unsigned)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, physic.o(t._ZN6lArrayIN6Physic6Ball2DEE3AddEPS1_j))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2DGroup::Step()
</UL>

<P><STRONG><a name="[1f5]"></a>lArray&lang;Physic::Ball2D&rang;::~lArray()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, physic.o(t._ZN6lArrayIN6Physic6Ball2DEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lArray&lang;Physic::Ball2D&rang;::~lArray() &rArr; int Allocator&lang;Physic::Ball2D&rang;::Delete&lang;Physic::Ball2D*&rang;(T1*) &rArr; Free(void*) &rArr; MemoryAllocator::Delete(void*) &rArr; MemoryAllocator::Sanitize(List_Iterator&lang;MemoryChunk&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int Allocator&lang;Physic::Ball2D&rang;::Delete&lang;Physic::Ball2D*&rang;(T1*)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int Allocator&lang;Physic::Ball2D&rang;::Delete&lang;lArray&lang;Physic::Ball2D&rang;&rang;(T1*)
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2DGroup::Step()
</UL>

<P><STRONG><a name="[31b]"></a>lArray&lang;Physic::Ball2D&rang;::~lArray__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, physic.o(t._ZN6lArrayIN6Physic6Ball2DEED1Ev), UNUSED)

<P><STRONG><a name="[1ed]"></a>lArray&lang;Physic::Ball2D&rang;::operator ()(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, physic.o(t._ZN6lArrayIN6Physic6Ball2DEEclEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lArray&lang;Physic::Ball2D&rang;::operator ()(unsigned) &rArr; Allocator&lang;Physic::Ball2D&rang;::NewlArray(unsigned) &rArr; Alloc(unsigned) &rArr; MemoryAllocator::New(unsigned) &rArr; List_Iterator&lang;MemoryChunk&rang;::Remove(MemoryChunk*)
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Allocator&lang;Physic::Ball2D&rang;::NewlArray(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2DGroup::Step()
</UL>

<P><STRONG><a name="[249]"></a>lArray&lang;Physic::Ball2D&rang;::operator [](unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, physic.o(t._ZN6lArrayIN6Physic6Ball2DEEixEj), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;Physic::Ball2D&rang;& List_Iterator&lang;Physic::Ball2D&rang;::Array&lang;lArray&lang;Physic::Ball2D&rang;&rang;(T1&, unsigned)
</UL>

<P><STRONG><a name="[19b]"></a>Frame2D&lang;short&rang;::GetH()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, screen.o(t._ZN7Frame2DIsE4GetHEv))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::operator ()(b2D, Frame2D&lang;short&rang;&)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::Fill(Frame2D&lang;short&rang;&, b2D)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_Obj&lang;Screen&rang;::operator ()(Screen&)
</UL>

<P><STRONG><a name="[19a]"></a>Frame2D&lang;short&rang;::GetBuff()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, screen.o(t._ZN7Frame2DIsE7GetBuffEv))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::operator ()(b2D, Frame2D&lang;short&rang;&)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::Fill(Frame2D&lang;short&rang;&, b2D)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_Obj&lang;Screen&rang;::operator ()(Screen&)
</UL>

<P><STRONG><a name="[1c3]"></a>Frame2D&lang;short&rang;::GetRect()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tftili9486.o(t._ZN7Frame2DIsE7GetRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Frame2D&lang;short&rang;::GetRect()
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::Fill(Frame2D&lang;short&rang;&, b2D)
</UL>

<P><STRONG><a name="[24c]"></a>Frame2D&lang;short&rang;::operator ()(b2D)</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, main.o(t._ZN7Frame2DIsEclE3b2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Frame2D&lang;short&rang;::operator ()(b2D)
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frame2DManager&lang;short&rang;::Create(b2D)
</UL>

<P><STRONG><a name="[242]"></a>Frame2D&lang;short&rang;::operator ()(b2D, unsigned short*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(t._ZN7Frame2DIsEclE3b2DPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Frame2D&lang;short&rang;::operator ()(b2D, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_Class&lang;Screen&rang;::NewBitmapOpen(tTexture&)
</UL>

<P><STRONG><a name="[1fb]"></a>storage::Map&lang;(int)2, Physic::DustPart, float&rang;::Begin()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, physic.o(t._ZN7storage3MapILi2EN6Physic8DustPartEfE5BeginEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Order&lang;Physic::DustPart, float&rang;::Begin()
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::StarDust::operator ()()
</UL>

<P><STRONG><a name="[7e]"></a>storage::Map&lang;(int)2, Physic::DustPart, float&rang;::Map()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, physic.o(t._ZN7storage3MapILi2EN6Physic8DustPartEfEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = storage::Map&lang;(int)2, Physic::DustPart, float&rang;::Map() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> physic.o(.text)
</UL>
<P><STRONG><a name="[31c]"></a>storage::Map&lang;(int)2, Physic::DustPart, float&rang;::Map__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, physic.o(t._ZN7storage3MapILi2EN6Physic8DustPartEfEC1Ev), UNUSED)

<P><STRONG><a name="[202]"></a>storage::Map&lang;(int)2, Physic::DustPart, float&rang;::operator +(Physic::DustPart*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, physic.o(t._ZN7storage3MapILi2EN6Physic8DustPartEfEplEPS2_), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::StarDust::Add(float)
</UL>

<P><STRONG><a name="[250]"></a>storage::Map&lang;(int)2, Physic::DustPart, float&rang;::operator +(Physic::DustPart&)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, physic.o(t._ZN7storage3MapILi2EN6Physic8DustPartEfEplERS2_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Order&lang;Physic::DustPart, float&rang;::operator +(Physic::DustPart&)
</UL>

<P><STRONG><a name="[1a4]"></a>Allocator&lang;Screen&rang;::New()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen.o(t._ZN9AllocatorI6ScreenE3NewEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Allocator&lang;Screen&rang;::New() &rArr; Alloc(unsigned) &rArr; MemoryAllocator::New(unsigned) &rArr; List_Iterator&lang;MemoryChunk&rang;::Remove(MemoryChunk*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alloc(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenManager::Create(b2D, Frame2D&lang;short&rang;*)
</UL>

<P><STRONG><a name="[19e]"></a>T1* Allocator&lang;Screen&rang;::New&lang;tTexture&rang;(unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, screen.o(t._ZN9AllocatorI6ScreenE3NewI8tTextureEEPT_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = T1* Allocator&lang;Screen&rang;::New&lang;tTexture&rang;(unsigned) &rArr; Alloc(unsigned) &rArr; MemoryAllocator::New(unsigned) &rArr; List_Iterator&lang;MemoryChunk&rang;::Remove(MemoryChunk*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alloc(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::MakeTexture(short, short)
</UL>

<P><STRONG><a name="[1a0]"></a>int Allocator&lang;Screen&rang;::Delete&lang;tTexture&rang;(T1*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen.o(t._ZN9AllocatorI6ScreenE6DeleteI8tTextureEEiPT_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Free(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::KillTexture(tTexture*)
</UL>

<P><STRONG><a name="[24a]"></a>Allocator&lang;Frame2D&lang;short&rang;&rang;::New(unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(t._ZN9AllocatorI7Frame2DIsEE3NewEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Allocator&lang;Frame2D&lang;short&rang;&rang;::New(unsigned) &rArr; Alloc(unsigned) &rArr; MemoryAllocator::New(unsigned) &rArr; List_Iterator&lang;MemoryChunk&rang;::Remove(MemoryChunk*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alloc(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frame2DManager&lang;short&rang;::Create(b2D)
</UL>

<P><STRONG><a name="[1f6]"></a>Allocator&lang;Physic::Ball2D&rang;::New()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, physic.o(t._ZN9AllocatorIN6Physic6Ball2DEE3NewEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Allocator&lang;Physic::Ball2D&rang;::New() &rArr; Alloc(unsigned) &rArr; MemoryAllocator::New(unsigned) &rArr; List_Iterator&lang;MemoryChunk&rang;::Remove(MemoryChunk*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alloc(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2DGroup::Add(unsigned)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2DGroup::Add(float, float, float)
</UL>

<P><STRONG><a name="[1ec]"></a>T1* Allocator&lang;Physic::Ball2D&rang;::New&lang;lArray&lang;Physic::Ball2D&rang;&rang;()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, physic.o(t._ZN9AllocatorIN6Physic6Ball2DEE3NewI6lArrayIS1_EEEPT_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = T1* Allocator&lang;Physic::Ball2D&rang;::New&lang;lArray&lang;Physic::Ball2D&rang;&rang;() &rArr; Alloc(unsigned) &rArr; MemoryAllocator::New(unsigned) &rArr; List_Iterator&lang;MemoryChunk&rang;::Remove(MemoryChunk*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alloc(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2DGroup::Step()
</UL>

<P><STRONG><a name="[24e]"></a>int Allocator&lang;Physic::Ball2D&rang;::Delete&lang;lArray&lang;Physic::Ball2D&rang;&rang;(T1*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, physic.o(t._ZN9AllocatorIN6Physic6Ball2DEE6DeleteI6lArrayIS1_EEEiPT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = int Allocator&lang;Physic::Ball2D&rang;::Delete&lang;lArray&lang;Physic::Ball2D&rang;&rang;(T1*) &rArr; Free(void*) &rArr; MemoryAllocator::Delete(void*) &rArr; MemoryAllocator::Sanitize(List_Iterator&lang;MemoryChunk&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Free(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lArray&lang;Physic::Ball2D&rang;::~lArray()
</UL>

<P><STRONG><a name="[24d]"></a>int Allocator&lang;Physic::Ball2D&rang;::Delete&lang;Physic::Ball2D*&rang;(T1*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, physic.o(t._ZN9AllocatorIN6Physic6Ball2DEE6DeleteIPS1_EEiPT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = int Allocator&lang;Physic::Ball2D&rang;::Delete&lang;Physic::Ball2D*&rang;(T1*) &rArr; Free(void*) &rArr; MemoryAllocator::Delete(void*) &rArr; MemoryAllocator::Sanitize(List_Iterator&lang;MemoryChunk&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Free(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lArray&lang;Physic::Ball2D&rang;::~lArray()
</UL>

<P><STRONG><a name="[24f]"></a>Allocator&lang;Physic::Ball2D&rang;::NewlArray(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, physic.o(t._ZN9AllocatorIN6Physic6Ball2DEE9NewlArrayEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Allocator&lang;Physic::Ball2D&rang;::NewlArray(unsigned) &rArr; Alloc(unsigned) &rArr; MemoryAllocator::New(unsigned) &rArr; List_Iterator&lang;MemoryChunk&rang;::Remove(MemoryChunk*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alloc(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lArray&lang;Physic::Ball2D&rang;::operator ()(unsigned)
</UL>

<P><STRONG><a name="[201]"></a>Allocator&lang;Physic::DustPart&rang;::New()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, physic.o(t._ZN9AllocatorIN6Physic8DustPartEE3NewEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alloc(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::StarDust::Add(float)
</UL>

<P><STRONG><a name="[239]"></a>T1* Allocator&lang;void&rang;::New&lang;Node&lang;Screen, unsigned char&rang;&rang;()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen.o(t._ZN9AllocatorIvE3NewI4NodeI6ScreenhEEEPT_v), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alloc(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Order&lang;Screen, unsigned char&rang;::operator +(Screen&)
</UL>

<P><STRONG><a name="[23f]"></a>T1* Allocator&lang;void&rang;::New&lang;Node&lang;Physic::DustPart, float&rang;&rang;()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, physic.o(t._ZN9AllocatorIvE3NewI4NodeIN6Physic8DustPartEfEEEPT_v), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alloc(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Order&lang;Physic::DustPart, float&rang;::operator +(Physic::DustPart&)
</UL>

<P><STRONG><a name="[231]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[31d]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[31e]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[31f]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[320]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[321]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[1e5]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::StarDust::SetUp(Physic::DustPart*, const tImage&, unsigned)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::StarDust::SetUp(Physic::DustPart*, unsigned)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2D::Test(float, float, float, float)
</UL>

<P><STRONG><a name="[251]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1fd]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::StarDust::SetUp(Physic::DustPart*, const tImage&, unsigned)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::StarDust::SetUp(Physic::DustPart*, unsigned)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>

<P><STRONG><a name="[254]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[22e]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[257]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1ff]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::StarDust::SetUp(Physic::DustPart*, const tImage&, unsigned)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>

<P><STRONG><a name="[258]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[253]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[256]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[230]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[259]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[22d]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[25b]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1e3]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::StarDust::SetUp(Physic::DustPart*, const tImage&, unsigned)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::StarDust::SetUp(Physic::DustPart*, unsigned)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2D::Test(float, float, float, float)
</UL>

<P><STRONG><a name="[25c]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[25d]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[90]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[322]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[323]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[252]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[87]"></a>__sti___8_main_cpp_c</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sti___8_main_cpp_c &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::StarDust::StarDust()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Bounce::Bounce()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2D::Ball2D()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Physic::Ball2DGroup::Ball2DGroup()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[e1]"></a>SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt(__DMA_HandleTypeDef*)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAEndTransmitReceive(__SPI_HandleTypeDef*)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt(__DMA_HandleTypeDef*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxCloseIRQHandler(__SPI_HandleTypeDef*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxCloseIRQHandler(__SPI_HandleTypeDef*)
</UL>

<P><STRONG><a name="[e5]"></a>SPI_TxCloseIRQHandler(__SPI_HandleTypeDef*)</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_TxCloseIRQHandler(__SPI_HandleTypeDef*) &rArr; SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxISR(__SPI_HandleTypeDef*)
</UL>

<P><STRONG><a name="[6b]"></a>SPI_TxISR(__SPI_HandleTypeDef*)</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_TxISR(__SPI_HandleTypeDef*) &rArr; SPI_TxCloseIRQHandler(__SPI_HandleTypeDef*) &rArr; SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxCloseIRQHandler(__SPI_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[e9]"></a>SPI_RxCloseIRQHandler(__SPI_HandleTypeDef*)</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_RxCloseIRQHandler(__SPI_HandleTypeDef*) &rArr; SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxISR(__SPI_HandleTypeDef*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2LinesRxISR(__SPI_HandleTypeDef*)
</UL>

<P><STRONG><a name="[6c]"></a>SPI_2LinesRxISR(__SPI_HandleTypeDef*)</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_2LinesRxISR(__SPI_HandleTypeDef*) &rArr; SPI_RxCloseIRQHandler(__SPI_HandleTypeDef*) &rArr; SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxCloseIRQHandler(__SPI_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>SPI_RxISR(__SPI_HandleTypeDef*)</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_RxISR(__SPI_HandleTypeDef*) &rArr; SPI_RxCloseIRQHandler(__SPI_HandleTypeDef*) &rArr; SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxCloseIRQHandler(__SPI_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>SPI_DMAError(__DMA_HandleTypeDef*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DMAError(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>SPI_DMATransmitCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_DMATransmitCplt(__DMA_HandleTypeDef*) &rArr; SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>SPI_DMAHalfTransmitCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DMAHalfTransmitCplt(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[ef]"></a>SPI_DMAEndTransmitReceive(__SPI_HandleTypeDef*)</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_DMAEndTransmitReceive(__SPI_HandleTypeDef*) &rArr; SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt(__DMA_HandleTypeDef*)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[74]"></a>SPI_DMAReceiveCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_DMAReceiveCplt(__DMA_HandleTypeDef*) &rArr; SPI_DMAEndTransmitReceive(__SPI_HandleTypeDef*) &rArr; SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAEndTransmitReceive(__SPI_HandleTypeDef*)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>SPI_DMAHalfReceiveCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DMAHalfReceiveCplt(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>SPI_DMATransmitReceiveCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_DMATransmitReceiveCplt(__DMA_HandleTypeDef*) &rArr; SPI_DMAEndTransmitReceive(__SPI_HandleTypeDef*) &rArr; SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAEndTransmitReceive(__SPI_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>SPI_DMAHalfTransmitReceiveCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DMAHalfTransmitReceiveCplt(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>TIM_DMAPeriodElapsedCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DMAPeriodElapsedCplt(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_tim.o(.text)
</UL>
<P><STRONG><a name="[148]"></a>TIM_OC4_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[147]"></a>TIM_OC3_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)</STRONG> (Thumb, 108 bytes, Stack size 4 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[145]"></a>TIM_OC1_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)</STRONG> (Thumb, 100 bytes, Stack size 4 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_ConfigChannel
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[14a]"></a>TIM_TI4_SetConfig(TIM_TypeDef*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[14d]"></a>TIM_TI3_SetConfig(TIM_TypeDef*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[14c]"></a>TIM_TI2_SetConfig(TIM_TypeDef*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_ConfigChannel
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[7b]"></a>TIM_DMATriggerCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DMATriggerCplt(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_tim.o(.text)
</UL>
<P><STRONG><a name="[155]"></a>TIM_ETR_SetConfig(TIM_TypeDef*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigOCrefClear
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef*, TIM_SlaveConfigTypeDef*)
</UL>

<P><STRONG><a name="[158]"></a>TIM_ITRx_SetConfig(TIM_TypeDef*, unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[157]"></a>TIM_TI1_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef*, TIM_SlaveConfigTypeDef*)
</UL>

<P><STRONG><a name="[159]"></a>TIM_TI2_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef*, TIM_SlaveConfigTypeDef*)
</UL>

<P><STRONG><a name="[15a]"></a>TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef*, TIM_SlaveConfigTypeDef*)</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig(TIM_TypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchronization_IT
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchronization
</UL>

<P><STRONG><a name="[168]"></a>TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OnePulseN_Stop_IT
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OnePulseN_Start_IT
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OnePulseN_Stop
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OnePulseN_Start
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Stop_DMA
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start_DMA
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Stop_IT
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start_IT
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Stop
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Stop_DMA
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Start_DMA
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Stop_IT
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Start_IT
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Stop
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Start
</UL>

<P><STRONG><a name="[88]"></a>__sti___10_device_cpp_c6d18d2d</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sti___10_device_cpp_c6d18d2d &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frame2DManager&lang;short&rang;::Frame2DManager()
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Iterator&lang;MemoryChunk&rang;::List_Iterator()
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDriverDef::LcdDriverDef(GPIO_TypeDef*, SpiSoftTypeDef&, unsigned)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TTY::__TTY()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Locker::Locker()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenManager::ScreenManager()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.init_array)
</UL>
<P><STRONG><a name="[1d8]"></a>STR::Reverse(char*)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dtostr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STR::itoa(int, char*, unsigned)
</UL>

<P><STRONG><a name="[25a]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[255]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
