; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\objects\physic.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\physic.d --cpu=Cortex-M4.fp --apcs=interwork -O1 -Otime --diag_suppress=9931 -I.\device\GUI\inc -I.\device\hardware\inc -I.\device\init\inc -I.\misc\inc -I.\user\inc -I..\tester_1.03 -I.\memory\inc -I.\drivers\inc -I.\res -I..\Embed -IE:\KeilProj\Embed\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F417xx -DSTM32F417xx -DColorDepthBpp16 -Dtftili9486 -DSOFTWARE_GL -DGUI_ALLIGN_LAYSIZE_TO_POW2 --omf_browse=.\objects\physic.crf misc\src\physic.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=3

                  _ZN6Physic6BounceC2Ev                  ; Alternate entry point ; Physic::Bounce::Bounce__sub_object()
                  _ZN6Physic6BounceC1Ev PROC ; Physic::Bounce::Bounce()
;;;4      
;;;5      Bounce::Bounce () {}
;;;6      	
000000  4770              BX       lr
                          ENDP

                  _ZN6Physic6BounceclEfffff PROC ; Physic::Bounce::operator ()(float, float, float, float, float)
;;;7      void Bounce::operator () (float w0, float g, float air, float dt, float m)
000002  ed801a08          VSTR     s2,[r0,#0x20]
;;;8      {
;;;9      	this->Air = air;
;;;10     	this->W0 = w0;
000006  ed800a05          VSTR     s0,[r0,#0x14]
;;;11     	this->W = w0;
00000a  ed800a04          VSTR     s0,[r0,#0x10]
;;;12     	this->dt = dt;
00000e  edc01a07          VSTR     s3,[r0,#0x1c]
;;;13     	this->g = g;
000012  edc00a06          VSTR     s1,[r0,#0x18]
;;;14     	this->E = w0;
000016  ed800a02          VSTR     s0,[r0,#8]
;;;15     	this->K = 0;
00001a  ed9f1af8          VLDR     s2,|L1.1020|
00001e  ed801a03          VSTR     s2,[r0,#0xc]
;;;16     	this->S = w0 / (g * m);
000022  ee600a82          VMUL.F32 s1,s1,s4
000026  eec01a20          VDIV.F32 s3,s0,s1
00002a  edc01a01          VSTR     s3,[r0,#4]
;;;17     	this->m = m;
00002e  ed802a09          VSTR     s4,[r0,#0x24]
;;;18     	this->V = 0;
000032  ed801a00          VSTR     s2,[r0,#0]
;;;19     	this->sign = 1.0F;
000036  eeb70a00          VMOV.F32 s0,#1.00000000
00003a  ed800a0a          VSTR     s0,[r0,#0x28]
;;;20     }
00003e  4770              BX       lr
;;;21     
                          ENDP

                  _ZN6Physic6Bounce4StepEv PROC ; Physic::Bounce::Step()
;;;22     float Bounce::Step ()
000040  ed900a04          VLDR     s0,[r0,#0x10]
;;;23     {
;;;24     	E = W - K;
000044  ed902a03          VLDR     s4,[r0,#0xc]
000048  ee700a42          VSUB.F32 s1,s0,s4
00004c  edc00a02          VSTR     s1,[r0,#8]
;;;25     	S = E / (m * g);
000050  ed903a09          VLDR     s6,[r0,#0x24]
000054  ed901a06          VLDR     s2,[r0,#0x18]
000058  ee631a01          VMUL.F32 s3,s6,s2
00005c  eec02aa1          VDIV.F32 s5,s1,s3
000060  edc02a01          VSTR     s5,[r0,#4]
;;;26     	V = V + g * dt * sign;
000064  edd03a07          VLDR     s7,[r0,#0x1c]
000068  edd01a0a          VLDR     s3,[r0,#0x28]
00006c  edd02a00          VLDR     s5,[r0,#0]
000070  ee214a23          VMUL.F32 s8,s2,s7
000074  ee442a21          VMLA.F32 s5,s8,s3
000078  edc02a00          VSTR     s5,[r0,#0]
;;;27     	K = K + m * V * g * dt * sign;
00007c  ee632a22          VMUL.F32 s5,s6,s5
000080  ee221a81          VMUL.F32 s2,s5,s2
000084  ee211a23          VMUL.F32 s2,s2,s7
000088  ee012a21          VMLA.F32 s4,s2,s3
00008c  ed802a03          VSTR     s4,[r0,#0xc]
;;;28     			
;;;29     	if (E <= 0 && sign > 0) {
;;;30     		S = 0;
000090  ed9f1ada          VLDR     s2,|L1.1020|
000094  eef50ac0          VCMPE.F32 s1,#0.0               ;29
000098  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;29
00009c  d80c              BHI      |L1.184|
00009e  eef51ac0          VCMPE.F32 s3,#0.0               ;29
0000a2  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;29
0000a6  dd07              BLE      |L1.184|
0000a8  ed801a01          VSTR     s2,[r0,#4]
;;;31     		K = W;
0000ac  ed800a03          VSTR     s0,[r0,#0xc]
;;;32     		sign = -1.0F;
0000b0  eeff0a00          VMOV.F32 s1,#-1.00000000
0000b4  edc00a0a          VSTR     s1,[r0,#0x28]
                  |L1.184|
;;;33     	} else {}
;;;34     	if (K <= 0 && sign < 0) {
0000b8  edd00a03          VLDR     s1,[r0,#0xc]
0000bc  eef50ac0          VCMPE.F32 s1,#0.0
0000c0  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000c4  d80e              BHI      |L1.228|
0000c6  edd00a0a          VLDR     s1,[r0,#0x28]
0000ca  eef50ac0          VCMPE.F32 s1,#0.0
0000ce  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000d2  d207              BCS      |L1.228|
;;;35     		sign = 1.0F;
0000d4  eef70a00          VMOV.F32 s1,#1.00000000
0000d8  edc00a0a          VSTR     s1,[r0,#0x28]
;;;36     		K = 0;
0000dc  ed801a03          VSTR     s2,[r0,#0xc]
;;;37     		V = 0;
0000e0  ed801a00          VSTR     s2,[r0,#0]
                  |L1.228|
;;;38     	}
;;;39     			
;;;40     	W -= 5;
0000e4  eef10a04          VMOV.F32 s1,#5.00000000
0000e8  ee300a60          VSUB.F32 s0,s0,s1
0000ec  ed800a04          VSTR     s0,[r0,#0x10]
;;;41     	if (W < 0) {
0000f0  eeb50ac0          VCMPE.F32 s0,#0.0
0000f4  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000f8  d203              BCS      |L1.258|
;;;42     	  W = W0;
0000fa  ed900a05          VLDR     s0,[r0,#0x14]
0000fe  ed800a04          VSTR     s0,[r0,#0x10]
                  |L1.258|
;;;43     	} else {}	
;;;44     	return S;
000102  ed900a01          VLDR     s0,[r0,#4]
;;;45     }
000106  4770              BX       lr
;;;46     
                          ENDP

                  _ZN6Physic6Bounce4StepEf PROC ; Physic::Bounce::Step(float)
;;;47     float Bounce::Step(float g)
000108  ed800a06          VSTR     s0,[r0,#0x18]
;;;48     {
;;;49     	this->g = g;
;;;50     	return this->Step();
00010c  e7fe              B        _ZN6Physic6Bounce4StepEv ; Physic::Bounce::Step()
;;;51     }
;;;52     
                          ENDP

                  _ZN6Physic6Ball2DC2Ev                  ; Alternate entry point ; Physic::Ball2D::Ball2D__sub_object()
                  _ZN6Physic6Ball2DC1Ev PROC ; Physic::Ball2D::Ball2D()
;;;56     
;;;57     Ball2D::Ball2D () {}
;;;58         
00010e  4770              BX       lr
                          ENDP

                  _ZN6Physic6Ball2D3DirEf PROC ; Physic::Ball2D::Dir(float)
;;;226    
;;;227    void Ball2D::Dir (float a)
000110  b510              PUSH     {r4,lr}
;;;228    {
000112  4604              MOV      r4,r0
;;;229        A = a;
000114  ed840a0b          VSTR     s0,[r4,#0x2c]
000118  f7fffffe          BL       __hardfp_sinf
;;;230    	  sina = sin(A);
00011c  ed840a0c          VSTR     s0,[r4,#0x30]
;;;231    	  cosa = cos(A);
000120  ed940a0b          VLDR     s0,[r4,#0x2c]
000124  f7fffffe          BL       __hardfp_cosf
000128  ed840a0d          VSTR     s0,[r4,#0x34]
;;;232        Vx = V * sina;
00012c  edd40a04          VLDR     s1,[r4,#0x10]
000130  ed941a0c          VLDR     s2,[r4,#0x30]
000134  ee201a81          VMUL.F32 s2,s1,s2
000138  ed841a05          VSTR     s2,[r4,#0x14]
;;;233        Vy = V * cosa;
00013c  ee200a80          VMUL.F32 s0,s1,s0
000140  ed840a06          VSTR     s0,[r4,#0x18]
;;;234    }
000144  bd10              POP      {r4,pc}
;;;235    
                          ENDP

                  _ZN6Physic6Ball2DclEfff PROC ; Physic::Ball2D::operator ()(float, float, float)
;;;58         
;;;59     void Ball2D::operator () (float m, float p, float a)
000146  eef01a40          VMOV.F32 s3,s0
;;;60     { 
00014a  eeb00a41          VMOV.F32 s0,s2
;;;61         this->dt = 1.0F;
00014e  eeb72a00          VMOV.F32 s4,#1.00000000
000152  ed802a03          VSTR     s4,[r0,#0xc]
;;;62         this->A = a;
000156  ed800a0b          VSTR     s0,[r0,#0x2c]
;;;63         this->m  = m;
00015a  edc01a0a          VSTR     s3,[r0,#0x28]
;;;64         this->p  = p;
00015e  edc00a09          VSTR     s1,[r0,#0x24]
;;;65         this->Sx = 0;
000162  ed9f1aa6          VLDR     s2,|L1.1020|
000166  ed801a07          VSTR     s2,[r0,#0x1c]
;;;66         this->Sy = 0;
00016a  ed801a08          VSTR     s2,[r0,#0x20]
;;;67         V = p / m;
00016e  ee801aa1          VDIV.F32 s2,s1,s3
000172  ed801a04          VSTR     s2,[r0,#0x10]
;;;68     	/*
;;;69         this->W = 1000;
;;;70     	  this->K = 0.0F;
;;;71     	  this->E = W - K;
;;;72     	  this->g = 1.0F;
;;;73     	  this->Vg = 0.0F;
;;;74     	  this->h = E / (m * g);
;;;75     	*/
;;;76         this->Dir(A);
000176  e7fe              B        _ZN6Physic6Ball2D3DirEf ; Physic::Ball2D::Dir(float)
;;;77     }
;;;78     
                          ENDP

                  _ZN6Physic6Ball2D4TestE3b2DRf PROC ; Physic::Ball2D::Test(b2D, float&)
;;;175    
;;;176    uint32_t Ball2D::Test (b2D r, float &a)
000178  b40f              PUSH     {r0-r3}
;;;177    {
;;;178       uint32_t tst = 0;
00017a  2100              MOVS     r1,#0
;;;179         if (Sx < m) {
00017c  edd00a07          VLDR     s1,[r0,#0x1c]
000180  ed900a0a          VLDR     s0,[r0,#0x28]
000184  eef40ac0          VCMPE.F32 s1,s0
000188  eef1fa10          VMRS     APSR_nzcv,FPSCR
00018c  d209              BCS      |L1.418|
;;;180            Sx = m;
00018e  ed800a07          VSTR     s0,[r0,#0x1c]
;;;181            a = -A;
000192  ed900a0b          VLDR     s0,[r0,#0x2c]
000196  eeb10a40          VNEG.F32 s0,s0
00019a  ed830a00          VSTR     s0,[r3,#0]
;;;182            tst = 1;
00019e  2101              MOVS     r1,#1
0001a0  e043              B        |L1.554|
                  |L1.418|
;;;183        } else if (Sx > r.w) {
0001a2  f9bd2008          LDRSH    r2,[sp,#8]
0001a6  ee012a10          VMOV     s2,r2
0001aa  eeb81ac1          VCVT.F32.S32 s2,s2
0001ae  eef40ac1          VCMPE.F32 s1,s2
0001b2  eef1fa10          VMRS     APSR_nzcv,FPSCR
0001b6  dd0d              BLE      |L1.468|
;;;184            Sx = r.w;
0001b8  ee002a10          VMOV     s0,r2
0001bc  eeb80ac0          VCVT.F32.S32 s0,s0
0001c0  ed800a07          VSTR     s0,[r0,#0x1c]
;;;185            a = -A;
0001c4  ed900a0b          VLDR     s0,[r0,#0x2c]
0001c8  eeb10a40          VNEG.F32 s0,s0
0001cc  ed830a00          VSTR     s0,[r3,#0]
;;;186            tst = 2;
0001d0  2102              MOVS     r1,#2
0001d2  e02a              B        |L1.554|
                  |L1.468|
;;;187        } else if (Sy < m) {
0001d4  edd00a08          VLDR     s1,[r0,#0x20]
;;;188            Sy = m;
;;;189            a = - (PI_const + A);
0001d8  ed9f1a89          VLDR     s2,|L1.1024|
0001dc  eef40ac0          VCMPE.F32 s1,s0                 ;187
0001e0  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;187
0001e4  d209              BCS      |L1.506|
0001e6  ed800a08          VSTR     s0,[r0,#0x20]         ;188
0001ea  ed900a0b          VLDR     s0,[r0,#0x2c]
0001ee  ee310a40          VSUB.F32 s0,s2,s0
0001f2  ed830a00          VSTR     s0,[r3,#0]
;;;190            tst = 3;
0001f6  2103              MOVS     r1,#3
0001f8  e017              B        |L1.554|
                  |L1.506|
;;;191        } else if (Sy > r.h) {
0001fa  f9bd200a          LDRSH    r2,[sp,#0xa]
0001fe  ee002a10          VMOV     s0,r2
000202  eeb80ac0          VCVT.F32.S32 s0,s0
000206  eef40ac0          VCMPE.F32 s1,s0
00020a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00020e  dd0c              BLE      |L1.554|
;;;192            Sy = r.h;
000210  ee002a10          VMOV     s0,r2
000214  eeb80ac0          VCVT.F32.S32 s0,s0
000218  ed800a08          VSTR     s0,[r0,#0x20]
;;;193            a = - (PI_const + A);
00021c  ed900a0b          VLDR     s0,[r0,#0x2c]
000220  ee310a40          VSUB.F32 s0,s2,s0
000224  ed830a00          VSTR     s0,[r3,#0]
;;;194            tst = 4;
000228  2104              MOVS     r1,#4
                  |L1.554|
;;;195        } else {}
;;;196    
;;;197        return tst;
00022a  4608              MOV      r0,r1
;;;198    }
00022c  b004              ADD      sp,sp,#0x10
00022e  4770              BX       lr
;;;199    
                          ENDP

                  _ZN6Physic6Ball2D4StepE3b2D PROC ; Physic::Ball2D::Step(b2D)
;;;78     
;;;79     f2P Ball2D::Step (b2D r)
000230  b537              PUSH     {r0-r2,r4,r5,lr}
;;;80     {
000232  4604              MOV      r4,r0
;;;81         Sx = (Sx + Vx * dt);
000234  edd40a07          VLDR     s1,[r4,#0x1c]
000238  ed941a05          VLDR     s2,[r4,#0x14]
00023c  ed940a03          VLDR     s0,[r4,#0xc]
000240  ee410a00          VMLA.F32 s1,s2,s0
000244  edc40a07          VSTR     s1,[r4,#0x1c]
;;;82         Sy = (Sy + Vy * dt);
000248  edd40a08          VLDR     s1,[r4,#0x20]
00024c  ed941a06          VLDR     s2,[r4,#0x18]
000250  ee410a00          VMLA.F32 s1,s2,s0
000254  edc40a08          VSTR     s1,[r4,#0x20]
;;;83     	  
;;;84         uint32_t t = this->Test(r, A);
000258  f104032c          ADD      r3,r4,#0x2c
00025c  4620              MOV      r0,r4
00025e  9a02              LDR      r2,[sp,#8]
000260  9901              LDR      r1,[sp,#4]
000262  f7fffffe          BL       _ZN6Physic6Ball2D4TestE3b2DRf ; Physic::Ball2D::Test(b2D, float&)
;;;85         if (t) {
000266  b120              CBZ      r0,|L1.626|
;;;86     			  switch (0) {
;;;87     					case 1: if (V > 5.0F) {
;;;88     							        V -= 0.1F;
;;;89                       } else {}
;;;90     						break;
;;;91     					case 2: if (V < 30.0F) {
;;;92     							        V += 0.3F;
;;;93                       } else {}
;;;94     						break;	
;;;95               default: break;													
;;;96     				}
;;;97     				this->Dir(A);
000268  ed940a0b          VLDR     s0,[r4,#0x2c]
00026c  4620              MOV      r0,r4
00026e  f7fffffe          BL       _ZN6Physic6Ball2D3DirEf ; Physic::Ball2D::Dir(float)
                  |L1.626|
;;;98         } else {}
;;;99         
;;;100        f2P point = {Sx, Sy};
000272  ed940a07          VLDR     s0,[r4,#0x1c]
000276  edd40a08          VLDR     s1,[r4,#0x20]
;;;101        return point;
;;;102    }
00027a  b003              ADD      sp,sp,#0xc
00027c  bd30              POP      {r4,r5,pc}
;;;103    
                          ENDP

                  _ZN6Physic6Ball2D4StepEv PROC ; Physic::Ball2D::Step()
;;;104    void Ball2D::Step ()
00027e  edd00a07          VLDR     s1,[r0,#0x1c]
;;;105    {   
;;;106        Sx = Sx + Vx * dt;
000282  ed901a05          VLDR     s2,[r0,#0x14]
000286  ed900a03          VLDR     s0,[r0,#0xc]
00028a  ee410a00          VMLA.F32 s1,s2,s0
00028e  edc00a07          VSTR     s1,[r0,#0x1c]
;;;107        Sy = Sy + Vy * dt;
000292  edd00a08          VLDR     s1,[r0,#0x20]
000296  ed901a06          VLDR     s2,[r0,#0x18]
00029a  ee410a00          VMLA.F32 s1,s2,s0
00029e  edc00a08          VSTR     s1,[r0,#0x20]
;;;108    }
0002a2  4770              BX       lr
;;;109    
                          ENDP

                  _ZN6Physic6Ball2D4TestEffff PROC ; Physic::Ball2D::Test(float, float, float, float)
;;;201    
;;;202    bool Ball2D::Test (float x0, float y0, float x, float y)
0002a4  b570              PUSH     {r4-r6,lr}
;;;203    {
0002a6  4604              MOV      r4,r0
0002a8  ed2d8b08          VPUSH    {d8-d11}
0002ac  eef08a40          VMOV.F32 s17,s0
0002b0  eeb09a60          VMOV.F32 s18,s1
0002b4  eef09a41          VMOV.F32 s19,s2
0002b8  eeb0aa61          VMOV.F32 s20,s3
;;;204        bool tst = false;
;;;205        float xa = Vx + Sx;
0002bc  ed940a05          VLDR     s0,[r4,#0x14]
0002c0  ed942a07          VLDR     s4,[r4,#0x1c]
0002c4  ee70aa02          VADD.F32 s21,s0,s4
;;;206        float ya = Vy + Sy;
0002c8  ed940a06          VLDR     s0,[r4,#0x18]
0002cc  edd42a08          VLDR     s5,[r4,#0x20]
0002d0  ee30ba22          VADD.F32 s22,s0,s5
;;;207        float a = 0.0F;
0002d4  ed9f8a49          VLDR     s16,|L1.1020|
;;;208        
;;;209        tst = gTest::TestLineIntersect(x0, y0, x, y, Sx, Sy, xa, ya);
0002d8  eeb03a6a          VMOV.F32 s6,s21
0002dc  eef01a4a          VMOV.F32 s3,s20
0002e0  eef03a4b          VMOV.F32 s7,s22
0002e4  eeb01a69          VMOV.F32 s2,s19
0002e8  eef00a49          VMOV.F32 s1,s18
0002ec  eeb00a68          VMOV.F32 s0,s17
0002f0  f7fffffe          BL       _ZN5gTest17TestLineIntersectEffffffff ; gTest::TestLineIntersect(float, float, float, float, float, float, float, float)
0002f4  4605              MOV      r5,r0
;;;210        if (!tst) {
0002f6  b995              CBNZ     r5,|L1.798|
;;;211            tst = gTest::TestLineIntersect(x0, y0, x, y, xa, ya, Sx, Sy);
0002f8  edd43a08          VLDR     s7,[r4,#0x20]
0002fc  ed943a07          VLDR     s6,[r4,#0x1c]
000300  eef02a4b          VMOV.F32 s5,s22
000304  eeb02a6a          VMOV.F32 s4,s21
000308  eef01a4a          VMOV.F32 s3,s20
00030c  eeb01a69          VMOV.F32 s2,s19
000310  eef00a49          VMOV.F32 s1,s18
000314  eeb00a68          VMOV.F32 s0,s17
000318  f7fffffe          BL       _ZN5gTest17TestLineIntersectEffffffff ; gTest::TestLineIntersect(float, float, float, float, float, float, float, float)
00031c  4605              MOV      r5,r0
                  |L1.798|
;;;212        } else {}
;;;213        if (tst) {
00031e  b33d              CBZ      r5,|L1.880|
;;;214          if (y0 == y) {
000320  eeb49a4a          VCMP.F32 s18,s20
000324  eef1fa10          VMRS     APSR_nzcv,FPSCR
000328  d01b              BEQ      |L1.866|
;;;215              a = 0;
;;;216          } else if (x0 == x) {
00032a  eef48a69          VCMP.F32 s17,s19
00032e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000332  d102              BNE      |L1.826|
;;;217              a = -PI_const;
000334  ed9f8a32          VLDR     s16,|L1.1024|
000338  e013              B        |L1.866|
                  |L1.826|
;;;218          } else {
;;;219              a = atan(double((y - y0) / (x - x0)));
00033a  ee7a0a49          VSUB.F32 s1,s20,s18
00033e  ee391ae8          VSUB.F32 s2,s19,s17
000342  ee800a81          VDIV.F32 s0,s1,s2
000346  ee100a10          VMOV     r0,s0
00034a  f7fffffe          BL       __aeabi_f2d
00034e  ec410b10          VMOV     d0,r0,r1
000352  f7fffffe          BL       __hardfp_atan
000356  ec510b10          VMOV     r0,r1,d0
00035a  f7fffffe          BL       __aeabi_d2f
00035e  ee080a10          VMOV     s16,r0
                  |L1.866|
;;;220          }
;;;221          this->Dir(-A + a);  
000362  ed940a0b          VLDR     s0,[r4,#0x2c]
000366  4620              MOV      r0,r4
000368  ee380a40          VSUB.F32 s0,s16,s0
00036c  f7fffffe          BL       _ZN6Physic6Ball2D3DirEf ; Physic::Ball2D::Dir(float)
                  |L1.880|
;;;222        } else {}
;;;223        
;;;224        return tst;
;;;225    }
000370  ecbd8b08          VPOP     {d8-d11}
000374  4628              MOV      r0,r5                 ;224
000376  bd70              POP      {r4-r6,pc}
;;;226    
                          ENDP

                  _ZN6Physic6Ball2D3DirEff PROC ; Physic::Ball2D::Dir(float, float)
;;;235    
;;;236    void Ball2D::Dir (float a, float b)
000378  ed800a0c          VSTR     s0,[r0,#0x30]
;;;237    {
;;;238    	  sina = a;
;;;239    	  cosa = b;
00037c  edc00a0d          VSTR     s1,[r0,#0x34]
;;;240        Vx = V * sina;
000380  ed901a04          VLDR     s2,[r0,#0x10]
000384  ee210a00          VMUL.F32 s0,s2,s0
000388  ed800a05          VSTR     s0,[r0,#0x14]
;;;241        Vy = V * cosa;
00038c  ee210a20          VMUL.F32 s0,s2,s1
000390  ed800a06          VSTR     s0,[r0,#0x18]
;;;242    }
000394  4770              BX       lr
;;;243    
                          ENDP

                  _ZN6Physic6Ball2D4TestERS0_ PROC ; Physic::Ball2D::Test(Physic::Ball2D&)
;;;109    
;;;110    bool Ball2D::Test (Ball2D &ball)
000396  b088              SUB      sp,sp,#0x20
;;;111    {
;;;112        f2D r = {ball.Sx, ball.Sy, ball.m, ball.m};
000398  ed912a07          VLDR     s4,[r1,#0x1c]
00039c  ed8d2a04          VSTR     s4,[sp,#0x10]
0003a0  edd12a08          VLDR     s5,[r1,#0x20]
0003a4  edcd2a05          VSTR     s5,[sp,#0x14]
0003a8  ed913a0a          VLDR     s6,[r1,#0x28]
0003ac  ed8d3a06          VSTR     s6,[sp,#0x18]
0003b0  ed8d3a07          VSTR     s6,[sp,#0x1c]
;;;113    		f2D r0 = {Sx, Sy, this->m, this->m};
0003b4  ed900a07          VLDR     s0,[r0,#0x1c]
0003b8  ed8d0a00          VSTR     s0,[sp,#0]
0003bc  edd00a08          VLDR     s1,[r0,#0x20]
0003c0  edcd0a01          VSTR     s1,[sp,#4]
0003c4  ed901a0a          VLDR     s2,[r0,#0x28]
0003c8  ed8d1a02          VSTR     s2,[sp,#8]
0003cc  ed8d1a03          VSTR     s2,[sp,#0xc]
;;;114    		if (Sx >= ball.Sx) {
;;;115    			if ((Vx > 0)) {
0003d0  ed904a05          VLDR     s8,[r0,#0x14]
0003d4  eeb40ac2          VCMPE.F32 s0,s4                 ;114
0003d8  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;114
0003dc  db19              BLT      |L1.1042|
0003de  eeb54ac0          VCMPE.F32 s8,#0.0
0003e2  eef1fa10          VMRS     APSR_nzcv,FPSCR
0003e6  dd29              BLE      |L1.1084|
;;;116    				if ((ball.Vx < 0)) {
0003e8  edd14a05          VLDR     s9,[r1,#0x14]
0003ec  eef54ac0          VCMPE.F32 s9,#0.0
0003f0  eef1fa10          VMRS     APSR_nzcv,FPSCR
0003f4  d206              BCS      |L1.1028|
;;;117    				  return false;
0003f6  2000              MOVS     r0,#0
                  |L1.1016|
;;;118    				} else if (Vx > ball.Vx){
;;;119    					return false;
;;;120    				}
;;;121    			} else {}
;;;122    		} else {
;;;123    			if ((Vx < 0)) {
;;;124    				if ((ball.Vx > 0)) {
;;;125    				  return false;
;;;126    				} else if (Vx < ball.Vx){
;;;127    					return false;
;;;128    				}
;;;129    			} else {}
;;;130    		}
;;;131    				
;;;132    		if (Sy >= ball.Sy) {
;;;133    			if ((Vy > 0)) {
;;;134    				if ((ball.Vy < 0)) {
;;;135    				  return false;
;;;136    				} else if (Vy > ball.Vy){
;;;137    					return false;
;;;138    				}
;;;139    			} else {}
;;;140    		} else {
;;;141    			if ((Vy < 0)) {
;;;142    				if ((ball.Vy > 0)) {
;;;143    				  return false;
;;;144    				} else if (Vy < ball.Vy){
;;;145    					return false;
;;;146    				}
;;;147    			} else {}
;;;148    		}
;;;149        return (gTest::TestBoxBounds(r0, r)); 
;;;150    }
0003f8  b008              ADD      sp,sp,#0x20
0003fa  4770              BX       lr
                  |L1.1020|
0003fc  00000000          DCFS     0x00000000 ; 0
                  |L1.1024|
000400  c0490fdb          DCFS     0xc0490fdb ; -3.1415927410125732
                  |L1.1028|
000404  eeb44ae4          VCMPE.F32 s8,s9                 ;118
000408  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;118
00040c  dd16              BLE      |L1.1084|
00040e  2000              MOVS     r0,#0                 ;119
000410  e7f2              B        |L1.1016|
                  |L1.1042|
000412  eeb54ac0          VCMPE.F32 s8,#0.0               ;123
000416  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;123
00041a  d20f              BCS      |L1.1084|
00041c  edd14a05          VLDR     s9,[r1,#0x14]         ;124
000420  eef54ac0          VCMPE.F32 s9,#0.0               ;124
000424  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;124
000428  dd01              BLE      |L1.1070|
00042a  2000              MOVS     r0,#0                 ;125
00042c  e7e4              B        |L1.1016|
                  |L1.1070|
00042e  eeb44ae4          VCMPE.F32 s8,s9                 ;126
000432  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;126
000436  d201              BCS      |L1.1084|
000438  2000              MOVS     r0,#0                 ;127
00043a  e7dd              B        |L1.1016|
                  |L1.1084|
00043c  eef01a60          VMOV.F32 s3,s1                 ;132
000440  eef03a62          VMOV.F32 s7,s5                 ;132
000444  eef41ae3          VCMPE.F32 s3,s7                 ;132
000448  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;132
00044c  db16              BLT      |L1.1148|
00044e  edd04a06          VLDR     s9,[r0,#0x18]         ;133
000452  eef54ac0          VCMPE.F32 s9,#0.0               ;133
000456  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;133
00045a  dd26              BLE      |L1.1194|
00045c  ed914a06          VLDR     s8,[r1,#0x18]         ;134
000460  eeb54ac0          VCMPE.F32 s8,#0.0               ;134
000464  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;134
000468  d201              BCS      |L1.1134|
00046a  2000              MOVS     r0,#0                 ;135
00046c  e7c4              B        |L1.1016|
                  |L1.1134|
00046e  eef44ac4          VCMPE.F32 s9,s8                 ;136
000472  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;136
000476  dd18              BLE      |L1.1194|
000478  2000              MOVS     r0,#0                 ;137
00047a  e7bd              B        |L1.1016|
                  |L1.1148|
00047c  ed904a06          VLDR     s8,[r0,#0x18]         ;141
000480  eeb54ac0          VCMPE.F32 s8,#0.0               ;141
000484  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;141
000488  d20f              BCS      |L1.1194|
00048a  edd14a06          VLDR     s9,[r1,#0x18]         ;142
00048e  eef54ac0          VCMPE.F32 s9,#0.0               ;142
000492  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;142
000496  dd01              BLE      |L1.1180|
000498  2000              MOVS     r0,#0                 ;143
00049a  e7ad              B        |L1.1016|
                  |L1.1180|
00049c  eeb44ae4          VCMPE.F32 s8,s9                 ;144
0004a0  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;144
0004a4  d201              BCS      |L1.1194|
0004a6  2000              MOVS     r0,#0                 ;145
0004a8  e7a6              B        |L1.1016|
                  |L1.1194|
0004aa  eef03a43          VMOV.F32 s7,s6                 ;149
0004ae  eef01a41          VMOV.F32 s3,s2                 ;149
0004b2  b008              ADD      sp,sp,#0x20           ;149
0004b4  f7ffbffe          B.W      _ZN5gTest13TestBoxBoundsE3f2DS0_ ; gTest::TestBoxBounds(f2D, f2D)
;;;151    
                          ENDP

                  _ZN6Physic6Ball2D5SwapPERS0_ PROC ; Physic::Ball2D::SwapP(Physic::Ball2D&)
;;;152    bool Ball2D::SwapP (Ball2D &ball)
0004b8  b500              PUSH     {lr}
;;;153    {
0004ba  4602              MOV      r2,r0
0004bc  4608              MOV      r0,r1
;;;154    	
;;;155        float ta, tV, tm, sa, ca; 
;;;156    	  
;;;157    	  tV =  ball.V;
0004be  ed901a04          VLDR     s2,[r0,#0x10]
;;;158    	  ta =  ball.A;
0004c2  edd02a0b          VLDR     s5,[r0,#0x2c]
;;;159    	  tm = ball.m; 
0004c6  edd01a0a          VLDR     s3,[r0,#0x28]
;;;160    	  sa = ball.sina;
0004ca  edd03a0c          VLDR     s7,[r0,#0x30]
;;;161    	  ca = ball.cosa;
0004ce  ed904a0d          VLDR     s8,[r0,#0x34]
;;;162    	  float km = 1 / (ball.m + m);
0004d2  ed922a0a          VLDR     s4,[r2,#0x28]
0004d6  eef70a00          VMOV.F32 s1,#1.00000000
0004da  ee310a82          VADD.F32 s0,s3,s4
0004de  ee803a80          VDIV.F32 s6,s1,s0
;;;163    	  float k = (V + tV) * km;
0004e2  ed920a04          VLDR     s0,[r2,#0x10]
0004e6  ee300a01          VADD.F32 s0,s0,s2
0004ea  ee201a03          VMUL.F32 s2,s0,s6
;;;164    	  
;;;165    	  ball.V  = k * m;
0004ee  ee220a01          VMUL.F32 s0,s4,s2
0004f2  ed800a04          VSTR     s0,[r0,#0x10]
;;;166    	  V  =  k * tm;
0004f6  ee210a21          VMUL.F32 s0,s2,s3
0004fa  ed820a04          VSTR     s0,[r2,#0x10]
;;;167    	  ball.p = ball.m * ball.V;
0004fe  ed900a0a          VLDR     s0,[r0,#0x28]
000502  edd00a04          VLDR     s1,[r0,#0x10]
000506  ee200a20          VMUL.F32 s0,s0,s1
00050a  ed800a09          VSTR     s0,[r0,#0x24]
;;;168    	  p = m * V;
00050e  ed920a0a          VLDR     s0,[r2,#0x28]
000512  edd20a04          VLDR     s1,[r2,#0x10]
000516  ee200a20          VMUL.F32 s0,s0,s1
00051a  ed820a09          VSTR     s0,[r2,#0x24]
;;;169    	  ball.A = A;
00051e  ed920a0b          VLDR     s0,[r2,#0x2c]
000522  ed800a0b          VSTR     s0,[r0,#0x2c]
;;;170    	  A = ta;
000526  edc22a0b          VSTR     s5,[r2,#0x2c]
;;;171    	  ball.Dir(sina, cosa);
00052a  edd20a0d          VLDR     s1,[r2,#0x34]
00052e  ed920a0c          VLDR     s0,[r2,#0x30]
000532  f7fffffe          BL       _ZN6Physic6Ball2D3DirEff ; Physic::Ball2D::Dir(float, float)
;;;172    	  this->Dir(sa, ca);
000536  eef00a44          VMOV.F32 s1,s8
00053a  eeb00a63          VMOV.F32 s0,s7
00053e  4610              MOV      r0,r2
000540  f7fffffe          BL       _ZN6Physic6Ball2D3DirEff ; Physic::Ball2D::Dir(float, float)
;;;173        return false;
000544  2000              MOVS     r0,#0
;;;174    }
000546  bd00              POP      {pc}
;;;175    
                          ENDP

                  _ZN6Physic11Ball2DGroupC2Ev                  ; Alternate entry point ; Physic::Ball2DGroup::Ball2DGroup__sub_object()
                  _ZN6Physic11Ball2DGroupC1Ev PROC ; Physic::Ball2DGroup::Ball2DGroup()
;;;245    
;;;246    Ball2DGroup::Ball2DGroup () {}
;;;247        
000548  b510              PUSH     {r4,lr}
00054a  49fb              LDR      r1,|L1.2360|
00054c  6001              STR      r1,[r0,#0]
00054e  3014              ADDS     r0,r0,#0x14
000550  f7fffffe          BL       _ZN13List_IteratorIN6Physic6Ball2DEEC1Ev ; List_Iterator<Physic::Ball2D>::List_Iterator()
000554  3814              SUBS     r0,r0,#0x14
000556  bd10              POP      {r4,pc}
                          ENDP

                  _ZN6Physic11Ball2DGroupclE3b2Dff PROC ; Physic::Ball2DGroup::operator ()(b2D, float, float)
;;;248    void Ball2DGroup::operator () (b2D r, float m, float p)
000558  b407              PUSH     {r0-r2}
;;;249    {
00055a  ed2d0b02          VPUSH    {d0}
;;;250        this->Rect = r;
00055e  9a04              LDR      r2,[sp,#0x10]
000560  9903              LDR      r1,[sp,#0xc]
000562  6102              STR      r2,[r0,#0x10]
000564  60c1              STR      r1,[r0,#0xc]
;;;251        this->p = p;
000566  edc00a01          VSTR     s1,[r0,#4]
;;;252        this->m = m;    
00056a  ed800a02          VSTR     s0,[r0,#8]
;;;253    }
00056e  b005              ADD      sp,sp,#0x14
000570  4770              BX       lr
;;;254    
                          ENDP

                  _ZN6Physic11Ball2DGroup4StepEv PROC ; Physic::Ball2DGroup::Step()
;;;255    void Ball2DGroup::Step ()
000572  e92d43f0          PUSH     {r4-r9,lr}
;;;256    {
000576  b083              SUB      sp,sp,#0xc
000578  4604              MOV      r4,r0
;;;257        uint32_t t = this->Balls.Contain();
00057a  f1040014          ADD      r0,r4,#0x14
00057e  f7fffffe          BL       _ZN13List_IteratorIN6Physic6Ball2DEE7ContainEv ; List_Iterator<Physic::Ball2D>::Contain()
000582  4606              MOV      r6,r0
;;;258    	  lArray<Ball2D> *array = this->New<lArray<Ball2D> >();
000584  4620              MOV      r0,r4
000586  f7fffffe          BL       _ZN9AllocatorIN6Physic6Ball2DEE3NewI6lArrayIS1_EEEPT_v ; T1* Allocator<Physic::Ball2D>::New<lArray<Physic::Ball2D>>()
00058a  4680              MOV      r8,r0
;;;259    	  (*array)(t);
00058c  4631              MOV      r1,r6
00058e  4640              MOV      r0,r8
000590  f7fffffe          BL       _ZN6lArrayIN6Physic6Ball2DEEclEj ; lArray<Physic::Ball2D>::operator ()(unsigned)
;;;260    	  uint32_t moved = 0;
000594  2700              MOVS     r7,#0
;;;261        uint32_t c = t;
;;;262    	  Ball2D *ball, *ball2;
;;;263    	  ball = this->Balls.GetFirst();
000596  f1040014          ADD      r0,r4,#0x14
00059a  f7fffffe          BL       _ZN13List_IteratorIN6Physic6Ball2DEE8GetFirstEv ; List_Iterator<Physic::Ball2D>::GetFirst()
00059e  4605              MOV      r5,r0
;;;264    	  while (ball) {
0005a0  b185              CBZ      r5,|L1.1476|
                  |L1.1442|
;;;265    			 ball->Step(this->Rect); 
0005a2  4628              MOV      r0,r5
0005a4  6922              LDR      r2,[r4,#0x10]
0005a6  68e1              LDR      r1,[r4,#0xc]
0005a8  f7fffffe          BL       _ZN6Physic6Ball2D4StepE3b2D ; Physic::Ball2D::Step(b2D)
0005ac  ed8d0a00          VSTR     s0,[sp,#0]
0005b0  edcd0a01          VSTR     s1,[sp,#4]
;;;266    			 ball = this->Balls.GetNext(ball);
0005b4  4629              MOV      r1,r5
0005b6  f1040014          ADD      r0,r4,#0x14
0005ba  f7fffffe          BL       _ZN13List_IteratorIN6Physic6Ball2DEE7GetNextEPS1_ ; List_Iterator<Physic::Ball2D>::GetNext(Physic::Ball2D*)
0005be  4605              MOV      r5,r0
0005c0  2d00              CMP      r5,#0                 ;264
0005c2  d1ee              BNE      |L1.1442|
                  |L1.1476|
;;;267    		}
;;;268        for (int32_t i = c; i >= 0; i--) {
0005c4  2e00              CMP      r6,#0
0005c6  db3e              BLT      |L1.1606|
                  |L1.1480|
;;;269            ball = this->Balls.Get(i);
0005c8  4631              MOV      r1,r6
0005ca  f1040014          ADD      r0,r4,#0x14
0005ce  f7fffffe          BL       _ZN13List_IteratorIN6Physic6Ball2DEE3GetEj ; List_Iterator<Physic::Ball2D>::Get(unsigned)
0005d2  4681              MOV      r9,r0
;;;270    			  this->Balls - ball;
0005d4  4649              MOV      r1,r9
0005d6  f1040014          ADD      r0,r4,#0x14
0005da  f7fffffe          BL       _ZN13List_IteratorIN6Physic6Ball2DEEmiEPS1_ ; List_Iterator<Physic::Ball2D>::operator -(Physic::Ball2D*)
;;;271    			  ball2 = this->Balls.GetFirst();
0005de  f1040014          ADD      r0,r4,#0x14
0005e2  f7fffffe          BL       _ZN13List_IteratorIN6Physic6Ball2DEE8GetFirstEv ; List_Iterator<Physic::Ball2D>::GetFirst()
0005e6  4605              MOV      r5,r0
;;;272            while (ball2) {
0005e8  0028              MOVS     r0,r5
0005ea  d024              BEQ      |L1.1590|
                  |L1.1516|
;;;273                if (ball2->Test(*ball)) {
0005ec  4649              MOV      r1,r9
0005ee  4628              MOV      r0,r5
0005f0  f7fffffe          BL       _ZN6Physic6Ball2D4TestERS0_ ; Physic::Ball2D::Test(Physic::Ball2D&)
0005f4  b178              CBZ      r0,|L1.1558|
;;;274    							  ball2->SwapP(*ball);	
0005f6  4649              MOV      r1,r9
0005f8  4628              MOV      r0,r5
0005fa  f7fffffe          BL       _ZN6Physic6Ball2D5SwapPERS0_ ; Physic::Ball2D::SwapP(Physic::Ball2D&)
;;;275                    array->Add(ball2, moved++);
0005fe  463a              MOV      r2,r7
000600  1c7f              ADDS     r7,r7,#1
000602  4629              MOV      r1,r5
000604  4640              MOV      r0,r8
000606  f7fffffe          BL       _ZN6lArrayIN6Physic6Ball2DEE3AddEPS1_j ; lArray<Physic::Ball2D>::Add(Physic::Ball2D*, unsigned)
;;;276    							  i--;
00060a  1e76              SUBS     r6,r6,#1
;;;277                    this->Balls - ball2;							
00060c  4629              MOV      r1,r5
00060e  f1040014          ADD      r0,r4,#0x14
000612  f7fffffe          BL       _ZN13List_IteratorIN6Physic6Ball2DEEmiEPS1_ ; List_Iterator<Physic::Ball2D>::operator -(Physic::Ball2D*)
                  |L1.1558|
;;;278                } else {}
;;;279    					  ball2->key = ball2->Sx * ball2->Sy;
000616  ed950a07          VLDR     s0,[r5,#0x1c]
00061a  edd50a08          VLDR     s1,[r5,#0x20]
00061e  ee200a20          VMUL.F32 s0,s0,s1
000622  ed850a02          VSTR     s0,[r5,#8]
;;;280    						ball2 = this->Balls.GetNext(ball2);
000626  4629              MOV      r1,r5
000628  f1040014          ADD      r0,r4,#0x14
00062c  f7fffffe          BL       _ZN13List_IteratorIN6Physic6Ball2DEE7GetNextEPS1_ ; List_Iterator<Physic::Ball2D>::GetNext(Physic::Ball2D*)
000630  4605              MOV      r5,r0
000632  2d00              CMP      r5,#0                 ;272
000634  d1da              BNE      |L1.1516|
                  |L1.1590|
;;;281            }
;;;282    				this->Balls + ball;
000636  4649              MOV      r1,r9
000638  f1040014          ADD      r0,r4,#0x14
00063c  f7fffffe          BL       _ZN13List_IteratorIN6Physic6Ball2DEEplEPS1_ ; List_Iterator<Physic::Ball2D>::operator +(Physic::Ball2D*)
000640  1e76              SUBS     r6,r6,#1              ;268
000642  2e00              CMP      r6,#0                 ;268
000644  dac0              BGE      |L1.1480|
                  |L1.1606|
;;;283        }
;;;284    		this->Balls.Array(array, moved);
000646  463a              MOV      r2,r7
000648  4641              MOV      r1,r8
00064a  f1040014          ADD      r0,r4,#0x14
00064e  f7fffffe          BL       _ZN13List_IteratorIN6Physic6Ball2DEE5ArrayI6lArrayIS1_EEERS2_PT_j ; List_Iterator<Physic::Ball2D>& List_Iterator<Physic::Ball2D>::Array<lArray<Physic::Ball2D>>(T1*, unsigned)
;;;285    		(*array).~lArray();
000652  b003              ADD      sp,sp,#0xc
000654  4640              MOV      r0,r8
000656  e8bd43f0          POP      {r4-r9,lr}
00065a  f7ffbffe          B.W      _ZN6lArrayIN6Physic6Ball2DEED1Ev ; lArray<Physic::Ball2D>::~lArray()
;;;286    }
;;;287    
                          ENDP

                  _ZN6Physic11Ball2DGroup3AddEj PROC ; Physic::Ball2DGroup::Add(unsigned)
;;;288    void Ball2DGroup::Add (uint32_t q)
00065e  b570              PUSH     {r4-r6,lr}
;;;289    {
000660  4604              MOV      r4,r0
000662  ed2d8b06          VPUSH    {d8-d10}
;;;290        float a = PI2_const - 0.7F;
000666  ed9f8ab5          VLDR     s16,|L1.2364|
;;;291    	  float x = 30, y = 30, p = 3.0F;
00066a  eeb39a0e          VMOV.F32 s18,#30.00000000
00066e  eef08a08          VMOV.F32 s17,#3.00000000
;;;292        Ball2D *ball;
;;;293        while (q--) {
000672  1e4e              SUBS     r6,r1,#1
000674  d325              BCC      |L1.1730|
;;;294            ball = this->New();
;;;295            if (! ball) {
;;;296                return;
;;;297            } else {}
;;;298            (*ball)(m, p, a);
;;;299    				m = 7;
000676  eef19a0c          VMOV.F32 s19,#7.00000000
;;;300    				ball->Sx = 30;
;;;301    				ball->Sy = 30;	
;;;302    				p += 1.5F;
00067a  eeb7aa08          VMOV.F32 s20,#1.50000000
;;;303            this->Balls + ball;
;;;304            a += 0.01F;
00067e  eddfaab0          VLDR     s21,|L1.2368|
                  |L1.1666|
000682  4620              MOV      r0,r4                 ;294
000684  f7fffffe          BL       _ZN9AllocatorIN6Physic6Ball2DEE3NewEv ; Allocator<Physic::Ball2D>::New()
000688  4605              MOV      r5,r0                 ;294
00068a  2d00              CMP      r5,#0                 ;295
00068c  d019              BEQ      |L1.1730|
00068e  ed940a02          VLDR     s0,[r4,#8]            ;298
000692  eeb01a48          VMOV.F32 s2,s16                ;298
000696  eef00a68          VMOV.F32 s1,s17                ;298
00069a  4628              MOV      r0,r5                 ;298
00069c  f7fffffe          BL       _ZN6Physic6Ball2DclEfff ; Physic::Ball2D::operator ()(float, float, float)
0006a0  edc49a02          VSTR     s19,[r4,#8]           ;299
0006a4  ed859a07          VSTR     s18,[r5,#0x1c]        ;300
0006a8  ed859a08          VSTR     s18,[r5,#0x20]        ;301
0006ac  ee788a8a          VADD.F32 s17,s17,s20           ;302
0006b0  4629              MOV      r1,r5                 ;303
0006b2  f1040014          ADD      r0,r4,#0x14           ;303
0006b6  f7fffffe          BL       _ZN13List_IteratorIN6Physic6Ball2DEEplEPS1_ ; List_Iterator<Physic::Ball2D>::operator +(Physic::Ball2D*)
0006ba  ee388a2a          VADD.F32 s16,s16,s21
0006be  1e76              SUBS     r6,r6,#1              ;293
0006c0  d2df              BCS      |L1.1666|
                  |L1.1730|
;;;305        }
;;;306    }
0006c2  ecbd8b06          VPOP     {d8-d10}
0006c6  bd70              POP      {r4-r6,pc}
;;;307    
                          ENDP

                  _ZN6Physic11Ball2DGroup3AddEfff PROC ; Physic::Ball2DGroup::Add(float, float, float)
;;;308    void Ball2DGroup::Add (float M, float P, float A)
0006c8  b570              PUSH     {r4-r6,lr}
;;;309    {
0006ca  4605              MOV      r5,r0
0006cc  ed2d8b04          VPUSH    {d8-d9}
0006d0  eeb08a40          VMOV.F32 s16,s0
0006d4  eef08a60          VMOV.F32 s17,s1
0006d8  eeb09a41          VMOV.F32 s18,s2
;;;310        Ball2D *ball;
;;;311        ball = this->New();
0006dc  4628              MOV      r0,r5
0006de  f7fffffe          BL       _ZN9AllocatorIN6Physic6Ball2DEE3NewEv ; Allocator<Physic::Ball2D>::New()
0006e2  4604              MOV      r4,r0
;;;312        if (! ball) {
0006e4  2c00              CMP      r4,#0
0006e6  d017              BEQ      |L1.1816|
;;;313            return;
;;;314        } else {}
;;;315        (*ball)(M, P, A);
0006e8  eeb01a49          VMOV.F32 s2,s18
0006ec  eef00a68          VMOV.F32 s1,s17
0006f0  eeb00a48          VMOV.F32 s0,s16
0006f4  4620              MOV      r0,r4
0006f6  f7fffffe          BL       _ZN6Physic6Ball2DclEfff ; Physic::Ball2D::operator ()(float, float, float)
;;;316    		ball->Sx = 30;
0006fa  eeb30a0e          VMOV.F32 s0,#30.00000000
0006fe  ed840a07          VSTR     s0,[r4,#0x1c]
;;;317    		ball->Sy = 30;
000702  ed840a08          VSTR     s0,[r4,#0x20]
;;;318    	  this->Balls + ball;
000706  4621              MOV      r1,r4
000708  ecbd8b04          VPOP     {d8-d9}
00070c  f1050014          ADD      r0,r5,#0x14
000710  e8bd4070          POP      {r4-r6,lr}
000714  f7ffbffe          B.W      _ZN13List_IteratorIN6Physic6Ball2DEEplEPS1_ ; List_Iterator<Physic::Ball2D>::operator +(Physic::Ball2D*)
                  |L1.1816|
;;;319    }
000718  ecbd8b04          VPOP     {d8-d9}
00071c  bd70              POP      {r4-r6,pc}
;;;320    
                          ENDP

                  _ZN6Physic11Ball2DGroup6RemoveEj PROC ; Physic::Ball2DGroup::Remove(unsigned)
;;;321    void Ball2DGroup::Remove (uint32_t q)
00071e  4770              BX       lr
;;;322    {
;;;323        
;;;324    }
;;;325    
                          ENDP

                  _ZN6Physic11Ball2DGroup4DrawEv PROC ; Physic::Ball2DGroup::Draw()
;;;326    void Ball2DGroup::Draw ()
000720  b570              PUSH     {r4-r6,lr}
;;;327    {
000722  b082              SUB      sp,sp,#8
000724  4605              MOV      r5,r0
;;;328        f2P p = {0, 0};
000726  2000              MOVS     r0,#0
000728  9000              STR      r0,[sp,#0]
00072a  9001              STR      r0,[sp,#4]
;;;329        Ball2D *ball = this->Balls.GetFirst();
00072c  f1050014          ADD      r0,r5,#0x14
000730  f7fffffe          BL       _ZN13List_IteratorIN6Physic6Ball2DEE8GetFirstEv ; List_Iterator<Physic::Ball2D>::GetFirst()
000734  4604              MOV      r4,r0
;;;330        while (ball) {
000736  0020              MOVS     r0,r4
000738  d023              BEQ      |L1.1922|
;;;331            p.x = ball->Sx - ball->m;
;;;332            p.y = ball->Sy - ball->m;
;;;333            this->Draw (p, ball->m, 0xcccc + (uint16_t)ball->p);    
00073a  f64c46cc          MOV      r6,#0xcccc
                  |L1.1854|
00073e  ed940a07          VLDR     s0,[r4,#0x1c]         ;331
000742  ed941a0a          VLDR     s2,[r4,#0x28]         ;331
000746  ee300a41          VSUB.F32 s0,s0,s2              ;331
00074a  ed8d0a00          VSTR     s0,[sp,#0]            ;331
00074e  edd40a08          VLDR     s1,[r4,#0x20]         ;332
000752  ee700ac1          VSUB.F32 s1,s1,s2              ;332
000756  edcd0a01          VSTR     s1,[sp,#4]            ;332
00075a  edd41a09          VLDR     s3,[r4,#0x24]
00075e  eefc1ae1          VCVT.U32.F32 s3,s3
000762  ee110a90          VMOV     r0,s3
000766  b280              UXTH     r0,r0
000768  1981              ADDS     r1,r0,r6
00076a  6828              LDR      r0,[r5,#0]
00076c  6802              LDR      r2,[r0,#0]
00076e  4628              MOV      r0,r5
000770  4790              BLX      r2
;;;334            ball = this->Balls.GetNext(ball);
000772  4621              MOV      r1,r4
000774  f1050014          ADD      r0,r5,#0x14
000778  f7fffffe          BL       _ZN13List_IteratorIN6Physic6Ball2DEE7GetNextEPS1_ ; List_Iterator<Physic::Ball2D>::GetNext(Physic::Ball2D*)
00077c  4604              MOV      r4,r0
00077e  2c00              CMP      r4,#0                 ;330
000780  d1dd              BNE      |L1.1854|
                  |L1.1922|
;;;335        }    
;;;336    }
000782  b002              ADD      sp,sp,#8
000784  bd70              POP      {r4-r6,pc}
;;;337    
                          ENDP

                  _ZN6Physic8StarDustC2Ev                  ; Alternate entry point ; Physic::StarDust::StarDust__sub_object()
                  _ZN6Physic8StarDustC1Ev PROC ; Physic::StarDust::StarDust()
;;;348    
;;;349    StarDust::StarDust () {}
;;;350    StarDust::~StarDust () {}
000786  2302              MOVS     r3,#2
000788  222c              MOVS     r2,#0x2c
00078a  496e              LDR      r1,|L1.2372|
00078c  f7ffbffe          B.W      __aeabi_vec_ctor_nocookie_nodtor
                          ENDP

                  _ZN6Physic8StarDustD2Ev                  ; Alternate entry point ; Physic::StarDust::~StarDust__sub_object()
                  _ZN6Physic8StarDustD1Ev PROC ; Physic::StarDust::~StarDust()
;;;351    
000790  b510              PUSH     {r4,lr}
000792  4604              MOV      r4,r0
000794  2302              MOVS     r3,#2
000796  222c              MOVS     r2,#0x2c
000798  496b              LDR      r1,|L1.2376|
00079a  4620              MOV      r0,r4
00079c  f7fffffe          BL       __aeabi_vec_dtor
0007a0  4620              MOV      r0,r4
0007a2  bd10              POP      {r4,pc}
                          ENDP

                  _ZN6Physic8StarDustclEv PROC ; Physic::StarDust::operator ()()
;;;352    void StarDust::operator () ()
0007a4  b510              PUSH     {r4,lr}
;;;353    {
0007a6  b082              SUB      sp,sp,#8
0007a8  4604              MOV      r4,r0
;;;354        this->index_ = 0;
0007aa  2000              MOVS     r0,#0
0007ac  f8840060          STRB     r0,[r4,#0x60]
;;;355    	  iterator_ = parts_[index_].Begin();
0007b0  4621              MOV      r1,r4
0007b2  4668              MOV      r0,sp
0007b4  f7fffffe          BL       _ZN7storage3MapILi2EN6Physic8DustPartEfE5BeginEv ; storage::Map<(int)2, Physic::DustPart, float>::Begin()
0007b8  9901              LDR      r1,[sp,#4]
0007ba  9800              LDR      r0,[sp,#0]
0007bc  65e1              STR      r1,[r4,#0x5c]
0007be  65a0              STR      r0,[r4,#0x58]
;;;356    }
0007c0  b002              ADD      sp,sp,#8
0007c2  bd10              POP      {r4,pc}
;;;357    
                          ENDP

                  _ZN6Physic8StarDust5SetUpEPNS_8DustPartEj PROC ; Physic::StarDust::SetUp(Physic::DustPart*, unsigned)
;;;468    
;;;469    void StarDust::SetUp (DustPart *dust, uint32_t q)
0007c4  b570              PUSH     {r4-r6,lr}
;;;470    {
0007c6  460e              MOV      r6,r1
0007c8  ed2d8b04          VPUSH    {d8-d9}
;;;471        float a = 0.1F;
0007cc  ed9f8a5f          VLDR     s16,|L1.2380|
;;;472        this->eq_ = q;
0007d0  6682              STR      r2,[r0,#0x68]
;;;473        this->edust_ = dust;
0007d2  6646              STR      r6,[r0,#0x64]
;;;474        while (q--) {
0007d4  1e55              SUBS     r5,r2,#1
0007d6  d329              BCC      |L1.2092|
;;;475           dust[q].x = 1;
0007d8  eef78a00          VMOV.F32 s17,#1.00000000
;;;476           dust[q].y = 1;    
;;;477           dust[q].v = 1.0F;
;;;478           dust[q].a = a;
;;;479           dust[q].vx = 1.0F * sin(a);
;;;480           dust[q].vy = 1.0F * cos(a); 
;;;481           a += 0.00628;
0007dc  ed9f9b5c          VLDR     d9,|L1.2384|
                  |L1.2016|
0007e0  eb050085          ADD      r0,r5,r5,LSL #2       ;475
0007e4  eb0604c0          ADD      r4,r6,r0,LSL #3       ;475
0007e8  edc48a03          VSTR     s17,[r4,#0xc]         ;475
0007ec  edc48a04          VSTR     s17,[r4,#0x10]        ;476
0007f0  edc48a07          VSTR     s17,[r4,#0x1c]        ;477
0007f4  ed848a08          VSTR     s16,[r4,#0x20]        ;478
0007f8  eeb00a48          VMOV.F32 s0,s16                ;478
0007fc  f7fffffe          BL       __hardfp_sinf
000800  ed840a05          VSTR     s0,[r4,#0x14]         ;479
000804  eeb00a48          VMOV.F32 s0,s16                ;479
000808  f7fffffe          BL       __hardfp_cosf
00080c  ed840a06          VSTR     s0,[r4,#0x18]         ;480
000810  ee180a10          VMOV     r0,s16
000814  f7fffffe          BL       __aeabi_f2d
000818  ec532b19          VMOV     r2,r3,d9
00081c  f7fffffe          BL       __aeabi_dadd
000820  f7fffffe          BL       __aeabi_d2f
000824  ee080a10          VMOV     s16,r0
000828  1e6d              SUBS     r5,r5,#1              ;474
00082a  d2d9              BCS      |L1.2016|
                  |L1.2092|
;;;482    			 //parts_[index_] + dust[q];
;;;483        }
;;;484    }
00082c  ecbd8b04          VPOP     {d8-d9}
000830  bd70              POP      {r4-r6,pc}
;;;485    
                          ENDP

                  _ZN6Physic8StarDust5SetUpEPNS_8DustPartERK6tImagej PROC ; Physic::StarDust::SetUp(Physic::DustPart*, const tImage&, unsigned)
;;;486    void StarDust::SetUp (DustPart *dust, const tImage &image,  uint32_t q)
000832  e92d4ff0          PUSH     {r4-r11,lr}
;;;487    {
000836  4604              MOV      r4,r0
000838  ed2d8b06          VPUSH    {d8-d10}
00083c  b083              SUB      sp,sp,#0xc
00083e  460d              MOV      r5,r1
000840  4617              MOV      r7,r2
000842  4698              MOV      r8,r3
;;;488        float a = 0.1F;
000844  ed9f8a41          VLDR     s16,|L1.2380|
;;;489        this->edust_ = dust;
000848  6665              STR      r5,[r4,#0x64]
;;;490    		int32_t S = image.W * image.H;
00084a  88b8              LDRH     r0,[r7,#4]
00084c  88f9              LDRH     r1,[r7,#6]
00084e  4348              MULS     r0,r1,r0
000850  9001              STR      r0,[sp,#4]
;;;491    	  ColorTypeDef targ = 0;
;;;492    	  eq_ = 0;
000852  2000              MOVS     r0,#0
000854  66a0              STR      r0,[r4,#0x68]
;;;493    		for (int x = 0, tx = 0; x < S; x += image.H, tx++) {  
000856  4681              MOV      r9,r0
000858  4682              MOV      r10,r0
00085a  9801              LDR      r0,[sp,#4]
00085c  2800              CMP      r0,#0
00085e  dd7b              BLE      |L1.2392|
;;;494    			for (uint32_t y = 0; y < image.H && q; y++) {
;;;495    				  targ = image.Image[x + y];
;;;496    				  if (targ != StdColWhite && targ) {
;;;497    						  q--;
;;;498    						  eq_++;
;;;499    						  dust[eq_].x = tx + 30;
;;;500                  dust[eq_].y = y + 30;    
;;;501                  dust[eq_].v = 1.0F;
000860  eef78a00          VMOV.F32 s17,#1.00000000
;;;502                  dust[eq_].a = a;
;;;503                  dust[eq_].vx = 1.0 * sin(a);
;;;504                  dust[eq_].vy = 1.0 * cos(a); 
;;;505    						  dust[eq_].color = targ;
;;;506                  a += 0.00628 * static_cast<float>(rand() % 1000);
000864  ed9fab3a          VLDR     d10,|L1.2384|
                  |L1.2152|
000868  2600              MOVS     r6,#0                 ;494
00086a  f10a001e          ADD      r0,r10,#0x1e          ;499
00086e  9002              STR      r0,[sp,#8]            ;494
000870  e08d              B        |L1.2446|
                  |L1.2162|
000872  6838              LDR      r0,[r7,#0]            ;495
000874  eb090106          ADD      r1,r9,r6              ;495
000878  f830b011          LDRH     r11,[r0,r1,LSL #1]    ;495
00087c  f5ab407f          SUB      r0,r11,#0xff00        ;496
000880  38ff              SUBS     r0,r0,#0xff           ;496
000882  d06a              BEQ      |L1.2394|
000884  f1bb0f00          CMP      r11,#0                ;496
000888  d067              BEQ      |L1.2394|
00088a  f1a80801          SUB      r8,r8,#1              ;497
00088e  6ea0              LDR      r0,[r4,#0x68]         ;498
000890  1c40              ADDS     r0,r0,#1              ;498
000892  66a0              STR      r0,[r4,#0x68]         ;498
000894  9902              LDR      r1,[sp,#8]            ;499
000896  eb000080          ADD      r0,r0,r0,LSL #2       ;499
00089a  ee001a10          VMOV     s0,r1                 ;499
00089e  eb0500c0          ADD      r0,r5,r0,LSL #3       ;499
0008a2  eeb80ac0          VCVT.F32.S32 s0,s0                 ;499
0008a6  ed800a03          VSTR     s0,[r0,#0xc]          ;499
0008aa  f106001e          ADD      r0,r6,#0x1e           ;500
0008ae  ee000a10          VMOV     s0,r0                 ;500
0008b2  6ea0              LDR      r0,[r4,#0x68]         ;500
0008b4  eeb80a40          VCVT.F32.U32 s0,s0                 ;500
0008b8  eb000080          ADD      r0,r0,r0,LSL #2       ;500
0008bc  eb0500c0          ADD      r0,r5,r0,LSL #3       ;500
0008c0  ed800a04          VSTR     s0,[r0,#0x10]         ;500
0008c4  6ea0              LDR      r0,[r4,#0x68]         ;501
0008c6  eb000080          ADD      r0,r0,r0,LSL #2       ;501
0008ca  eb0500c0          ADD      r0,r5,r0,LSL #3       ;501
0008ce  edc08a07          VSTR     s17,[r0,#0x1c]        ;501
0008d2  6ea0              LDR      r0,[r4,#0x68]         ;502
0008d4  eb000080          ADD      r0,r0,r0,LSL #2       ;502
0008d8  eb0500c0          ADD      r0,r5,r0,LSL #3       ;502
0008dc  ed808a08          VSTR     s16,[r0,#0x20]        ;502
0008e0  eeb00a48          VMOV.F32 s0,s16                ;502
0008e4  f7fffffe          BL       __hardfp_sinf
0008e8  6ea0              LDR      r0,[r4,#0x68]         ;503
0008ea  eb000080          ADD      r0,r0,r0,LSL #2       ;503
0008ee  eb0500c0          ADD      r0,r5,r0,LSL #3       ;503
0008f2  ed800a05          VSTR     s0,[r0,#0x14]         ;503
0008f6  eeb00a48          VMOV.F32 s0,s16                ;503
0008fa  f7fffffe          BL       __hardfp_cosf
0008fe  6ea0              LDR      r0,[r4,#0x68]         ;504
000900  eb000080          ADD      r0,r0,r0,LSL #2       ;504
000904  eb0500c0          ADD      r0,r5,r0,LSL #3       ;504
000908  ed800a06          VSTR     s0,[r0,#0x18]         ;504
00090c  6ea0              LDR      r0,[r4,#0x68]         ;505
00090e  eb000080          ADD      r0,r0,r0,LSL #2       ;505
000912  eb0500c0          ADD      r0,r5,r0,LSL #3       ;505
000916  f8a0b024          STRH     r11,[r0,#0x24]        ;505
00091a  f7fffffe          BL       rand
00091e  f44f717a          MOV      r1,#0x3e8
000922  fb90f2f1          SDIV     r2,r0,r1
000926  fb010012          MLS      r0,r1,r2,r0
00092a  ee000a10          VMOV     s0,r0
00092e  eeb80ac0          VCVT.F32.S32 s0,s0
000932  ee100a10          VMOV     r0,s0
000936  e011              B        |L1.2396|
                  |L1.2360|
                          DCD      _ZTVN6Physic11Ball2DGroupE+0x8 ; vtable for Physic::Ball2DGroup
                  |L1.2364|
00093c  3f5eec83          DCFS     0x3f5eec83 ; 0.87079638242721558
                  |L1.2368|
000940  3c23d70a          DCFS     0x3c23d70a ; 0.0099999997764825821
                  |L1.2372|
                          DCD      _ZN7storage3MapILi2EN6Physic8DustPartEfEC1Ev ; storage::Map<(int)2, Physic::DustPart, float>::Map()
                  |L1.2376|
                          DCD      _ZN7storage3MapILi2EN6Physic8DustPartEfED1Ev ; storage::Map<(int)2, Physic::DustPart, float>::~Map()
                  |L1.2380|
00094c  3dcccccd          DCFS     0x3dcccccd ; 0.10000000149011612
                  |L1.2384|
000950  a9e6eeb7          DCFD     0x3f79b90ea9e6eeb7 ; 0.00628
000954  3f79b90e
                  |L1.2392|
000958  e028              B        |L1.2476|
                  |L1.2394|
00095a  e017              B        |L1.2444|
                  |L1.2396|
00095c  f7fffffe          BL       __aeabi_f2d
000960  eeb01a4a          VMOV.F32 s2,s20
000964  eef01a6a          VMOV.F32 s3,s21
000968  ec532b11          VMOV     r2,r3,d1
00096c  f7fffffe          BL       __aeabi_dmul
000970  ec410b19          VMOV     d9,r0,r1
000974  ee180a10          VMOV     r0,s16
000978  f7fffffe          BL       __aeabi_f2d
00097c  ec532b19          VMOV     r2,r3,d9
000980  f7fffffe          BL       __aeabi_dadd
000984  f7fffffe          BL       __aeabi_d2f
000988  ee080a10          VMOV     s16,r0
                  |L1.2444|
00098c  1c76              ADDS     r6,r6,#1              ;494
                  |L1.2446|
00098e  88f8              LDRH     r0,[r7,#6]            ;494
000990  42b0              CMP      r0,r6                 ;494
000992  d903              BLS      |L1.2460|
000994  f1b80f00          CMP      r8,#0                 ;494
000998  f47faf6b          BNE      |L1.2162|
                  |L1.2460|
00099c  88f8              LDRH     r0,[r7,#6]            ;493
00099e  4481              ADD      r9,r9,r0              ;493
0009a0  f10a0a01          ADD      r10,r10,#1            ;493
0009a4  9801              LDR      r0,[sp,#4]            ;493
0009a6  4581              CMP      r9,r0                 ;493
0009a8  f6ffaf5e          BLT      |L1.2152|
                  |L1.2476|
;;;507    						  //parts_[index_] + dust[eq_];
;;;508    					} else {}   
;;;509    				  
;;;510    			}
;;;511    		}
;;;512    }
0009ac  b003              ADD      sp,sp,#0xc
0009ae  ecbd8b06          VPOP     {d8-d10}
0009b2  e8bd8ff0          POP      {r4-r11,pc}
;;;513    
                          ENDP

                  _ZN6Physic8StarDust3AddEf PROC ; Physic::StarDust::Add(float)
;;;448    
;;;449    void StarDust::Add (float a)
0009b6  b570              PUSH     {r4-r6,lr}
;;;450    {
0009b8  4605              MOV      r5,r0
0009ba  ed2d8b02          VPUSH    {d8}
0009be  eeb08a40          VMOV.F32 s16,s0
;;;451        DustPart *part = this->New();
0009c2  4628              MOV      r0,r5
0009c4  f7fffffe          BL       _ZN9AllocatorIN6Physic8DustPartEE3NewEv ; Allocator<Physic::DustPart>::New()
0009c8  4604              MOV      r4,r0
;;;452        if (! part) {
0009ca  2c00              CMP      r4,#0
0009cc  d024              BEQ      |L1.2584|
;;;453            return; 
;;;454        } else {}
;;;455        part->x = 1;
0009ce  eef70a00          VMOV.F32 s1,#1.00000000
0009d2  edc40a03          VSTR     s1,[r4,#0xc]
;;;456        part->y = 1;    
0009d6  edc40a04          VSTR     s1,[r4,#0x10]
;;;457        part->v = 1.0F;
0009da  edc40a07          VSTR     s1,[r4,#0x1c]
;;;458        part->a = a;
0009de  eeb00a48          VMOV.F32 s0,s16
0009e2  ed840a08          VSTR     s0,[r4,#0x20]
0009e6  f7fffffe          BL       __hardfp_sinf
;;;459        part->vx = 1.0F * sin(part->a);
0009ea  ed840a05          VSTR     s0,[r4,#0x14]
;;;460        part->vy = 1.0F * cos(part->a);
0009ee  ed940a08          VLDR     s0,[r4,#0x20]
0009f2  f7fffffe          BL       __hardfp_cosf
0009f6  ed840a06          VSTR     s0,[r4,#0x18]
;;;461        this->parts_[index_] + part;
0009fa  f8950060          LDRB     r0,[r5,#0x60]
0009fe  eb000140          ADD      r1,r0,r0,LSL #1
000a02  eb0100c0          ADD      r0,r1,r0,LSL #3
000a06  ecbd8b02          VPOP     {d8}
000a0a  eb050080          ADD      r0,r5,r0,LSL #2
000a0e  4621              MOV      r1,r4
000a10  e8bd4070          POP      {r4-r6,lr}
000a14  f7ffbffe          B.W      _ZN7storage3MapILi2EN6Physic8DustPartEfEplEPS2_ ; storage::Map<(int)2, Physic::DustPart, float>::operator +(Physic::DustPart*)
                  |L1.2584|
;;;462    }
000a18  ecbd8b02          VPOP     {d8}
000a1c  bd70              POP      {r4-r6,pc}
;;;463    
                          ENDP

                  _ZN6Physic8StarDust3AddEj PROC ; Physic::StarDust::Add(unsigned)
;;;464    void StarDust::Add (uint32_t)
000a1e  4770              BX       lr
;;;465    {
;;;466        
;;;467    }
;;;468    
                          ENDP

                  _ZN6Physic8StarDust6RemoveEj PROC ; Physic::StarDust::Remove(unsigned)
;;;513    
;;;514    void StarDust::Remove (uint32_t)
000a20  4770              BX       lr
;;;515    {
;;;516        
;;;517    }
;;;518    
                          ENDP

                  _ZN6Physic8StarDust4TestERNS_8DustPartES2_ PROC ; Physic::StarDust::Test(Physic::DustPart&, Physic::DustPart&)
;;;428    
;;;429    int32_t StarDust::Test (DustPart &p, DustPart &n)
000a22  b530              PUSH     {r4,r5,lr}
;;;430    {
000a24  b089              SUB      sp,sp,#0x24
000a26  460c              MOV      r4,r1
000a28  4615              MOV      r5,r2
;;;431        float a, vx, vy;
;;;432    	  f2D r0 = {p.x, p.y, 1, 1};
000a2a  48b0              LDR      r0,|L1.3308|
000a2c  e890100e          LDM      r0,{r1-r3,r12}
000a30  9205              STR      r2,[sp,#0x14]
000a32  e9cd3c06          STRD     r3,r12,[sp,#0x18]
000a36  9104              STR      r1,[sp,#0x10]
000a38  ed940a03          VLDR     s0,[r4,#0xc]
000a3c  ed8d0a04          VSTR     s0,[sp,#0x10]
000a40  edd40a04          VLDR     s1,[r4,#0x10]
000a44  edcd0a05          VSTR     s1,[sp,#0x14]
;;;433    		f2D rn = {n.x, n.y, 1, 1};
000a48  6983              LDR      r3,[r0,#0x18]  ; <Data7>
000a4a  6942              LDR      r2,[r0,#0x14]  ; <Data7>
000a4c  6901              LDR      r1,[r0,#0x10]  ; <Data7>
000a4e  69c0              LDR      r0,[r0,#0x1c]  ; <Data7>
000a50  9302              STR      r3,[sp,#8]
000a52  9201              STR      r2,[sp,#4]
000a54  9100              STR      r1,[sp,#0]
000a56  9003              STR      r0,[sp,#0xc]
000a58  ed952a03          VLDR     s4,[r5,#0xc]
000a5c  ed8d2a00          VSTR     s4,[sp,#0]
000a60  edd52a04          VLDR     s5,[r5,#0x10]
000a64  edcd2a01          VSTR     s5,[sp,#4]
;;;434        if (gTest::TestBoxBounds(r0, rn)) {
000a68  eddd3a03          VLDR     s7,[sp,#0xc]
000a6c  ed9d3a02          VLDR     s6,[sp,#8]
000a70  eddd1a07          VLDR     s3,[sp,#0x1c]
000a74  ed9d1a06          VLDR     s2,[sp,#0x18]
000a78  f7fffffe          BL       _ZN5gTest13TestBoxBoundsE3f2DS0_ ; gTest::TestBoxBounds(f2D, f2D)
000a7c  b1d0              CBZ      r0,|L1.2740|
;;;435            a = p.a;
000a7e  ed940a08          VLDR     s0,[r4,#0x20]
;;;436            vx = p.vx;
000a82  edd40a05          VLDR     s1,[r4,#0x14]
;;;437            vy = p.vy;
000a86  ed941a06          VLDR     s2,[r4,#0x18]
;;;438            p.a = n.a;
000a8a  edd51a08          VLDR     s3,[r5,#0x20]
000a8e  edc41a08          VSTR     s3,[r4,#0x20]
;;;439            p.vx = n.vx;
000a92  edd51a05          VLDR     s3,[r5,#0x14]
000a96  edc41a05          VSTR     s3,[r4,#0x14]
;;;440            p.vy = n.vy;
000a9a  edd51a06          VLDR     s3,[r5,#0x18]
000a9e  edc41a06          VSTR     s3,[r4,#0x18]
;;;441            n.a = a;
000aa2  ed850a08          VSTR     s0,[r5,#0x20]
;;;442            n.vx = vx;
000aa6  edc50a05          VSTR     s1,[r5,#0x14]
;;;443            n.vy = vy;
000aaa  ed851a06          VSTR     s2,[r5,#0x18]
;;;444            return 1;
;;;445        }
;;;446        return 0;
;;;447    }
000aae  b009              ADD      sp,sp,#0x24
000ab0  2001              MOVS     r0,#1                 ;444
000ab2  bd30              POP      {r4,r5,pc}
                  |L1.2740|
000ab4  b009              ADD      sp,sp,#0x24
000ab6  2000              MOVS     r0,#0                 ;446
000ab8  bd30              POP      {r4,r5,pc}
;;;448    
                          ENDP

                  _ZN6Physic8StarDust4StepE3b2D PROC ; Physic::StarDust::Step(b2D)
;;;357    
;;;358    void StarDust::Step (b2D r)
000aba  b437              PUSH     {r0-r2,r4,r5}
;;;359    {
;;;360        DustPart *npart;
;;;361        DustPart *part;
;;;362        DustPart tpart;
;;;363        int32_t q = eq_, t = eq_;
000abc  6e81              LDR      r1,[r0,#0x68]
;;;364        int32_t moved = 0;
;;;365        while (q--) {
000abe  1e4a              SUBS     r2,r1,#1
000ac0  d361              BCC      |L1.2950|
;;;366            part = &edust_[q];
;;;367            
;;;368            part->x = part->x + part->vx;
;;;369            part->y = part->y + part->vy;
;;;370    			
;;;371    			
;;;372            if (part->x < 1) {
;;;373               part->vx = -part->vx; 
;;;374               part->x = 1;
000ac2  f9bdc00a          LDRSH    r12,[sp,#0xa]
000ac6  f9bd5008          LDRSH    r5,[sp,#8]            ;359
000aca  eef71a00          VMOV.F32 s3,#1.00000000
;;;375            } else if (part->x > r.w) {
;;;376               part->vx = -part->vx; 
;;;377               part->x = r.h - 1;
000ace  f1ac0301          SUB      r3,r12,#1
                  |L1.2770|
000ad2  6e41              LDR      r1,[r0,#0x64]         ;366
000ad4  eb020482          ADD      r4,r2,r2,LSL #2       ;366
000ad8  eb0101c4          ADD      r1,r1,r4,LSL #3       ;366
000adc  ed910a03          VLDR     s0,[r1,#0xc]          ;368
000ae0  edd10a05          VLDR     s1,[r1,#0x14]         ;368
000ae4  ee300a20          VADD.F32 s0,s0,s1              ;368
000ae8  ed810a03          VSTR     s0,[r1,#0xc]          ;368
000aec  edd10a04          VLDR     s1,[r1,#0x10]         ;369
000af0  ed911a06          VLDR     s2,[r1,#0x18]         ;369
000af4  ee700a81          VADD.F32 s1,s1,s2              ;369
000af8  edc10a04          VSTR     s1,[r1,#0x10]         ;369
000afc  ee104a10          VMOV     r4,s0                 ;372
000b00  f1b45f7e          CMP      r4,#0x3f800000        ;372
000b04  da08              BGE      |L1.2840|
000b06  ed910a05          VLDR     s0,[r1,#0x14]         ;373
000b0a  eeb10a40          VNEG.F32 s0,s0                 ;373
000b0e  ed810a05          VSTR     s0,[r1,#0x14]         ;373
000b12  edc11a03          VSTR     s3,[r1,#0xc]          ;374
000b16  e034              B        |L1.2946|
                  |L1.2840|
000b18  ee025a10          VMOV     s4,r5                 ;375
000b1c  eeb82ac2          VCVT.F32.S32 s4,s4                 ;375
000b20  eeb40ac2          VCMPE.F32 s0,s4                 ;375
000b24  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;375
000b28  dd0c              BLE      |L1.2884|
000b2a  ed910a05          VLDR     s0,[r1,#0x14]         ;376
000b2e  eeb10a40          VNEG.F32 s0,s0                 ;376
000b32  ed810a05          VSTR     s0,[r1,#0x14]         ;376
000b36  ee003a10          VMOV     s0,r3
000b3a  eeb80ac0          VCVT.F32.S32 s0,s0
000b3e  ed810a03          VSTR     s0,[r1,#0xc]
000b42  e01e              B        |L1.2946|
                  |L1.2884|
;;;378            } else if (part->y < 1) {
000b44  ee104a90          VMOV     r4,s1
000b48  f1b45f7e          CMP      r4,#0x3f800000
000b4c  da06              BGE      |L1.2908|
;;;379               part->vy = -part->vy;
000b4e  eeb10a41          VNEG.F32 s0,s2
000b52  ed810a06          VSTR     s0,[r1,#0x18]
;;;380               part->y = 1;            
000b56  edc11a04          VSTR     s3,[r1,#0x10]
000b5a  e012              B        |L1.2946|
                  |L1.2908|
;;;381            } else if (part->y > r.h) {
000b5c  ee00ca10          VMOV     s0,r12
000b60  eeb80ac0          VCVT.F32.S32 s0,s0
000b64  eef40ac0          VCMPE.F32 s1,s0
000b68  eef1fa10          VMRS     APSR_nzcv,FPSCR
000b6c  dd09              BLE      |L1.2946|
;;;382               part->vy = -part->vy; 
000b6e  eeb10a41          VNEG.F32 s0,s2
000b72  ed810a06          VSTR     s0,[r1,#0x18]
;;;383               part->y = r.h - 1;
000b76  ee003a10          VMOV     s0,r3
000b7a  eeb80ac0          VCVT.F32.S32 s0,s0
000b7e  ed810a04          VSTR     s0,[r1,#0x10]
                  |L1.2946|
000b82  1e52              SUBS     r2,r2,#1              ;365
;;;384            } else {}
;;;385            
;;;386            t = 0;
;;;387            npart = &edust_[0];
;;;388            while (0) {
000b84  d2a5              BCS      |L1.2770|
                  |L1.2950|
;;;389                
;;;390             if (this->Test(*part, *npart)) {
;;;391                    moved++;
;;;392                    tpart = edust_[q];
;;;393                    edust_[q] = edust_[t];
;;;394                    edust_[t] = tpart;
;;;395                    q--;
;;;396    				 }
;;;397    
;;;398                npart = &edust_[++t];
;;;399            }        
;;;400        } 
;;;401    }
000b86  b003              ADD      sp,sp,#0xc
000b88  bc30              POP      {r4,r5}
000b8a  4770              BX       lr
;;;402    
                          ENDP

                  _ZN6Physic8StarDust4DrawEv PROC ; Physic::StarDust::Draw()
;;;518    
;;;519    void StarDust::Draw ()
000b8c  e92d41f0          PUSH     {r4-r8,lr}
;;;520    {
000b90  b08a              SUB      sp,sp,#0x28
000b92  4605              MOV      r5,r0
;;;521        
;;;522        DustPart part = edust_[0];
000b94  6e69              LDR      r1,[r5,#0x64]
000b96  e891100d          LDM      r1,{r0,r2,r3,r12}
000b9a  e9d17806          LDRD     r7,r8,[r1,#0x18]
000b9e  694e              LDR      r6,[r1,#0x14]
000ba0  690c              LDR      r4,[r1,#0x10]
000ba2  e88d100d          STM      sp,{r0,r2,r3,r12}
000ba6  a804              ADD      r0,sp,#0x10
000ba8  e8a001d0          STM      r0!,{r4,r6-r8}
000bac  6a08              LDR      r0,[r1,#0x20]
000bae  6a49              LDR      r1,[r1,#0x24]
000bb0  9109              STR      r1,[sp,#0x24]
000bb2  9008              STR      r0,[sp,#0x20]
;;;523        uint32_t t = eq_;
000bb4  6ea8              LDR      r0,[r5,#0x68]
;;;524        while (t--) {
000bb6  1e44              SUBS     r4,r0,#1
000bb8  d313              BCC      |L1.3042|
                  |L1.3002|
;;;525            this->Draw (part.x, part.y, part.color);
000bba  f8bd1024          LDRH     r1,[sp,#0x24]
000bbe  eddd0a04          VLDR     s1,[sp,#0x10]
000bc2  ed9d0a03          VLDR     s0,[sp,#0xc]
000bc6  4628              MOV      r0,r5
000bc8  f7fffffe          BL       _ZN6Physic8StarDust4DrawEffj ; Physic::StarDust::Draw(float, float, unsigned)
;;;526            part = edust_[t];
000bcc  6e68              LDR      r0,[r5,#0x64]
000bce  eb040184          ADD      r1,r4,r4,LSL #2
000bd2  eb0001c1          ADD      r1,r0,r1,LSL #3
000bd6  2226              MOVS     r2,#0x26
000bd8  4668              MOV      r0,sp
000bda  f7fffffe          BL       __aeabi_memcpy4
000bde  1e64              SUBS     r4,r4,#1              ;524
000be0  d2eb              BCS      |L1.3002|
                  |L1.3042|
;;;527        }
;;;528       
;;;529    }
000be2  b00a              ADD      sp,sp,#0x28
000be4  e8bd81f0          POP      {r4-r8,pc}
;;;530        
                          ENDP

                  _ZN6Physic8StarDust10TestAroundERNS_8DustPartE PROC ; Physic::StarDust::TestAround(Physic::DustPart&)
;;;402    
;;;403    int32_t StarDust::TestAround (DustPart &p)
000be8  b510              PUSH     {r4,lr}
;;;404    {
000bea  4604              MOV      r4,r0
000bec  ed2d8b06          VPUSH    {d8-d10}
;;;405        float x = p.x;
000bf0  ed91aa03          VLDR     s20,[r1,#0xc]
;;;406        float y = p.y;
000bf4  edd19a04          VLDR     s19,[r1,#0x10]
;;;407        if (this->ReadPixel(x, y)) {
000bf8  4620              MOV      r0,r4
000bfa  eeb00a4a          VMOV.F32 s0,s20
000bfe  eef00a69          VMOV.F32 s1,s19
000c02  f7fffffe          BL       _ZN6Physic8StarDust9ReadPixelEff ; Physic::StarDust::ReadPixel(float, float)
000c06  b118              CBZ      r0,|L1.3088|
;;;408            return 1;
;;;409        } else     if (this->ReadPixel(x + 1, y)) {
;;;410            return 1;
;;;411        } else     if (this->ReadPixel(x - 1, y)) {
;;;412            return 1;
;;;413        } else     if (this->ReadPixel(x, y + 1)) {
;;;414            return 1;
;;;415        } else     if (this->ReadPixel(x, y - 1)) {
;;;416            return 1;
;;;417        } else     if (this->ReadPixel(x + 1, y + 1)) {
;;;418            return 1;
;;;419        } else     if (this->ReadPixel(x - 1, y - 1)) {
;;;420            return 1;
;;;421        } else     if (this->ReadPixel(x + 1, y - 1)) {
;;;422            return 1;
;;;423        } else     if (this->ReadPixel(x - 1, y + 1)) {
;;;424            return 1;
;;;425        } else {}
;;;426        return 0;        
;;;427    }
000c08  ecbd8b06          VPOP     {d8-d10}
000c0c  2001              MOVS     r0,#1                 ;408
000c0e  bd10              POP      {r4,pc}
                  |L1.3088|
000c10  eef7aa00          VMOV.F32 s21,#1.00000000       ;409
000c14  eef00a69          VMOV.F32 s1,s19                ;409
000c18  ee3a8a2a          VADD.F32 s16,s20,s21           ;409
000c1c  4620              MOV      r0,r4                 ;409
000c1e  eeb00a48          VMOV.F32 s0,s16                ;409
000c22  f7fffffe          BL       _ZN6Physic8StarDust9ReadPixelEff ; Physic::StarDust::ReadPixel(float, float)
000c26  b118              CBZ      r0,|L1.3120|
000c28  ecbd8b06          VPOP     {d8-d10}
000c2c  2001              MOVS     r0,#1                 ;410
000c2e  bd10              POP      {r4,pc}
                  |L1.3120|
000c30  ee7a8a6a          VSUB.F32 s17,s20,s21           ;411
000c34  eef00a69          VMOV.F32 s1,s19                ;411
000c38  4620              MOV      r0,r4                 ;411
000c3a  eeb00a68          VMOV.F32 s0,s17                ;411
000c3e  f7fffffe          BL       _ZN6Physic8StarDust9ReadPixelEff ; Physic::StarDust::ReadPixel(float, float)
000c42  b118              CBZ      r0,|L1.3148|
000c44  ecbd8b06          VPOP     {d8-d10}
000c48  2001              MOVS     r0,#1                 ;412
000c4a  bd10              POP      {r4,pc}
                  |L1.3148|
000c4c  ee399aaa          VADD.F32 s18,s19,s21           ;413
000c50  eeb00a4a          VMOV.F32 s0,s20                ;413
000c54  4620              MOV      r0,r4                 ;413
000c56  eef00a49          VMOV.F32 s1,s18                ;413
000c5a  f7fffffe          BL       _ZN6Physic8StarDust9ReadPixelEff ; Physic::StarDust::ReadPixel(float, float)
000c5e  b118              CBZ      r0,|L1.3176|
000c60  ecbd8b06          VPOP     {d8-d10}
000c64  2001              MOVS     r0,#1                 ;414
000c66  bd10              POP      {r4,pc}
                  |L1.3176|
000c68  ee799aea          VSUB.F32 s19,s19,s21           ;415
000c6c  eeb00a4a          VMOV.F32 s0,s20                ;415
000c70  4620              MOV      r0,r4                 ;415
000c72  eef00a69          VMOV.F32 s1,s19                ;415
000c76  f7fffffe          BL       _ZN6Physic8StarDust9ReadPixelEff ; Physic::StarDust::ReadPixel(float, float)
000c7a  b118              CBZ      r0,|L1.3204|
000c7c  ecbd8b06          VPOP     {d8-d10}
000c80  2001              MOVS     r0,#1                 ;416
000c82  bd10              POP      {r4,pc}
                  |L1.3204|
000c84  eef00a49          VMOV.F32 s1,s18                ;417
000c88  eeb00a48          VMOV.F32 s0,s16                ;417
000c8c  4620              MOV      r0,r4                 ;417
000c8e  f7fffffe          BL       _ZN6Physic8StarDust9ReadPixelEff ; Physic::StarDust::ReadPixel(float, float)
000c92  b118              CBZ      r0,|L1.3228|
000c94  ecbd8b06          VPOP     {d8-d10}
000c98  2001              MOVS     r0,#1                 ;418
000c9a  bd10              POP      {r4,pc}
                  |L1.3228|
000c9c  eef00a69          VMOV.F32 s1,s19                ;419
000ca0  eeb00a68          VMOV.F32 s0,s17                ;419
000ca4  4620              MOV      r0,r4                 ;419
000ca6  f7fffffe          BL       _ZN6Physic8StarDust9ReadPixelEff ; Physic::StarDust::ReadPixel(float, float)
000caa  b118              CBZ      r0,|L1.3252|
000cac  ecbd8b06          VPOP     {d8-d10}
000cb0  2001              MOVS     r0,#1                 ;420
000cb2  bd10              POP      {r4,pc}
                  |L1.3252|
000cb4  eef00a69          VMOV.F32 s1,s19                ;421
000cb8  eeb00a48          VMOV.F32 s0,s16                ;421
000cbc  4620              MOV      r0,r4                 ;421
000cbe  f7fffffe          BL       _ZN6Physic8StarDust9ReadPixelEff ; Physic::StarDust::ReadPixel(float, float)
000cc2  b118              CBZ      r0,|L1.3276|
000cc4  ecbd8b06          VPOP     {d8-d10}
000cc8  2001              MOVS     r0,#1                 ;422
000cca  bd10              POP      {r4,pc}
                  |L1.3276|
000ccc  eef00a49          VMOV.F32 s1,s18                ;423
000cd0  eeb00a68          VMOV.F32 s0,s17                ;423
000cd4  4620              MOV      r0,r4                 ;423
000cd6  f7fffffe          BL       _ZN6Physic8StarDust9ReadPixelEff ; Physic::StarDust::ReadPixel(float, float)
000cda  b118              CBZ      r0,|L1.3300|
000cdc  ecbd8b06          VPOP     {d8-d10}
000ce0  2001              MOVS     r0,#1                 ;424
000ce2  bd10              POP      {r4,pc}
                  |L1.3300|
000ce4  ecbd8b06          VPOP     {d8-d10}
000ce8  2000              MOVS     r0,#0                 ;426
000cea  bd10              POP      {r4,pc}
;;;428    
                          ENDP

                  |L1.3308|
                          DCD      ||.constdata||

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  00000000          DCFS     0x00000000 ; 0
000004  00000000          DCFS     0x00000000 ; 0
000008  3f800000          DCFS     0x3f800000 ; 1
00000c  3f800000          DCFS     0x3f800000 ; 1
000010  00000000          DCFS     0x00000000 ; 0
000014  00000000          DCFS     0x00000000 ; 0
000018  3f800000          DCFS     0x3f800000 ; 1
00001c  3f800000          DCFS     0x3f800000 ; 1

                          AREA ||t._ZN9AllocatorIvE3NewI4NodeIN6Physic8DustPartEfEEEPT_v||, COMGROUP=_ZN9AllocatorIvE3NewI4NodeIN6Physic8DustPartEfEEEPT_v, CODE, READONLY, ALIGN=1

                  _ZN9AllocatorIvE3NewI4NodeIN6Physic8DustPartEfEEEPT_v PROC ; T1* Allocator<void>::New<Node<Physic::DustPart, float>>()
;;;13       template <typename Obj>
;;;14         Obj *New ();
000000  2010              MOVS     r0,#0x10
;;;15     
;;;16       template <typename Obj>
;;;17         Obj *New (uint32_t); 
;;;18     	
;;;19     	template <typename Obj>
;;;20         Obj *NewArray (uint32_t);
;;;21     	
;;;22     	template <typename Obj>
;;;23         Obj **NewlArray (uint32_t);
;;;24     
;;;25       template <typename Obj>
;;;26         int32_t Delete (Obj *); 
;;;27     	
;;;28         native *New ();
;;;29         native *New (uint32_t); 
;;;30     	  native *NewArray (uint32_t);
;;;31     	  native **NewlArray (uint32_t);
;;;32       
;;;33       private:     
;;;34     };
;;;35     
;;;36     void *Alloc (uint32_t);
;;;37     int32_t Free (void *); 
;;;38     
;;;39     /*
;;;40     Allocator::Allocator () {}
;;;41     Allocator::~Allocator() {}
;;;42     */
;;;43     
;;;44     template <typename native>
;;;45     template <typename Obj>
;;;46       Obj *Allocator<native>::New ()
;;;47     {
;;;48       return (Obj *)Alloc (sizeof(Obj));
000002  f7ffbffe          B.W      _Z5Allocj ; Alloc(unsigned)
;;;49     }
;;;50     
                          ENDP


                          AREA ||area_number.16||, COMGROUP=_ZN9AllocatorIvE3NewI4NodeIN6Physic8DustPartEfEEEPT_v, LINKORDER=||t._ZN9AllocatorIvE3NewI4NodeIN6Physic8DustPartEfEEEPT_v||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN9AllocatorIvE3NewI4NodeIN6Physic8DustPartEfEEEPT_v||
                          DCD      0x00000001

                          AREA ||t._ZN9AllocatorIN6Physic6Ball2DEE3NewEv||, COMGROUP=_ZN9AllocatorIN6Physic6Ball2DEE3NewEv, CODE, READONLY, ALIGN=1

                  _ZN9AllocatorIN6Physic6Ball2DEE3NewEv PROC ; Allocator<Physic::Ball2D>::New()
;;;79     template <typename native>
;;;80       native *Allocator<native>::New ()
000000  2038              MOVS     r0,#0x38
;;;81     {
;;;82       return (native *)Alloc (sizeof(native));
000002  f7ffbffe          B.W      _Z5Allocj ; Alloc(unsigned)
;;;83     }
;;;84     
                          ENDP


                          AREA ||area_number.23||, COMGROUP=_ZN9AllocatorIN6Physic6Ball2DEE3NewEv, LINKORDER=||t._ZN9AllocatorIN6Physic6Ball2DEE3NewEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN9AllocatorIN6Physic6Ball2DEE3NewEv||
                          DCD      0x00000001

                          AREA ||t._ZN9AllocatorIN6Physic6Ball2DEE9NewlArrayEj||, COMGROUP=_ZN9AllocatorIN6Physic6Ball2DEE9NewlArrayEj, CODE, READONLY, ALIGN=1

                  _ZN9AllocatorIN6Physic6Ball2DEE9NewlArrayEj PROC ; Allocator<Physic::Ball2D>::NewlArray(unsigned)
;;;98     template <typename native>
;;;99       native **Allocator<native>::NewlArray (uint32_t size)
000000  0088              LSLS     r0,r1,#2
;;;100    {
;;;101      return (native **)Alloc (sizeof(native *) * size);
000002  f7ffbffe          B.W      _Z5Allocj ; Alloc(unsigned)
;;;102    }
;;;103    
                          ENDP


                          AREA ||area_number.30||, COMGROUP=_ZN9AllocatorIN6Physic6Ball2DEE9NewlArrayEj, LINKORDER=||t._ZN9AllocatorIN6Physic6Ball2DEE9NewlArrayEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN9AllocatorIN6Physic6Ball2DEE9NewlArrayEj||
                          DCD      0x00000001

                          AREA ||t._ZN9AllocatorIN6Physic6Ball2DEE3NewI6lArrayIS1_EEEPT_v||, COMGROUP=_ZN9AllocatorIN6Physic6Ball2DEE3NewI6lArrayIS1_EEEPT_v, CODE, READONLY, ALIGN=1

                  _ZN9AllocatorIN6Physic6Ball2DEE3NewI6lArrayIS1_EEEPT_v PROC ; T1* Allocator<Physic::Ball2D>::New<lArray<Physic::Ball2D>>()
;;;13       template <typename Obj>
;;;14         Obj *New ();
000000  200c              MOVS     r0,#0xc
;;;15     
;;;16       template <typename Obj>
;;;17         Obj *New (uint32_t); 
;;;18     	
;;;19     	template <typename Obj>
;;;20         Obj *NewArray (uint32_t);
;;;21     	
;;;22     	template <typename Obj>
;;;23         Obj **NewlArray (uint32_t);
;;;24     
;;;25       template <typename Obj>
;;;26         int32_t Delete (Obj *); 
;;;27     	
;;;28         native *New ();
;;;29         native *New (uint32_t); 
;;;30     	  native *NewArray (uint32_t);
;;;31     	  native **NewlArray (uint32_t);
;;;32       
;;;33       private:     
;;;34     };
;;;35     
;;;36     void *Alloc (uint32_t);
;;;37     int32_t Free (void *); 
;;;38     
;;;39     /*
;;;40     Allocator::Allocator () {}
;;;41     Allocator::~Allocator() {}
;;;42     */
;;;43     
;;;44     template <typename native>
;;;45     template <typename Obj>
;;;46       Obj *Allocator<native>::New ()
;;;47     {
;;;48       return (Obj *)Alloc (sizeof(Obj));
000002  f7ffbffe          B.W      _Z5Allocj ; Alloc(unsigned)
;;;49     }
;;;50     
                          ENDP


                          AREA ||area_number.37||, COMGROUP=_ZN9AllocatorIN6Physic6Ball2DEE3NewI6lArrayIS1_EEEPT_v, LINKORDER=||t._ZN9AllocatorIN6Physic6Ball2DEE3NewI6lArrayIS1_EEEPT_v||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.37||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN9AllocatorIN6Physic6Ball2DEE3NewI6lArrayIS1_EEEPT_v||
                          DCD      0x00000001

                          AREA ||t._ZN9AllocatorIN6Physic6Ball2DEE6DeleteIPS1_EEiPT_||, COMGROUP=_ZN9AllocatorIN6Physic6Ball2DEE6DeleteIPS1_EEiPT_, CODE, READONLY, ALIGN=1

                  _ZN9AllocatorIN6Physic6Ball2DEE6DeleteIPS1_EEiPT_ PROC ; int Allocator<Physic::Ball2D>::Delete<Physic::Ball2D*>(T1*)
;;;25       template <typename Obj>
;;;26         int32_t Delete (Obj *); 
000000  4608              MOV      r0,r1
;;;27     	
;;;28         native *New ();
;;;29         native *New (uint32_t); 
;;;30     	  native *NewArray (uint32_t);
;;;31     	  native **NewlArray (uint32_t);
;;;32       
;;;33       private:     
;;;34     };
;;;35     
;;;36     void *Alloc (uint32_t);
;;;37     int32_t Free (void *); 
;;;38     
;;;39     /*
;;;40     Allocator::Allocator () {}
;;;41     Allocator::~Allocator() {}
;;;42     */
;;;43     
;;;44     template <typename native>
;;;45     template <typename Obj>
;;;46       Obj *Allocator<native>::New ()
;;;47     {
;;;48       return (Obj *)Alloc (sizeof(Obj));
;;;49     }
;;;50     
;;;51     template <typename native>
;;;52     template <typename Obj>
;;;53       Obj *Allocator<native>::New (uint32_t size)
;;;54     {
;;;55       return (Obj *)Alloc (sizeof(Obj) + size);
;;;56     }
;;;57     
;;;58     template <typename native>
;;;59     template <typename Obj>
;;;60       Obj *Allocator<native>::NewArray (uint32_t size)
;;;61     {
;;;62       return (Obj *)Alloc (sizeof(Obj) * size);
;;;63     }
;;;64     
;;;65     template <typename native>
;;;66     template <typename Obj>
;;;67       Obj **Allocator<native>::NewlArray (uint32_t size)
;;;68     {
;;;69       return (Obj **)Alloc (sizeof(Obj *) * size);
;;;70     }
;;;71     
;;;72     template <typename native>
;;;73     template <typename Obj>
;;;74       int32_t Allocator<native>::Delete (Obj *o)
;;;75     {
;;;76       return Free(static_cast<void *>(o)); 
000002  f7ffbffe          B.W      _Z4FreePv ; Free(void*)
;;;77     }
;;;78     
                          ENDP


                          AREA ||area_number.44||, COMGROUP=_ZN9AllocatorIN6Physic6Ball2DEE6DeleteIPS1_EEiPT_, LINKORDER=||t._ZN9AllocatorIN6Physic6Ball2DEE6DeleteIPS1_EEiPT_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.44||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN9AllocatorIN6Physic6Ball2DEE6DeleteIPS1_EEiPT_||
                          DCD      0x00000001

                          AREA ||t._ZN9AllocatorIN6Physic6Ball2DEE6DeleteI6lArrayIS1_EEEiPT_||, COMGROUP=_ZN9AllocatorIN6Physic6Ball2DEE6DeleteI6lArrayIS1_EEEiPT_, CODE, READONLY, ALIGN=1

                  _ZN9AllocatorIN6Physic6Ball2DEE6DeleteI6lArrayIS1_EEEiPT_ PROC ; int Allocator<Physic::Ball2D>::Delete<lArray<Physic::Ball2D>>(T1*)
;;;25       template <typename Obj>
;;;26         int32_t Delete (Obj *); 
000000  4608              MOV      r0,r1
;;;27     	
;;;28         native *New ();
;;;29         native *New (uint32_t); 
;;;30     	  native *NewArray (uint32_t);
;;;31     	  native **NewlArray (uint32_t);
;;;32       
;;;33       private:     
;;;34     };
;;;35     
;;;36     void *Alloc (uint32_t);
;;;37     int32_t Free (void *); 
;;;38     
;;;39     /*
;;;40     Allocator::Allocator () {}
;;;41     Allocator::~Allocator() {}
;;;42     */
;;;43     
;;;44     template <typename native>
;;;45     template <typename Obj>
;;;46       Obj *Allocator<native>::New ()
;;;47     {
;;;48       return (Obj *)Alloc (sizeof(Obj));
;;;49     }
;;;50     
;;;51     template <typename native>
;;;52     template <typename Obj>
;;;53       Obj *Allocator<native>::New (uint32_t size)
;;;54     {
;;;55       return (Obj *)Alloc (sizeof(Obj) + size);
;;;56     }
;;;57     
;;;58     template <typename native>
;;;59     template <typename Obj>
;;;60       Obj *Allocator<native>::NewArray (uint32_t size)
;;;61     {
;;;62       return (Obj *)Alloc (sizeof(Obj) * size);
;;;63     }
;;;64     
;;;65     template <typename native>
;;;66     template <typename Obj>
;;;67       Obj **Allocator<native>::NewlArray (uint32_t size)
;;;68     {
;;;69       return (Obj **)Alloc (sizeof(Obj *) * size);
;;;70     }
;;;71     
;;;72     template <typename native>
;;;73     template <typename Obj>
;;;74       int32_t Allocator<native>::Delete (Obj *o)
;;;75     {
;;;76       return Free(static_cast<void *>(o)); 
000002  f7ffbffe          B.W      _Z4FreePv ; Free(void*)
;;;77     }
;;;78     
                          ENDP


                          AREA ||area_number.51||, COMGROUP=_ZN9AllocatorIN6Physic6Ball2DEE6DeleteI6lArrayIS1_EEEiPT_, LINKORDER=||t._ZN9AllocatorIN6Physic6Ball2DEE6DeleteI6lArrayIS1_EEEiPT_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.51||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN9AllocatorIN6Physic6Ball2DEE6DeleteI6lArrayIS1_EEEiPT_||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorIN6Physic6Ball2DEEC1Ev||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorIN6Physic6Ball2DEEC2Ev                  ; Alternate entry point ; List_Iterator<Physic::Ball2D>::List_Iterator__sub_object()
                  _ZN13List_IteratorIN6Physic6Ball2DEEC1Ev PROC ; List_Iterator<Physic::Ball2D>::List_Iterator()
;;;51     template <class T>
;;;52     List_Iterator<T>::List_Iterator()
;;;53     {
;;;54     }
;;;55     template <class T>
000000  4770              BX       lr
                          ENDP


                          AREA ||area_number.58||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEEC1Ev, LINKORDER=||t._ZN13List_IteratorIN6Physic6Ball2DEEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.58||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorIN6Physic6Ball2DEEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorIN6Physic6Ball2DEEplERS1_||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEEplERS1_, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorIN6Physic6Ball2DEEplERS1_ PROC ; List_Iterator<Physic::Ball2D>::operator +(Physic::Ball2D&)
;;;55     template <class T>
;;;56     bool List_Iterator<T>::operator + (T &item)
000000  6882              LDR      r2,[r0,#8]
;;;57     {
;;;58     	this->Elements++;
000002  1c52              ADDS     r2,r2,#1
000004  6082              STR      r2,[r0,#8]
;;;59     		T *i,*j;
;;;60     		if (!this->First) {
000006  6802              LDR      r2,[r0,#0]
000008  f04f0c00          MOV      r12,#0
00000c  2a00              CMP      r2,#0
00000e  d013              BEQ      |L64.56|
;;;61     			this->First = &item;
;;;62     			this->Last = &item;
;;;63     			item.rlink = (T *)0;
;;;64     			item.llink = (T *)0;
;;;65     			return true;
;;;66     		}
;;;67     		i = this->First;
;;;68     		j = (T *)0;
;;;69     		while (i != (T *)0) {
;;;70     			if (i->key > item.key) {
000010  ed910a02          VLDR     s0,[r1,#8]
                  |L64.20|
000014  edd20a02          VLDR     s1,[r2,#8]
000018  eef40ac0          VCMPE.F32 s1,s0
00001c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000020  dd12              BLE      |L64.72|
;;;71     				j = i;
000022  4613              MOV      r3,r2
;;;72     				i = i->rlink;
000024  6812              LDR      r2,[r2,#0]
000026  2a00              CMP      r2,#0                 ;69
;;;73     				continue;
000028  d1f4              BNE      |L64.20|
;;;74     			}
;;;75     			if (i->llink) {
;;;76     				i->llink->rlink = &item;
;;;77     				item.rlink = i;
;;;78     				item.llink = i->llink;
;;;79     				i->llink = &item;
;;;80     				return true;
;;;81     			}
;;;82     			item.rlink = i;
;;;83     			item.llink = (T *)0;
;;;84     			i->llink = &item;
;;;85     			this->First = &item;
;;;86     			return true;
;;;87     		}
;;;88     		j->rlink = &item;
00002a  6019              STR      r1,[r3,#0]
;;;89     		item.rlink = (T *)0;
00002c  f8c1c000          STR      r12,[r1,#0]
;;;90     		this->Last = &item;
000030  6041              STR      r1,[r0,#4]
;;;91     		item.llink = j;
000032  604b              STR      r3,[r1,#4]
;;;92     		return true;	
000034  2001              MOVS     r0,#1
;;;93     }
000036  4770              BX       lr
                  |L64.56|
000038  6001              STR      r1,[r0,#0]            ;61
00003a  6041              STR      r1,[r0,#4]            ;62
00003c  f8c1c000          STR      r12,[r1,#0]           ;63
000040  f8c1c004          STR      r12,[r1,#4]           ;64
000044  2001              MOVS     r0,#1                 ;65
000046  4770              BX       lr
                  |L64.72|
000048  6853              LDR      r3,[r2,#4]            ;75
00004a  b133              CBZ      r3,|L64.90|
00004c  6019              STR      r1,[r3,#0]            ;76
00004e  600a              STR      r2,[r1,#0]            ;77
000050  6850              LDR      r0,[r2,#4]            ;78
000052  6048              STR      r0,[r1,#4]            ;78
000054  6051              STR      r1,[r2,#4]            ;79
000056  2001              MOVS     r0,#1                 ;80
000058  4770              BX       lr
                  |L64.90|
00005a  600a              STR      r2,[r1,#0]            ;82
00005c  f8c1c004          STR      r12,[r1,#4]           ;83
000060  6051              STR      r1,[r2,#4]            ;84
000062  6001              STR      r1,[r0,#0]            ;85
000064  2001              MOVS     r0,#1                 ;86
000066  4770              BX       lr
;;;94     template <class T>
                          ENDP


                          AREA ||area_number.65||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEEplERS1_, LINKORDER=||t._ZN13List_IteratorIN6Physic6Ball2DEEplERS1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.65||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorIN6Physic6Ball2DEEplERS1_||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorIN6Physic6Ball2DEEmiERS1_||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEEmiERS1_, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorIN6Physic6Ball2DEEmiERS1_ PROC ; List_Iterator<Physic::Ball2D>::operator -(Physic::Ball2D&)
;;;94     template <class T>
;;;95     T *List_Iterator<T>::operator - (T &item)
000000  b410              PUSH     {r4}
;;;96     {
000002  4603              MOV      r3,r0
;;;97     	if (this->Elements == 0)return (T *)0;
000004  6898              LDR      r0,[r3,#8]
000006  2800              CMP      r0,#0
000008  d00f              BEQ      |L71.42|
;;;98     	this->Elements--;
00000a  1e40              SUBS     r0,r0,#1
00000c  6098              STR      r0,[r3,#8]
;;;99     	T *l = item.llink,*r = item.rlink;
00000e  6848              LDR      r0,[r1,#4]
000010  680a              LDR      r2,[r1,#0]
;;;100    		if (!l&&!r) {
000012  f04f0c00          MOV      r12,#0
000016  ea500402          ORRS     r4,r0,r2
00001a  d009              BEQ      |L71.48|
;;;101    			this->First = (T *)0;
;;;102    			this->Last = (T *)0;
;;;103    			return (T *)0;
;;;104    		}
;;;105    		if (!l) {
00001c  b178              CBZ      r0,|L71.62|
;;;106    			this->First = r;
;;;107    			r->llink = (T *)0;
;;;108    		}
;;;109    		else    l->rlink = r;
00001e  6002              STR      r2,[r0,#0]
                  |L71.32|
;;;110    		
;;;111    		if (!r) {
000020  b18a              CBZ      r2,|L71.70|
;;;112       			l->rlink = (T *)0;
;;;113    			  this->Last = l;
;;;114    		}
;;;115    		else    r->llink = l;
000022  6050              STR      r0,[r2,#4]
                  |L71.36|
;;;116    		return &item;	
;;;117    }
000024  bc10              POP      {r4}
000026  4608              MOV      r0,r1                 ;116
000028  4770              BX       lr
                  |L71.42|
00002a  bc10              POP      {r4}
00002c  2000              MOVS     r0,#0                 ;97
00002e  4770              BX       lr
                  |L71.48|
000030  f8c3c000          STR      r12,[r3,#0]           ;101
000034  f8c3c004          STR      r12,[r3,#4]           ;102
000038  bc10              POP      {r4}
00003a  2000              MOVS     r0,#0                 ;103
00003c  4770              BX       lr
                  |L71.62|
00003e  601a              STR      r2,[r3,#0]            ;106
000040  f8c2c004          STR      r12,[r2,#4]           ;107
000044  e7ec              B        |L71.32|
                  |L71.70|
000046  f8c0c000          STR      r12,[r0,#0]           ;112
00004a  6058              STR      r0,[r3,#4]            ;113
00004c  e7ea              B        |L71.36|
;;;118    
                          ENDP


                          AREA ||area_number.72||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEEmiERS1_, LINKORDER=||t._ZN13List_IteratorIN6Physic6Ball2DEEmiERS1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.72||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorIN6Physic6Ball2DEEmiERS1_||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorIN6Physic6Ball2DEEplEPS1_||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEEplEPS1_, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorIN6Physic6Ball2DEEplEPS1_ PROC ; List_Iterator<Physic::Ball2D>::operator +(Physic::Ball2D*)
;;;119    template <class T>
;;;120    bool List_Iterator<T>::operator + (T *item)
000000  f7ffbffe          B.W      _ZN13List_IteratorIN6Physic6Ball2DEEplERS1_ ; List_Iterator<Physic::Ball2D>::operator +(Physic::Ball2D&)
;;;121    {
;;;122    	return *this + *item;
;;;123    }
;;;124    
                          ENDP


                          AREA ||area_number.79||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEEplEPS1_, LINKORDER=||t._ZN13List_IteratorIN6Physic6Ball2DEEplEPS1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.79||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorIN6Physic6Ball2DEEplEPS1_||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorIN6Physic6Ball2DEEmiEPS1_||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEEmiEPS1_, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorIN6Physic6Ball2DEEmiEPS1_ PROC ; List_Iterator<Physic::Ball2D>::operator -(Physic::Ball2D*)
;;;164    template <class T>
;;;165    T *List_Iterator<T>::operator - (T *item)
000000  f7ffbffe          B.W      _ZN13List_IteratorIN6Physic6Ball2DEEmiERS1_ ; List_Iterator<Physic::Ball2D>::operator -(Physic::Ball2D&)
;;;166    {
;;;167    	return *this - *item;
;;;168    }
;;;169    /*
                          ENDP


                          AREA ||area_number.86||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEEmiEPS1_, LINKORDER=||t._ZN13List_IteratorIN6Physic6Ball2DEEmiEPS1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.86||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorIN6Physic6Ball2DEEmiEPS1_||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorIN6Physic6Ball2DEE3GetEj||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEE3GetEj, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorIN6Physic6Ball2DEE3GetEj PROC ; List_Iterator<Physic::Ball2D>::Get(unsigned)
;;;182    template <class T>
;;;183    T *List_Iterator<T>::Get (uint32_t index)
000000  6882              LDR      r2,[r0,#8]
;;;184    {
;;;185    	if (this->Elements < index) return (T *)0;
000002  428a              CMP      r2,r1
000004  d201              BCS      |L92.10|
000006  2000              MOVS     r0,#0
                  |L92.8|
;;;186    	
;;;187    	T *item = this->First;
;;;188    	while (index--)
;;;189    		  item = item->rlink;
;;;190    	return item;
;;;191    }
000008  4770              BX       lr
                  |L92.10|
00000a  6800              LDR      r0,[r0,#0]            ;187
00000c  1e49              SUBS     r1,r1,#1              ;188
00000e  d3fb              BCC      |L92.8|
                  |L92.16|
000010  6800              LDR      r0,[r0,#0]            ;189
000012  1e49              SUBS     r1,r1,#1              ;188
000014  d2fc              BCS      |L92.16|
000016  4770              BX       lr
;;;192    template <class T>
                          ENDP


                          AREA ||area_number.93||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEE3GetEj, LINKORDER=||t._ZN13List_IteratorIN6Physic6Ball2DEE3GetEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.93||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorIN6Physic6Ball2DEE3GetEj||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorIN6Physic6Ball2DEE8GetFirstEv||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEE8GetFirstEv, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorIN6Physic6Ball2DEE8GetFirstEv PROC ; List_Iterator<Physic::Ball2D>::GetFirst()
;;;198    template <class T>
;;;199    T *List_Iterator<T>::GetFirst ()
000000  6800              LDR      r0,[r0,#0]
;;;200    {
;;;201    	return this->First;
;;;202    }
000002  4770              BX       lr
;;;203    
                          ENDP


                          AREA ||area_number.100||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEE8GetFirstEv, LINKORDER=||t._ZN13List_IteratorIN6Physic6Ball2DEE8GetFirstEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.100||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorIN6Physic6Ball2DEE8GetFirstEv||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorIN6Physic6Ball2DEE7GetNextEPS1_||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEE7GetNextEPS1_, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorIN6Physic6Ball2DEE7GetNextEPS1_ PROC ; List_Iterator<Physic::Ball2D>::GetNext(Physic::Ball2D*)
;;;204    template <class T>
;;;205    T *List_Iterator<T>::GetNext (T *item)
000000  2900              CMP      r1,#0
;;;206    {
000002  d002              BEQ      |L106.10|
;;;207        if (item != (T *)0)
;;;208            if (item->rlink != (T *)0) return item->rlink;
000004  6808              LDR      r0,[r1,#0]
000006  2800              CMP      r0,#0
000008  d100              BNE      |L106.12|
                  |L106.10|
;;;209        return (T *)0;
00000a  2000              MOVS     r0,#0
                  |L106.12|
;;;210    }
00000c  4770              BX       lr
;;;211    
                          ENDP


                          AREA ||area_number.107||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEE7GetNextEPS1_, LINKORDER=||t._ZN13List_IteratorIN6Physic6Ball2DEE7GetNextEPS1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.107||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorIN6Physic6Ball2DEE7GetNextEPS1_||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorIN6Physic6Ball2DEE7ContainEv||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEE7ContainEv, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorIN6Physic6Ball2DEE7ContainEv PROC ; List_Iterator<Physic::Ball2D>::Contain()
;;;247    template <class T>
;;;248    uint32_t List_Iterator<T>::Contain ()
000000  6880              LDR      r0,[r0,#8]
;;;249    {
;;;250    	return this->Elements;
;;;251    }
000002  4770              BX       lr
;;;252    
                          ENDP


                          AREA ||area_number.114||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEE7ContainEv, LINKORDER=||t._ZN13List_IteratorIN6Physic6Ball2DEE7ContainEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.114||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorIN6Physic6Ball2DEE7ContainEv||
                          DCD      0x00000001

                          AREA ||t._ZN6lArrayIN6Physic6Ball2DEEixEj||, COMGROUP=_ZN6lArrayIN6Physic6Ball2DEEixEj, CODE, READONLY, ALIGN=1

                  _ZN6lArrayIN6Physic6Ball2DEEixEj PROC ; lArray<Physic::Ball2D>::operator [](unsigned)
;;;105    template <typename I>
;;;106    I *lArray<I>::operator [] (uint32_t i)
000000  6880              LDR      r0,[r0,#8]
;;;107    {
;;;108    	return this->larray[i];
000002  f8500021          LDR      r0,[r0,r1,LSL #2]
;;;109    }
000006  4770              BX       lr
;;;110    
                          ENDP


                          AREA ||area_number.121||, COMGROUP=_ZN6lArrayIN6Physic6Ball2DEEixEj, LINKORDER=||t._ZN6lArrayIN6Physic6Ball2DEEixEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.121||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6lArrayIN6Physic6Ball2DEEixEj||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorIN6Physic6Ball2DEE5ArrayI6lArrayIS1_EEERS2_RT_j||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEE5ArrayI6lArrayIS1_EEERS2_RT_j, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorIN6Physic6Ball2DEE5ArrayI6lArrayIS1_EEERS2_RT_j PROC ; List_Iterator<Physic::Ball2D>& List_Iterator<Physic::Ball2D>::Array<lArray<Physic::Ball2D>>(T1&, unsigned)
;;;29     		template <typename A>
;;;30     		  List_Iterator &Array (A &, uint32_t);
000000  b570              PUSH     {r4-r6,lr}
;;;31     		template <typename A>
;;;32     		  List_Iterator &Array (A *, uint32_t);
;;;33     		  /*
;;;34     	    bool operator << (T &);
;;;35     	    bool operator >> (T &);
;;;36     		  */
;;;37     	    T *Get (uint32_t index);
;;;38     	    T *GetLast ();
;;;39           T *GetFirst ();
;;;40           T *GetNext (T *);
;;;41     	    int32_t Put (T &, uint32_t index);
;;;42     	    T *Remove (uint32_t index);
;;;43     		  int32_t Remove (T *);
;;;44     		  int32_t Remove (T &);
;;;45     	    uint32_t Contain ();
;;;46     	  private:
;;;47     		  T *First, *Last;
;;;48     	    uint32_t Elements;
;;;49       };
;;;50     
;;;51     template <class T>
;;;52     List_Iterator<T>::List_Iterator()
;;;53     {
;;;54     }
;;;55     template <class T>
;;;56     bool List_Iterator<T>::operator + (T &item)
;;;57     {
;;;58     	this->Elements++;
;;;59     		T *i,*j;
;;;60     		if (!this->First) {
;;;61     			this->First = &item;
;;;62     			this->Last = &item;
;;;63     			item.rlink = (T *)0;
;;;64     			item.llink = (T *)0;
;;;65     			return true;
;;;66     		}
;;;67     		i = this->First;
;;;68     		j = (T *)0;
;;;69     		while (i != (T *)0) {
;;;70     			if (i->key > item.key) {
;;;71     				j = i;
;;;72     				i = i->rlink;
;;;73     				continue;
;;;74     			}
;;;75     			if (i->llink) {
;;;76     				i->llink->rlink = &item;
;;;77     				item.rlink = i;
;;;78     				item.llink = i->llink;
;;;79     				i->llink = &item;
;;;80     				return true;
;;;81     			}
;;;82     			item.rlink = i;
;;;83     			item.llink = (T *)0;
;;;84     			i->llink = &item;
;;;85     			this->First = &item;
;;;86     			return true;
;;;87     		}
;;;88     		j->rlink = &item;
;;;89     		item.rlink = (T *)0;
;;;90     		this->Last = &item;
;;;91     		item.llink = j;
;;;92     		return true;	
;;;93     }
;;;94     template <class T>
;;;95     T *List_Iterator<T>::operator - (T &item)
;;;96     {
;;;97     	if (this->Elements == 0)return (T *)0;
;;;98     	this->Elements--;
;;;99     	T *l = item.llink,*r = item.rlink;
;;;100    		if (!l&&!r) {
;;;101    			this->First = (T *)0;
;;;102    			this->Last = (T *)0;
;;;103    			return (T *)0;
;;;104    		}
;;;105    		if (!l) {
;;;106    			this->First = r;
;;;107    			r->llink = (T *)0;
;;;108    		}
;;;109    		else    l->rlink = r;
;;;110    		
;;;111    		if (!r) {
;;;112       			l->rlink = (T *)0;
;;;113    			  this->Last = l;
;;;114    		}
;;;115    		else    r->llink = l;
;;;116    		return &item;	
;;;117    }
;;;118    
;;;119    template <class T>
;;;120    bool List_Iterator<T>::operator + (T *item)
;;;121    {
;;;122    	return *this + *item;
;;;123    }
;;;124    
;;;125    template <class T>
;;;126    	template <typename A>
;;;127    List_Iterator<T> &List_Iterator<T>::operator + (A &array)
;;;128    {
;;;129    	uint32_t t = array.Contain();
;;;130    	while (t--) {
;;;131    		(*this) + array[t];
;;;132    	}
;;;133    	return *this;
;;;134    }
;;;135    
;;;136    template <class T>
;;;137    	template <typename A>
;;;138    List_Iterator<T> &List_Iterator<T>::operator + (A *array)
;;;139    {
;;;140    	A &a = *array;
;;;141    	return (*this) + a;
;;;142    }
;;;143    
;;;144    template <class T>
;;;145    	template <typename A>
;;;146    List_Iterator<T> &List_Iterator<T>::Array (A &array, uint32_t t)
;;;147    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;148    	while (t--) {
000006  1e54              SUBS     r4,r2,#1
000008  d309              BCC      |L127.30|
                  |L127.10|
;;;149    		(*this) + array[t];
00000a  4621              MOV      r1,r4
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       _ZN6lArrayIN6Physic6Ball2DEEixEj ; lArray<Physic::Ball2D>::operator [](unsigned)
000012  4601              MOV      r1,r0
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       _ZN13List_IteratorIN6Physic6Ball2DEEplEPS1_ ; List_Iterator<Physic::Ball2D>::operator +(Physic::Ball2D*)
00001a  1e64              SUBS     r4,r4,#1              ;148
00001c  d2f5              BCS      |L127.10|
                  |L127.30|
;;;150    	}
;;;151    	return *this;
00001e  4630              MOV      r0,r6
;;;152    }
000020  bd70              POP      {r4-r6,pc}
;;;153    
                          ENDP


                          AREA ||area_number.128||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEE5ArrayI6lArrayIS1_EEERS2_RT_j, LINKORDER=||t._ZN13List_IteratorIN6Physic6Ball2DEE5ArrayI6lArrayIS1_EEERS2_RT_j||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.128||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorIN6Physic6Ball2DEE5ArrayI6lArrayIS1_EEERS2_RT_j||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorIN6Physic6Ball2DEE5ArrayI6lArrayIS1_EEERS2_PT_j||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEE5ArrayI6lArrayIS1_EEERS2_PT_j, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorIN6Physic6Ball2DEE5ArrayI6lArrayIS1_EEERS2_PT_j PROC ; List_Iterator<Physic::Ball2D>& List_Iterator<Physic::Ball2D>::Array<lArray<Physic::Ball2D>>(T1*, unsigned)
;;;31     		template <typename A>
;;;32     		  List_Iterator &Array (A *, uint32_t);
000000  f7ffbffe          B.W      _ZN13List_IteratorIN6Physic6Ball2DEE5ArrayI6lArrayIS1_EEERS2_RT_j ; List_Iterator<Physic::Ball2D>& List_Iterator<Physic::Ball2D>::Array<lArray<Physic::Ball2D>>(T1&, unsigned)
;;;33     		  /*
;;;34     	    bool operator << (T &);
;;;35     	    bool operator >> (T &);
;;;36     		  */
;;;37     	    T *Get (uint32_t index);
;;;38     	    T *GetLast ();
;;;39           T *GetFirst ();
;;;40           T *GetNext (T *);
;;;41     	    int32_t Put (T &, uint32_t index);
;;;42     	    T *Remove (uint32_t index);
;;;43     		  int32_t Remove (T *);
;;;44     		  int32_t Remove (T &);
;;;45     	    uint32_t Contain ();
;;;46     	  private:
;;;47     		  T *First, *Last;
;;;48     	    uint32_t Elements;
;;;49       };
;;;50     
;;;51     template <class T>
;;;52     List_Iterator<T>::List_Iterator()
;;;53     {
;;;54     }
;;;55     template <class T>
;;;56     bool List_Iterator<T>::operator + (T &item)
;;;57     {
;;;58     	this->Elements++;
;;;59     		T *i,*j;
;;;60     		if (!this->First) {
;;;61     			this->First = &item;
;;;62     			this->Last = &item;
;;;63     			item.rlink = (T *)0;
;;;64     			item.llink = (T *)0;
;;;65     			return true;
;;;66     		}
;;;67     		i = this->First;
;;;68     		j = (T *)0;
;;;69     		while (i != (T *)0) {
;;;70     			if (i->key > item.key) {
;;;71     				j = i;
;;;72     				i = i->rlink;
;;;73     				continue;
;;;74     			}
;;;75     			if (i->llink) {
;;;76     				i->llink->rlink = &item;
;;;77     				item.rlink = i;
;;;78     				item.llink = i->llink;
;;;79     				i->llink = &item;
;;;80     				return true;
;;;81     			}
;;;82     			item.rlink = i;
;;;83     			item.llink = (T *)0;
;;;84     			i->llink = &item;
;;;85     			this->First = &item;
;;;86     			return true;
;;;87     		}
;;;88     		j->rlink = &item;
;;;89     		item.rlink = (T *)0;
;;;90     		this->Last = &item;
;;;91     		item.llink = j;
;;;92     		return true;	
;;;93     }
;;;94     template <class T>
;;;95     T *List_Iterator<T>::operator - (T &item)
;;;96     {
;;;97     	if (this->Elements == 0)return (T *)0;
;;;98     	this->Elements--;
;;;99     	T *l = item.llink,*r = item.rlink;
;;;100    		if (!l&&!r) {
;;;101    			this->First = (T *)0;
;;;102    			this->Last = (T *)0;
;;;103    			return (T *)0;
;;;104    		}
;;;105    		if (!l) {
;;;106    			this->First = r;
;;;107    			r->llink = (T *)0;
;;;108    		}
;;;109    		else    l->rlink = r;
;;;110    		
;;;111    		if (!r) {
;;;112       			l->rlink = (T *)0;
;;;113    			  this->Last = l;
;;;114    		}
;;;115    		else    r->llink = l;
;;;116    		return &item;	
;;;117    }
;;;118    
;;;119    template <class T>
;;;120    bool List_Iterator<T>::operator + (T *item)
;;;121    {
;;;122    	return *this + *item;
;;;123    }
;;;124    
;;;125    template <class T>
;;;126    	template <typename A>
;;;127    List_Iterator<T> &List_Iterator<T>::operator + (A &array)
;;;128    {
;;;129    	uint32_t t = array.Contain();
;;;130    	while (t--) {
;;;131    		(*this) + array[t];
;;;132    	}
;;;133    	return *this;
;;;134    }
;;;135    
;;;136    template <class T>
;;;137    	template <typename A>
;;;138    List_Iterator<T> &List_Iterator<T>::operator + (A *array)
;;;139    {
;;;140    	A &a = *array;
;;;141    	return (*this) + a;
;;;142    }
;;;143    
;;;144    template <class T>
;;;145    	template <typename A>
;;;146    List_Iterator<T> &List_Iterator<T>::Array (A &array, uint32_t t)
;;;147    {
;;;148    	while (t--) {
;;;149    		(*this) + array[t];
;;;150    	}
;;;151    	return *this;
;;;152    }
;;;153    
;;;154    template <class T>
;;;155    	template <typename A>
;;;156    List_Iterator<T> &List_Iterator<T>::Array (A *array, uint32_t t)
;;;157    {
;;;158    	A &a = *array;
;;;159    	return this->Array(a, t);
;;;160    }
;;;161    
                          ENDP


                          AREA ||area_number.135||, COMGROUP=_ZN13List_IteratorIN6Physic6Ball2DEE5ArrayI6lArrayIS1_EEERS2_PT_j, LINKORDER=||t._ZN13List_IteratorIN6Physic6Ball2DEE5ArrayI6lArrayIS1_EEERS2_PT_j||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.135||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorIN6Physic6Ball2DEE5ArrayI6lArrayIS1_EEERS2_PT_j||
                          DCD      0x00000001

                          AREA ||t._ZN9AllocatorIN6Physic8DustPartEE3NewEv||, COMGROUP=_ZN9AllocatorIN6Physic8DustPartEE3NewEv, CODE, READONLY, ALIGN=1

                  _ZN9AllocatorIN6Physic8DustPartEE3NewEv PROC ; Allocator<Physic::DustPart>::New()
;;;79     template <typename native>
;;;80       native *Allocator<native>::New ()
000000  2028              MOVS     r0,#0x28
;;;81     {
;;;82       return (native *)Alloc (sizeof(native));
000002  f7ffbffe          B.W      _Z5Allocj ; Alloc(unsigned)
;;;83     }
;;;84     
                          ENDP


                          AREA ||area_number.142||, COMGROUP=_ZN9AllocatorIN6Physic8DustPartEE3NewEv, LINKORDER=||t._ZN9AllocatorIN6Physic8DustPartEE3NewEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.142||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN9AllocatorIN6Physic8DustPartEE3NewEv||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorI4NodeIN6Physic8DustPartEfEEC1Ev||, COMGROUP=_ZN13List_IteratorI4NodeIN6Physic8DustPartEfEEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorI4NodeIN6Physic8DustPartEfEEC2Ev                  ; Alternate entry point ; List_Iterator<Node<Physic::DustPart, float>>::List_Iterator__sub_object()
                  _ZN13List_IteratorI4NodeIN6Physic8DustPartEfEEC1Ev PROC ; List_Iterator<Node<Physic::DustPart, float>>::List_Iterator()
;;;51     template <class T>
;;;52     List_Iterator<T>::List_Iterator()
;;;53     {
;;;54     }
;;;55     template <class T>
000000  4770              BX       lr
                          ENDP


                          AREA ||area_number.149||, COMGROUP=_ZN13List_IteratorI4NodeIN6Physic8DustPartEfEEC1Ev, LINKORDER=||t._ZN13List_IteratorI4NodeIN6Physic8DustPartEfEEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.149||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorI4NodeIN6Physic8DustPartEfEEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorI4NodeIN6Physic8DustPartEfEEplERS3_||, COMGROUP=_ZN13List_IteratorI4NodeIN6Physic8DustPartEfEEplERS3_, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorI4NodeIN6Physic8DustPartEfEEplERS3_ PROC ; List_Iterator<Node<Physic::DustPart, float>>::operator +(Node<Physic::DustPart, float>&)
;;;55     template <class T>
;;;56     bool List_Iterator<T>::operator + (T &item)
000000  6882              LDR      r2,[r0,#8]
;;;57     {
;;;58     	this->Elements++;
000002  1c52              ADDS     r2,r2,#1
000004  6082              STR      r2,[r0,#8]
;;;59     		T *i,*j;
;;;60     		if (!this->First) {
000006  6802              LDR      r2,[r0,#0]
000008  f04f0c00          MOV      r12,#0
00000c  2a00              CMP      r2,#0
00000e  d013              BEQ      |L155.56|
;;;61     			this->First = &item;
;;;62     			this->Last = &item;
;;;63     			item.rlink = (T *)0;
;;;64     			item.llink = (T *)0;
;;;65     			return true;
;;;66     		}
;;;67     		i = this->First;
;;;68     		j = (T *)0;
;;;69     		while (i != (T *)0) {
;;;70     			if (i->key > item.key) {
000010  ed910a03          VLDR     s0,[r1,#0xc]
                  |L155.20|
000014  edd20a03          VLDR     s1,[r2,#0xc]
000018  eef40ac0          VCMPE.F32 s1,s0
00001c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000020  dd12              BLE      |L155.72|
;;;71     				j = i;
000022  4613              MOV      r3,r2
;;;72     				i = i->rlink;
000024  6812              LDR      r2,[r2,#0]
000026  2a00              CMP      r2,#0                 ;69
;;;73     				continue;
000028  d1f4              BNE      |L155.20|
;;;74     			}
;;;75     			if (i->llink) {
;;;76     				i->llink->rlink = &item;
;;;77     				item.rlink = i;
;;;78     				item.llink = i->llink;
;;;79     				i->llink = &item;
;;;80     				return true;
;;;81     			}
;;;82     			item.rlink = i;
;;;83     			item.llink = (T *)0;
;;;84     			i->llink = &item;
;;;85     			this->First = &item;
;;;86     			return true;
;;;87     		}
;;;88     		j->rlink = &item;
00002a  6019              STR      r1,[r3,#0]
;;;89     		item.rlink = (T *)0;
00002c  f8c1c000          STR      r12,[r1,#0]
;;;90     		this->Last = &item;
000030  6041              STR      r1,[r0,#4]
;;;91     		item.llink = j;
000032  604b              STR      r3,[r1,#4]
;;;92     		return true;	
000034  2001              MOVS     r0,#1
;;;93     }
000036  4770              BX       lr
                  |L155.56|
000038  6001              STR      r1,[r0,#0]            ;61
00003a  6041              STR      r1,[r0,#4]            ;62
00003c  f8c1c000          STR      r12,[r1,#0]           ;63
000040  f8c1c004          STR      r12,[r1,#4]           ;64
000044  2001              MOVS     r0,#1                 ;65
000046  4770              BX       lr
                  |L155.72|
000048  6853              LDR      r3,[r2,#4]            ;75
00004a  b133              CBZ      r3,|L155.90|
00004c  6019              STR      r1,[r3,#0]            ;76
00004e  600a              STR      r2,[r1,#0]            ;77
000050  6850              LDR      r0,[r2,#4]            ;78
000052  6048              STR      r0,[r1,#4]            ;78
000054  6051              STR      r1,[r2,#4]            ;79
000056  2001              MOVS     r0,#1                 ;80
000058  4770              BX       lr
                  |L155.90|
00005a  600a              STR      r2,[r1,#0]            ;82
00005c  f8c1c004          STR      r12,[r1,#4]           ;83
000060  6051              STR      r1,[r2,#4]            ;84
000062  6001              STR      r1,[r0,#0]            ;85
000064  2001              MOVS     r0,#1                 ;86
000066  4770              BX       lr
;;;94     template <class T>
                          ENDP


                          AREA ||area_number.156||, COMGROUP=_ZN13List_IteratorI4NodeIN6Physic8DustPartEfEEplERS3_, LINKORDER=||t._ZN13List_IteratorI4NodeIN6Physic8DustPartEfEEplERS3_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.156||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorI4NodeIN6Physic8DustPartEfEEplERS3_||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorI4NodeIN6Physic8DustPartEfEEplEPS3_||, COMGROUP=_ZN13List_IteratorI4NodeIN6Physic8DustPartEfEEplEPS3_, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorI4NodeIN6Physic8DustPartEfEEplEPS3_ PROC ; List_Iterator<Node<Physic::DustPart, float>>::operator +(Node<Physic::DustPart, float>*)
;;;119    template <class T>
;;;120    bool List_Iterator<T>::operator + (T *item)
000000  f7ffbffe          B.W      _ZN13List_IteratorI4NodeIN6Physic8DustPartEfEEplERS3_ ; List_Iterator<Node<Physic::DustPart, float>>::operator +(Node<Physic::DustPart, float>&)
;;;121    {
;;;122    	return *this + *item;
;;;123    }
;;;124    
                          ENDP


                          AREA ||area_number.163||, COMGROUP=_ZN13List_IteratorI4NodeIN6Physic8DustPartEfEEplEPS3_, LINKORDER=||t._ZN13List_IteratorI4NodeIN6Physic8DustPartEfEEplEPS3_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.163||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorI4NodeIN6Physic8DustPartEfEEplEPS3_||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorI4NodeIN6Physic8DustPartEfEE8GetFirstEv||, COMGROUP=_ZN13List_IteratorI4NodeIN6Physic8DustPartEfEE8GetFirstEv, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorI4NodeIN6Physic8DustPartEfEE8GetFirstEv PROC ; List_Iterator<Node<Physic::DustPart, float>>::GetFirst()
;;;198    template <class T>
;;;199    T *List_Iterator<T>::GetFirst ()
000000  6800              LDR      r0,[r0,#0]
;;;200    {
;;;201    	return this->First;
;;;202    }
000002  4770              BX       lr
;;;203    
                          ENDP


                          AREA ||area_number.170||, COMGROUP=_ZN13List_IteratorI4NodeIN6Physic8DustPartEfEE8GetFirstEv, LINKORDER=||t._ZN13List_IteratorI4NodeIN6Physic8DustPartEfEE8GetFirstEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.170||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorI4NodeIN6Physic8DustPartEfEE8GetFirstEv||
                          DCD      0x00000001

                          AREA ||t._ZN10List_OrderIN6Physic8DustPartEfEplERS1_||, COMGROUP=_ZN10List_OrderIN6Physic8DustPartEfEplERS1_, CODE, READONLY, ALIGN=1

                  _ZN10List_OrderIN6Physic8DustPartEfEplERS1_ PROC ; List_Order<Physic::DustPart, float>::operator +(Physic::DustPart&)
;;;98     template <typename T_item, typename T_key>
;;;99     List_Order<T_item, T_key> &List_Order<T_item, T_key>::operator + (T_item &item)
000000  b570              PUSH     {r4-r6,lr}
;;;100    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;101    	Node<T_item, T_key> *node = this->New< Node<T_item, T_key> >();
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       _ZN9AllocatorIvE3NewI4NodeIN6Physic8DustPartEfEEEPT_v ; T1* Allocator<void>::New<Node<Physic::DustPart, float>>()
00000c  4601              MOV      r1,r0
;;;102    	if (! node) {
00000e  b129              CBZ      r1,|L176.28|
;;;103    		  return (*this);
;;;104    	} else {}
;;;105    	node->item_ = &item;
000010  608c              STR      r4,[r1,#8]
;;;106    	llist_ + node;
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       _ZN13List_IteratorI4NodeIN6Physic8DustPartEfEEplEPS3_ ; List_Iterator<Node<Physic::DustPart, float>>::operator +(Node<Physic::DustPart, float>*)
;;;107      return (*this);
000018  4628              MOV      r0,r5
;;;108    }
00001a  bd70              POP      {r4-r6,pc}
                  |L176.28|
00001c  4628              MOV      r0,r5                 ;103
00001e  bd70              POP      {r4-r6,pc}
;;;109    
                          ENDP


                          AREA ||area_number.177||, COMGROUP=_ZN10List_OrderIN6Physic8DustPartEfEplERS1_, LINKORDER=||t._ZN10List_OrderIN6Physic8DustPartEfEplERS1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.177||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10List_OrderIN6Physic8DustPartEfEplERS1_||
                          DCD      0x00000001

                          AREA ||t._ZN10List_OrderIN6Physic8DustPartEfE5BeginEv||, COMGROUP=_ZN10List_OrderIN6Physic8DustPartEfE5BeginEv, CODE, READONLY, ALIGN=1

                  _ZN10List_OrderIN6Physic8DustPartEfE5BeginEv PROC ; List_Order<Physic::DustPart, float>::Begin()
;;;64     template <typename T_item, typename T_key>
;;;65     Iterator<T_item, T_key> List_Order<T_item, T_key>::Begin ()
000000  f7ffbffe          B.W      _ZN13List_IteratorI4NodeIN6Physic8DustPartEfEE8GetFirstEv ; List_Iterator<Node<Physic::DustPart, float>>::GetFirst()
;;;66     {
;;;67     	Iterator<T_item, T_key> I;
;;;68     	I.node_ = llist_.GetFirst();
;;;69     	return I;
;;;70     }
;;;71     
                          ENDP


                          AREA ||area_number.184||, COMGROUP=_ZN10List_OrderIN6Physic8DustPartEfE5BeginEv, LINKORDER=||t._ZN10List_OrderIN6Physic8DustPartEfE5BeginEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.184||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10List_OrderIN6Physic8DustPartEfE5BeginEv||
                          DCD      0x00000001

                          AREA ||t._ZN10List_OrderIN6Physic8DustPartEfEC1Ev||, COMGROUP=_ZN10List_OrderIN6Physic8DustPartEfEC1Ev, CODE, READONLY, ALIGN=1

                  _ZN10List_OrderIN6Physic8DustPartEfEC2Ev                  ; Alternate entry point ; List_Order<Physic::DustPart, float>::List_Order__sub_object()
                  _ZN10List_OrderIN6Physic8DustPartEfEC1Ev PROC ; List_Order<Physic::DustPart, float>::List_Order()
;;;86     template <typename T_item, typename T_key>
;;;87     List_Order<T_item, T_key>::List_Order (){}
;;;88     
000000  f7ffbffe          B.W      _ZN13List_IteratorI4NodeIN6Physic8DustPartEfEEC1Ev ; List_Iterator<Node<Physic::DustPart, float>>::List_Iterator()
                          ENDP


                          AREA ||area_number.191||, COMGROUP=_ZN10List_OrderIN6Physic8DustPartEfEC1Ev, LINKORDER=||t._ZN10List_OrderIN6Physic8DustPartEfEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.191||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10List_OrderIN6Physic8DustPartEfEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN10List_OrderIN6Physic8DustPartEfED1Ev||, COMGROUP=_ZN10List_OrderIN6Physic8DustPartEfED1Ev, CODE, READONLY, ALIGN=1

                  _ZN10List_OrderIN6Physic8DustPartEfED2Ev                  ; Alternate entry point ; List_Order<Physic::DustPart, float>::~List_Order__sub_object()
                  _ZN10List_OrderIN6Physic8DustPartEfED1Ev PROC ; List_Order<Physic::DustPart, float>::~List_Order()
;;;89     template <typename T_item, typename T_key>
;;;90     List_Order<T_item, T_key>::~List_Order (){}
;;;91     
000000  4770              BX       lr
                          ENDP


                          AREA ||area_number.198||, COMGROUP=_ZN10List_OrderIN6Physic8DustPartEfED1Ev, LINKORDER=||t._ZN10List_OrderIN6Physic8DustPartEfED1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.198||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10List_OrderIN6Physic8DustPartEfED1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN6lArrayIN6Physic6Ball2DEEclEj||, COMGROUP=_ZN6lArrayIN6Physic6Ball2DEEclEj, CODE, READONLY, ALIGN=1

                  _ZN6lArrayIN6Physic6Ball2DEEclEj PROC ; lArray<Physic::Ball2D>::operator ()(unsigned)
;;;57     template <typename I>
;;;58     void lArray<I>::operator () (uint32_t q)
000000  b570              PUSH     {r4-r6,lr}
;;;59     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;60     	this->larray = this->NewlArray(q);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN9AllocatorIN6Physic6Ball2DEE9NewlArrayEj ; Allocator<Physic::Ball2D>::NewlArray(unsigned)
00000e  60a0              STR      r0,[r4,#8]
;;;61     	
;;;62     	if (this->larray == (I **)0) {
000010  2800              CMP      r0,#0
000012  d002              BEQ      |L204.26|
;;;63     		return;
;;;64     	} else {}
;;;65     	this->Elements = q;
000014  6025              STR      r5,[r4,#0]
;;;66       this->P = 0;
000016  2000              MOVS     r0,#0
000018  6060              STR      r0,[r4,#4]
                  |L204.26|
;;;67     }
00001a  bd70              POP      {r4-r6,pc}
;;;68     
                          ENDP


                          AREA ||area_number.205||, COMGROUP=_ZN6lArrayIN6Physic6Ball2DEEclEj, LINKORDER=||t._ZN6lArrayIN6Physic6Ball2DEEclEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.205||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6lArrayIN6Physic6Ball2DEEclEj||
                          DCD      0x00000001

                          AREA ||t._ZN6lArrayIN6Physic6Ball2DEE3AddEPS1_j||, COMGROUP=_ZN6lArrayIN6Physic6Ball2DEE3AddEPS1_j, CODE, READONLY, ALIGN=1

                  _ZN6lArrayIN6Physic6Ball2DEE3AddEPS1_j PROC ; lArray<Physic::Ball2D>::Add(Physic::Ball2D*, unsigned)
;;;137    template <typename I>
;;;138    void lArray<I>::Add (I *item, uint32_t i)
000000  6803              LDR      r3,[r0,#0]
;;;139    {
;;;140    	if (i < this->Elements) {
000002  4293              CMP      r3,r2
000004  d902              BLS      |L211.12|
;;;141    	    this->larray[i] = item;
000006  6880              LDR      r0,[r0,#8]
000008  f8401022          STR      r1,[r0,r2,LSL #2]
                  |L211.12|
;;;142    	} else {}
;;;143    }
00000c  4770              BX       lr
;;;144    
                          ENDP


                          AREA ||area_number.212||, COMGROUP=_ZN6lArrayIN6Physic6Ball2DEE3AddEPS1_j, LINKORDER=||t._ZN6lArrayIN6Physic6Ball2DEE3AddEPS1_j||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.212||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6lArrayIN6Physic6Ball2DEE3AddEPS1_j||
                          DCD      0x00000001

                          AREA ||t._ZN6lArrayIN6Physic6Ball2DEED1Ev||, COMGROUP=_ZN6lArrayIN6Physic6Ball2DEED1Ev, CODE, READONLY, ALIGN=1

                  _ZN6lArrayIN6Physic6Ball2DEED2Ev                  ; Alternate entry point ; lArray<Physic::Ball2D>::~lArray__sub_object()
                  _ZN6lArrayIN6Physic6Ball2DEED1Ev PROC ; lArray<Physic::Ball2D>::~lArray()
;;;49     template <typename I>
;;;50     lArray<I>::~lArray () 
;;;51     {
;;;52       this->Delete(this->larray);
;;;53     	this->Delete(this);
;;;54     }
;;;55     
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  68a1              LDR      r1,[r4,#8]
000008  f7fffffe          BL       _ZN9AllocatorIN6Physic6Ball2DEE6DeleteIPS1_EEiPT_ ; int Allocator<Physic::Ball2D>::Delete<Physic::Ball2D*>(T1*)
00000c  4621              MOV      r1,r4
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       _ZN9AllocatorIN6Physic6Ball2DEE6DeleteI6lArrayIS1_EEEiPT_ ; int Allocator<Physic::Ball2D>::Delete<lArray<Physic::Ball2D>>(T1*)
000014  4620              MOV      r0,r4
000016  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||area_number.219||, COMGROUP=_ZN6lArrayIN6Physic6Ball2DEED1Ev, LINKORDER=||t._ZN6lArrayIN6Physic6Ball2DEED1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.219||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6lArrayIN6Physic6Ball2DEED1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN7storage3MapILi2EN6Physic8DustPartEfEC1Ev||, COMGROUP=_ZN7storage3MapILi2EN6Physic8DustPartEfEC1Ev, CODE, READONLY, ALIGN=2

                  _ZN7storage3MapILi2EN6Physic8DustPartEfEC2Ev                  ; Alternate entry point ; storage::Map<(int)2, Physic::DustPart, float>::Map__sub_object()
                  _ZN7storage3MapILi2EN6Physic8DustPartEfEC1Ev PROC ; storage::Map<(int)2, Physic::DustPart, float>::Map()
;;;82     template <const int Q, typename T_item, typename T_key>
;;;83     Map<Q, T_item, T_key>::Map (){}
;;;84     /*
000000  2303              MOVS     r3,#3
000002  220c              MOVS     r2,#0xc
000004  4901              LDR      r1,|L225.12|
000006  f7ffbffe          B.W      __aeabi_vec_ctor_nocookie_nodtor
                          ENDP

00000a  0000              DCW      0x0000
                  |L225.12|
                          DCD      _ZN10List_OrderIN6Physic8DustPartEfEC1Ev ; List_Order<Physic::DustPart, float>::List_Order()

                          AREA ||area_number.226||, COMGROUP=_ZN7storage3MapILi2EN6Physic8DustPartEfEC1Ev, LINKORDER=||t._ZN7storage3MapILi2EN6Physic8DustPartEfEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.226||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN7storage3MapILi2EN6Physic8DustPartEfEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN7storage3MapILi2EN6Physic8DustPartEfEplERS2_||, COMGROUP=_ZN7storage3MapILi2EN6Physic8DustPartEfEplERS2_, CODE, READONLY, ALIGN=1

                  _ZN7storage3MapILi2EN6Physic8DustPartEfEplERS2_ PROC ; storage::Map<(int)2, Physic::DustPart, float>::operator +(Physic::DustPart&)
;;;95     template <const int Q, typename T_item, typename T_key>
;;;96     Map<Q, T_item, T_key> &Map<Q, T_item, T_key>::operator + (T_item &item)
000000  b570              PUSH     {r4-r6,lr}
;;;97     {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;98     	for (int32_t q = Q; q >= 0; q--) {
000006  2402              MOVS     r4,#2
                  |L232.8|
;;;99     		  list_[q] + item;
000008  eb040044          ADD      r0,r4,r4,LSL #1
00000c  eb050080          ADD      r0,r5,r0,LSL #2
000010  4631              MOV      r1,r6
000012  f7fffffe          BL       _ZN10List_OrderIN6Physic8DustPartEfEplERS1_ ; List_Order<Physic::DustPart, float>::operator +(Physic::DustPart&)
000016  1e64              SUBS     r4,r4,#1              ;98
000018  2c00              CMP      r4,#0                 ;98
00001a  daf5              BGE      |L232.8|
;;;100    	}
;;;101      return (*this);
00001c  4628              MOV      r0,r5
;;;102    }
00001e  bd70              POP      {r4-r6,pc}
;;;103    
                          ENDP


                          AREA ||area_number.233||, COMGROUP=_ZN7storage3MapILi2EN6Physic8DustPartEfEplERS2_, LINKORDER=||t._ZN7storage3MapILi2EN6Physic8DustPartEfEplERS2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.233||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN7storage3MapILi2EN6Physic8DustPartEfEplERS2_||
                          DCD      0x00000001

                          AREA ||t._ZN7storage3MapILi2EN6Physic8DustPartEfEplEPS2_||, COMGROUP=_ZN7storage3MapILi2EN6Physic8DustPartEfEplEPS2_, CODE, READONLY, ALIGN=1

                  _ZN7storage3MapILi2EN6Physic8DustPartEfEplEPS2_ PROC ; storage::Map<(int)2, Physic::DustPart, float>::operator +(Physic::DustPart*)
;;;104    template <const int Q, typename T_item, typename T_key>
;;;105    Map<Q, T_item, T_key> &Map<Q, T_item, T_key>::operator + (T_item *item)
000000  f7ffbffe          B.W      _ZN7storage3MapILi2EN6Physic8DustPartEfEplERS2_ ; storage::Map<(int)2, Physic::DustPart, float>::operator +(Physic::DustPart&)
;;;106    {
;;;107    	T_item &lval = *item;
;;;108      return (*this) + lval;
;;;109    }
;;;110    
                          ENDP


                          AREA ||area_number.240||, COMGROUP=_ZN7storage3MapILi2EN6Physic8DustPartEfEplEPS2_, LINKORDER=||t._ZN7storage3MapILi2EN6Physic8DustPartEfEplEPS2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.240||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN7storage3MapILi2EN6Physic8DustPartEfEplEPS2_||
                          DCD      0x00000001

                          AREA ||t._ZN7storage3MapILi2EN6Physic8DustPartEfE5BeginEv||, COMGROUP=_ZN7storage3MapILi2EN6Physic8DustPartEfE5BeginEv, CODE, READONLY, ALIGN=1

                  _ZN7storage3MapILi2EN6Physic8DustPartEfE5BeginEv PROC ; storage::Map<(int)2, Physic::DustPart, float>::Begin()
;;;57     template <const int Q, typename T_item, typename T_key>
;;;58     MapIterator<Q, T_item, T_key> Map<Q, T_item, T_key>::Begin ()
000000  b570              PUSH     {r4-r6,lr}
;;;59     {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;60     	for (int32_t q = Q; q >= 0; q--) {
000006  2402              MOVS     r4,#2
                  |L246.8|
;;;61     		iterator_.iterator_[q] = list_[q].Begin();
000008  eb040044          ADD      r0,r4,r4,LSL #1
00000c  eb050080          ADD      r0,r5,r0,LSL #2
000010  f7fffffe          BL       _ZN10List_OrderIN6Physic8DustPartEfE5BeginEv ; List_Order<Physic::DustPart, float>::Begin()
000014  eb050184          ADD      r1,r5,r4,LSL #2
000018  6248              STR      r0,[r1,#0x24]
00001a  1e64              SUBS     r4,r4,#1              ;60
00001c  2c00              CMP      r4,#0                 ;60
00001e  daf3              BGE      |L246.8|
;;;62     	}
;;;63     	return iterator_;
000020  6aa9              LDR      r1,[r5,#0x28]
000022  6a68              LDR      r0,[r5,#0x24]
000024  6071              STR      r1,[r6,#4]
000026  6030              STR      r0,[r6,#0]
;;;64     }
000028  bd70              POP      {r4-r6,pc}
;;;65     
                          ENDP


                          AREA ||area_number.247||, COMGROUP=_ZN7storage3MapILi2EN6Physic8DustPartEfE5BeginEv, LINKORDER=||t._ZN7storage3MapILi2EN6Physic8DustPartEfE5BeginEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.247||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN7storage3MapILi2EN6Physic8DustPartEfE5BeginEv||
                          DCD      0x00000001

                          AREA ||i._ZN7storage3MapILi2EN6Physic8DustPartEfED1Ev||, COMGROUP=_ZN7storage3MapILi2EN6Physic8DustPartEfED1Ev, CODE, READONLY, ALIGN=2

                  _ZN7storage3MapILi2EN6Physic8DustPartEfED2Ev                  ; Alternate entry point ; storage::Map<(int)2, Physic::DustPart, float>::~Map__sub_object()
                  _ZN7storage3MapILi2EN6Physic8DustPartEfED1Ev PROC ; storage::Map<(int)2, Physic::DustPart, float>::~Map()
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  2303              MOVS     r3,#3
000006  220c              MOVS     r2,#0xc
000008  4902              LDR      r1,|L253.20|
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       __aeabi_vec_dtor
000010  4620              MOV      r0,r4
000012  bd10              POP      {r4,pc}
                          ENDP

                  |L253.20|
                          DCD      _ZN10List_OrderIN6Physic8DustPartEfED1Ev ; List_Order<Physic::DustPart, float>::~List_Order()

                          AREA ||area_number.254||, COMGROUP=_ZN7storage3MapILi2EN6Physic8DustPartEfED1Ev, LINKORDER=||i._ZN7storage3MapILi2EN6Physic8DustPartEfED1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.254||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7storage3MapILi2EN6Physic8DustPartEfED1Ev||
                          DCD      0x00000001
