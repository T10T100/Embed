; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\objects\stm32f4xx_hal_cortex.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f4xx_hal_cortex.d --cpu=Cortex-M4.fp --apcs=interwork -O1 -Otime --diag_suppress=9931 -I.\device\GUI\inc -I.\device\hardware\inc -I.\device\init\inc -I.\misc\inc -I.\user\inc -I..\tester_1.03 -I.\memory\inc -I.\drivers\inc -ID:\myKeil\tester_1.03\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F417xx -DSTM32F417xx -DColorDepthBpp16 -Dtftili9486 -DSOFTWARE_GL -DGUI_ALLIGN_LAYSIZE_TO_POW2 --omf_browse=.\objects\stm32f4xx_hal_cortex.crf drivers\src\stm32f4xx_hal_cortex.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_SetPriorityGrouping PROC
;;;160      */
;;;161    void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
000000  f0000007          AND      r0,r0,#7
000004  4a7a              LDR      r2,|L1.496|
000006  6811              LDR      r1,[r2,#0]
000008  f64f03ff          MOV      r3,#0xf8ff
00000c  4019              ANDS     r1,r1,r3
00000e  ea412000          ORR      r0,r1,r0,LSL #8
000012  f04070fd          ORR      r0,r0,#0x1fa0000
000016  f0406080          ORR      r0,r0,#0x4000000
00001a  6010              STR      r0,[r2,#0]
;;;162    {
;;;163      /* Check the parameters */
;;;164      assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
;;;165      
;;;166      /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
;;;167      NVIC_SetPriorityGrouping(PriorityGroup);
;;;168    }
00001c  4770              BX       lr
;;;169    
                          ENDP

                  HAL_NVIC_SetPriority PROC
;;;182      */
;;;183    void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
00001e  b410              PUSH     {r4}
000020  4b73              LDR      r3,|L1.496|
000022  681b              LDR      r3,[r3,#0]
000024  f3c32302          UBFX     r3,r3,#8,#3
000028  f1c30c07          RSB      r12,r3,#7
00002c  f1bc0f04          CMP      r12,#4
;;;184    { 
000030  d901              BLS      |L1.54|
000032  f04f0c04          MOV      r12,#4
                  |L1.54|
000036  1d1c              ADDS     r4,r3,#4
000038  2c07              CMP      r4,#7
00003a  d201              BCS      |L1.64|
00003c  2300              MOVS     r3,#0
00003e  e000              B        |L1.66|
                  |L1.64|
000040  1edb              SUBS     r3,r3,#3
                  |L1.66|
000042  2401              MOVS     r4,#1
000044  fa04fc0c          LSL      r12,r4,r12
000048  f1ac0c01          SUB      r12,r12,#1
00004c  ea0c0101          AND      r1,r12,r1
000050  4099              LSLS     r1,r1,r3
000052  fa04f303          LSL      r3,r4,r3
000056  1e5b              SUBS     r3,r3,#1
000058  401a              ANDS     r2,r2,r3
00005a  4311              ORRS     r1,r1,r2
00005c  2800              CMP      r0,#0
00005e  da08              BGE      |L1.114|
000060  f000000f          AND      r0,r0,#0xf
000064  f10020e0          ADD      r0,r0,#0xe000e000
000068  0109              LSLS     r1,r1,#4
00006a  f8801d14          STRB     r1,[r0,#0xd14]
;;;185      uint32_t prioritygroup = 0x00;
;;;186      
;;;187      /* Check the parameters */
;;;188      assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
;;;189      assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
;;;190      
;;;191      prioritygroup = NVIC_GetPriorityGrouping();
;;;192      
;;;193      NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
;;;194    }
00006e  bc10              POP      {r4}
000070  4770              BX       lr
                  |L1.114|
000072  f10020e0          ADD      r0,r0,#0xe000e000
000076  0109              LSLS     r1,r1,#4
000078  f8801400          STRB     r1,[r0,#0x400]
00007c  bc10              POP      {r4}
00007e  4770              BX       lr
;;;195    
                          ENDP

                  HAL_NVIC_EnableIRQ PROC
;;;204      */
;;;205    void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
000080  f000011f          AND      r1,r0,#0x1f
000084  2201              MOVS     r2,#1
000086  fa02f101          LSL      r1,r2,r1
00008a  0940              LSRS     r0,r0,#5
00008c  0080              LSLS     r0,r0,#2
00008e  f10020e0          ADD      r0,r0,#0xe000e000
000092  f8c01100          STR      r1,[r0,#0x100]
;;;206    {
;;;207      /* Check the parameters */
;;;208      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;209      
;;;210      /* Enable interrupt */
;;;211      NVIC_EnableIRQ(IRQn);
;;;212    }
000096  4770              BX       lr
;;;213    
                          ENDP

                  HAL_NVIC_DisableIRQ PROC
;;;220      */
;;;221    void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
000098  f000011f          AND      r1,r0,#0x1f
00009c  2201              MOVS     r2,#1
00009e  fa02f101          LSL      r1,r2,r1
0000a2  0940              LSRS     r0,r0,#5
0000a4  0080              LSLS     r0,r0,#2
0000a6  f10020e0          ADD      r0,r0,#0xe000e000
0000aa  f8c01180          STR      r1,[r0,#0x180]
;;;222    {
;;;223      /* Check the parameters */
;;;224      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;225      
;;;226      /* Disable interrupt */
;;;227      NVIC_DisableIRQ(IRQn);
;;;228    }
0000ae  4770              BX       lr
;;;229    
                          ENDP

                  HAL_NVIC_SystemReset PROC
;;;233      */
;;;234    void HAL_NVIC_SystemReset(void)
0000b0  f3bf8f4f          DSB      
0000b4  484e              LDR      r0,|L1.496|
0000b6  6801              LDR      r1,[r0,#0]
0000b8  4a4e              LDR      r2,|L1.500|
0000ba  f40161e0          AND      r1,r1,#0x700
0000be  4311              ORRS     r1,r1,r2
0000c0  6001              STR      r1,[r0,#0]
0000c2  f3bf8f4f          DSB      
                  |L1.198|
0000c6  bf00              NOP      
0000c8  e7fd              B        |L1.198|
;;;235    {
;;;236      /* System Reset */
;;;237      NVIC_SystemReset();
;;;238    }
;;;239    
                          ENDP

                  HAL_SYSTICK_Config PROC
;;;246      */
;;;247    uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
0000ca  1e40              SUBS     r0,r0,#1
0000cc  f1b07f80          CMP      r0,#0x1000000
;;;248    {
0000d0  d301              BCC      |L1.214|
0000d2  2001              MOVS     r0,#1
;;;249       return SysTick_Config(TicksNumb);
;;;250    }
0000d4  4770              BX       lr
                  |L1.214|
0000d6  f04f21e0          MOV      r1,#0xe000e000
0000da  6148              STR      r0,[r1,#0x14]
0000dc  4a46              LDR      r2,|L1.504|
0000de  20f0              MOVS     r0,#0xf0
0000e0  7010              STRB     r0,[r2,#0]
0000e2  2000              MOVS     r0,#0
0000e4  6188              STR      r0,[r1,#0x18]
0000e6  2007              MOVS     r0,#7
0000e8  6108              STR      r0,[r1,#0x10]
0000ea  2000              MOVS     r0,#0
0000ec  4770              BX       lr
;;;251    /**
                          ENDP

                  HAL_NVIC_GetPriorityGrouping PROC
;;;274      */
;;;275    uint32_t HAL_NVIC_GetPriorityGrouping(void)
0000ee  4840              LDR      r0,|L1.496|
0000f0  6800              LDR      r0,[r0,#0]
0000f2  f3c02002          UBFX     r0,r0,#8,#3
;;;276    {
;;;277      /* Get the PRIGROUP[10:8] field value */
;;;278      return NVIC_GetPriorityGrouping();
;;;279    }
0000f6  4770              BX       lr
;;;280    
                          ENDP

                  HAL_NVIC_GetPriority PROC
;;;301      */
;;;302    void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
0000f8  b430              PUSH     {r4,r5}
0000fa  2800              CMP      r0,#0
;;;303    {
0000fc  da08              BGE      |L1.272|
0000fe  f000000f          AND      r0,r0,#0xf
000102  f10020e0          ADD      r0,r0,#0xe000e000
000106  f8900d14          LDRB     r0,[r0,#0xd14]
00010a  ea4f1c10          LSR      r12,r0,#4
00010e  e005              B        |L1.284|
                  |L1.272|
000110  f10020e0          ADD      r0,r0,#0xe000e000
000114  f8900400          LDRB     r0,[r0,#0x400]
000118  ea4f1c10          LSR      r12,r0,#4
                  |L1.284|
00011c  f0010007          AND      r0,r1,#7
000120  f1c00107          RSB      r1,r0,#7
000124  2904              CMP      r1,#4
000126  d900              BLS      |L1.298|
000128  2104              MOVS     r1,#4
                  |L1.298|
00012a  1d04              ADDS     r4,r0,#4
00012c  2c07              CMP      r4,#7
00012e  d201              BCS      |L1.308|
000130  2000              MOVS     r0,#0
000132  e000              B        |L1.310|
                  |L1.308|
000134  1ec0              SUBS     r0,r0,#3
                  |L1.310|
000136  2401              MOVS     r4,#1
000138  fa2cf500          LSR      r5,r12,r0
00013c  fa04f101          LSL      r1,r4,r1
000140  1e49              SUBS     r1,r1,#1
000142  4029              ANDS     r1,r1,r5
000144  6011              STR      r1,[r2,#0]
000146  fa04f000          LSL      r0,r4,r0
00014a  1e40              SUBS     r0,r0,#1
00014c  ea00000c          AND      r0,r0,r12
000150  6018              STR      r0,[r3,#0]
;;;304      /* Check the parameters */
;;;305      assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
;;;306     /* Get priority for Cortex-M system or device specific interrupts */
;;;307      NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
;;;308    }
000152  bc30              POP      {r4,r5}
000154  4770              BX       lr
;;;309    
                          ENDP

                  HAL_NVIC_SetPendingIRQ PROC
;;;316      */
;;;317    void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
000156  f000011f          AND      r1,r0,#0x1f
00015a  2201              MOVS     r2,#1
00015c  fa02f101          LSL      r1,r2,r1
000160  0940              LSRS     r0,r0,#5
000162  0080              LSLS     r0,r0,#2
000164  f10020e0          ADD      r0,r0,#0xe000e000
000168  f8c01200          STR      r1,[r0,#0x200]
;;;318    {
;;;319      /* Check the parameters */
;;;320      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;321      
;;;322      /* Set interrupt pending */
;;;323      NVIC_SetPendingIRQ(IRQn);
;;;324    }
00016c  4770              BX       lr
;;;325    
                          ENDP

                  HAL_NVIC_GetPendingIRQ PROC
;;;334      */
;;;335    uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
00016e  0941              LSRS     r1,r0,#5
000170  0089              LSLS     r1,r1,#2
000172  f10121e0          ADD      r1,r1,#0xe000e000
000176  f8d11200          LDR      r1,[r1,#0x200]
00017a  f000001f          AND      r0,r0,#0x1f
00017e  2201              MOVS     r2,#1
000180  fa02f000          LSL      r0,r2,r0
000184  4201              TST      r1,r0
;;;336    {
000186  d001              BEQ      |L1.396|
000188  2001              MOVS     r0,#1
;;;337      /* Check the parameters */
;;;338      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;339      
;;;340      /* Return 1 if pending else 0 */
;;;341      return NVIC_GetPendingIRQ(IRQn);
;;;342    }
00018a  4770              BX       lr
                  |L1.396|
00018c  2000              MOVS     r0,#0
00018e  4770              BX       lr
;;;343    
                          ENDP

                  HAL_NVIC_ClearPendingIRQ PROC
;;;350      */
;;;351    void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
000190  f000011f          AND      r1,r0,#0x1f
000194  2201              MOVS     r2,#1
000196  fa02f101          LSL      r1,r2,r1
00019a  0940              LSRS     r0,r0,#5
00019c  0080              LSLS     r0,r0,#2
00019e  f10020e0          ADD      r0,r0,#0xe000e000
0001a2  f8c01280          STR      r1,[r0,#0x280]
;;;352    {
;;;353      /* Check the parameters */
;;;354      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;355      
;;;356      /* Clear pending interrupt */
;;;357      NVIC_ClearPendingIRQ(IRQn);
;;;358    }
0001a6  4770              BX       lr
;;;359    
                          ENDP

                  HAL_NVIC_GetActive PROC
;;;367      */
;;;368    uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
0001a8  0941              LSRS     r1,r0,#5
0001aa  0089              LSLS     r1,r1,#2
0001ac  f10121e0          ADD      r1,r1,#0xe000e000
0001b0  f8d11300          LDR      r1,[r1,#0x300]
0001b4  f000001f          AND      r0,r0,#0x1f
0001b8  2201              MOVS     r2,#1
0001ba  fa02f000          LSL      r0,r2,r0
0001be  4201              TST      r1,r0
;;;369    {
0001c0  d001              BEQ      |L1.454|
0001c2  2001              MOVS     r0,#1
;;;370      /* Check the parameters */
;;;371      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;372      
;;;373      /* Return 1 if active else 0 */
;;;374      return NVIC_GetActive(IRQn);
;;;375    }
0001c4  4770              BX       lr
                  |L1.454|
0001c6  2000              MOVS     r0,#0
0001c8  4770              BX       lr
;;;376    
                          ENDP

                  HAL_SYSTICK_CLKSourceConfig PROC
;;;384      */
;;;385    void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
0001ca  f04f21e0          MOV      r1,#0xe000e000
;;;386    {
;;;387      /* Check the parameters */
;;;388      assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
;;;389      if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
0001ce  2804              CMP      r0,#4
0001d0  d004              BEQ      |L1.476|
;;;390      {
;;;391        SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
;;;392      }
;;;393      else
;;;394      {
;;;395        SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
0001d2  6908              LDR      r0,[r1,#0x10]
0001d4  f0200004          BIC      r0,r0,#4
0001d8  6108              STR      r0,[r1,#0x10]
;;;396      }
;;;397    }
0001da  4770              BX       lr
                  |L1.476|
0001dc  6908              LDR      r0,[r1,#0x10]         ;391
0001de  f0400004          ORR      r0,r0,#4              ;391
0001e2  6108              STR      r0,[r1,#0x10]         ;391
0001e4  4770              BX       lr
;;;398    
                          ENDP

                  HAL_SYSTICK_Callback PROC
;;;411      */
;;;412    __weak void HAL_SYSTICK_Callback(void)
0001e6  4770              BX       lr
;;;413    {
;;;414      /* NOTE : This function Should not be modified, when the callback is needed,
;;;415                the HAL_SYSTICK_Callback could be implemented in the user file
;;;416       */
;;;417    }
;;;418    
                          ENDP

                  HAL_SYSTICK_IRQHandler PROC
;;;402      */
;;;403    void HAL_SYSTICK_IRQHandler(void)
0001e8  b510              PUSH     {r4,lr}
;;;404    {
;;;405      HAL_SYSTICK_Callback();
0001ea  f7fffffe          BL       HAL_SYSTICK_Callback
;;;406    }
0001ee  bd10              POP      {r4,pc}
;;;407    
                          ENDP

                  |L1.496|
                          DCD      0xe000ed0c
                  |L1.500|
                          DCD      0x05fa0004
                  |L1.504|
                          DCD      0xe000ed23

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "drivers\\src\\stm32f4xx_hal_cortex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_cortex_c_2992dbc0___Z7__REV16j|
#line 138 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.3.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___22_stm32f4xx_hal_cortex_c_2992dbc0___Z7__REV16j| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_cortex_c_2992dbc0___Z7__REVSHi|
#line 153
|__asm___22_stm32f4xx_hal_cortex_c_2992dbc0___Z7__REVSHi| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_cortex_c_2992dbc0___Z5__RRXj|
#line 328
|__asm___22_stm32f4xx_hal_cortex_c_2992dbc0___Z5__RRXj| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
