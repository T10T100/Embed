; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\objects\geometry.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\geometry.d --cpu=Cortex-M4.fp --apcs=interwork -O1 -Otime --diag_suppress=9931 -I.\device\GUI\inc -I.\device\hardware\inc -I.\device\init\inc -I.\misc\inc -I.\user\inc -I..\tester_1.03 -I.\memory\inc -I.\drivers\inc -ID:\myKeil\tester_1.03\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F417xx -DSTM32F417xx -DColorDepthBpp16 -Dtftili9486 -DSOFTWARE_GL -DGUI_ALLIGN_LAYSIZE_TO_POW2 --omf_browse=.\objects\geometry.crf misc\src\geometry.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  _ZN11Coordinates5PlaceE3b2D PROC ; Coordinates::Place(b2D)
;;;36     
;;;37     void Coordinates::Place (b2D rect)
000000  b407              PUSH     {r0-r2}
;;;38     {
;;;39         this->X0 = rect.x;
000002  f8bd1004          LDRH     r1,[sp,#4]
000006  8001              STRH     r1,[r0,#0]
;;;40         this->Y0 = rect.y;
000008  f8bd1006          LDRH     r1,[sp,#6]
00000c  8041              STRH     r1,[r0,#2]
;;;41     }
00000e  b003              ADD      sp,sp,#0xc
000010  4770              BX       lr
;;;42     
                          ENDP

                  _ZN11Coordinates5PlaceEss PROC ; Coordinates::Place(short, short)
;;;43     void Coordinates::Place (gbasic_t x, gbasic_t y)
000012  8001              STRH     r1,[r0,#0]
;;;44     {
;;;45     	this->X0 = x;
;;;46     	this->Y0 = y;
000014  8042              STRH     r2,[r0,#2]
;;;47     }
000016  4770              BX       lr
;;;48     
                          ENDP

                  _ZN11Coordinates7DisposeE3b2D PROC ; Coordinates::Dispose(b2D)
;;;49     void Coordinates::Dispose (b2D rect)
000018  b407              PUSH     {r0-r2}
;;;50     {
;;;51     	this->X0 = rect.x;
00001a  f8bd1004          LDRH     r1,[sp,#4]
00001e  8001              STRH     r1,[r0,#0]
;;;52     	this->Y0 = rect.y;
000020  f8bd1006          LDRH     r1,[sp,#6]
000024  8041              STRH     r1,[r0,#2]
;;;53     	this->W  = rect.w;
000026  f8bd1008          LDRH     r1,[sp,#8]
00002a  8081              STRH     r1,[r0,#4]
;;;54     	this->H  = rect.h;
00002c  f8bd100a          LDRH     r1,[sp,#0xa]
000030  80c1              STRH     r1,[r0,#6]
;;;55     }
000032  b003              ADD      sp,sp,#0xc
000034  4770              BX       lr
;;;56     
                          ENDP

                  _ZN11Coordinates7DisposeEssss PROC ; Coordinates::Dispose(short, short, short, short)
;;;57     void Coordinates::Dispose (gbasic_t x, gbasic_t y, gbasic_t w, gbasic_t h)
000036  f8ddc000          LDR      r12,[sp,#0]
;;;58     {
;;;59     	this->X0 = x;
00003a  8001              STRH     r1,[r0,#0]
;;;60     	this->Y0 = y;
00003c  8042              STRH     r2,[r0,#2]
;;;61     	this->W  = w;
00003e  8083              STRH     r3,[r0,#4]
;;;62     	this->H  = h;
000040  f8a0c006          STRH     r12,[r0,#6]
;;;63     }
000044  4770              BX       lr
;;;64     
                          ENDP

                  _ZN11Coordinates7GetRectEv PROC ; Coordinates::GetRect()
;;;2      
;;;3      b2D Coordinates::GetRect ()
000046  b082              SUB      sp,sp,#8
;;;4      {
;;;5      	b2D rect = {this->X0, this->Y0, this->W, this->H};
000048  880a              LDRH     r2,[r1,#0]
00004a  f8ad2000          STRH     r2,[sp,#0]
00004e  884a              LDRH     r2,[r1,#2]
000050  f8ad2002          STRH     r2,[sp,#2]
000054  888a              LDRH     r2,[r1,#4]
000056  f8ad2004          STRH     r2,[sp,#4]
00005a  88c9              LDRH     r1,[r1,#6]
00005c  f8ad1006          STRH     r1,[sp,#6]
;;;6      	return rect;
000060  9900              LDR      r1,[sp,#0]
000062  6001              STR      r1,[r0,#0]
000064  9901              LDR      r1,[sp,#4]
000066  6041              STR      r1,[r0,#4]
;;;7      }
000068  b002              ADD      sp,sp,#8
00006a  4770              BX       lr
;;;8      
                          ENDP

                  _ZN11Coordinates8GetxRectEv PROC ; Coordinates::GetxRect()
;;;9      b2D Coordinates::GetxRect ()
00006c  b082              SUB      sp,sp,#8
;;;10     {
;;;11     	b2D rect = {this->X0 + this->W, this->Y0, this->W, this->H};
00006e  880b              LDRH     r3,[r1,#0]
000070  888a              LDRH     r2,[r1,#4]
000072  4413              ADD      r3,r3,r2
000074  f8ad3000          STRH     r3,[sp,#0]
000078  884b              LDRH     r3,[r1,#2]
00007a  f8ad3002          STRH     r3,[sp,#2]
00007e  f8ad2004          STRH     r2,[sp,#4]
000082  88c9              LDRH     r1,[r1,#6]
000084  f8ad1006          STRH     r1,[sp,#6]
;;;12     	return rect;
000088  9900              LDR      r1,[sp,#0]
00008a  6001              STR      r1,[r0,#0]
00008c  9901              LDR      r1,[sp,#4]
00008e  6041              STR      r1,[r0,#4]
;;;13     }
000090  b002              ADD      sp,sp,#8
000092  4770              BX       lr
;;;14     
                          ENDP

                  _ZN11Coordinates8GetyRectEv PROC ; Coordinates::GetyRect()
;;;15     b2D Coordinates::GetyRect ()
000094  b082              SUB      sp,sp,#8
;;;16     {
;;;17     	b2D rect = {this->X0, this->Y0 + this->H, this->W, this->H};
000096  880a              LDRH     r2,[r1,#0]
000098  f8ad2000          STRH     r2,[sp,#0]
00009c  884b              LDRH     r3,[r1,#2]
00009e  88ca              LDRH     r2,[r1,#6]
0000a0  4413              ADD      r3,r3,r2
0000a2  f8ad3002          STRH     r3,[sp,#2]
0000a6  8889              LDRH     r1,[r1,#4]
0000a8  f8ad1004          STRH     r1,[sp,#4]
0000ac  f8ad2006          STRH     r2,[sp,#6]
;;;18     	return rect;
0000b0  9900              LDR      r1,[sp,#0]
0000b2  6001              STR      r1,[r0,#0]
0000b4  9901              LDR      r1,[sp,#4]
0000b6  6041              STR      r1,[r0,#4]
;;;19     }
0000b8  b002              ADD      sp,sp,#8
0000ba  4770              BX       lr
;;;20     
                          ENDP

                  _ZN11Coordinates9GetxyRectEv PROC ; Coordinates::GetxyRect()
;;;21     b2D Coordinates::GetxyRect ()
0000bc  b082              SUB      sp,sp,#8
;;;22     {
;;;23     	b2D rect = {this->X0 + this->W, this->Y0 + this->H, this->W, this->H};
0000be  880b              LDRH     r3,[r1,#0]
0000c0  888a              LDRH     r2,[r1,#4]
0000c2  4413              ADD      r3,r3,r2
0000c4  f8ad3000          STRH     r3,[sp,#0]
0000c8  884b              LDRH     r3,[r1,#2]
0000ca  88c9              LDRH     r1,[r1,#6]
0000cc  440b              ADD      r3,r3,r1
0000ce  f8ad3002          STRH     r3,[sp,#2]
0000d2  f8ad2004          STRH     r2,[sp,#4]
0000d6  f8ad1006          STRH     r1,[sp,#6]
;;;24     	return rect;
0000da  9900              LDR      r1,[sp,#0]
0000dc  6001              STR      r1,[r0,#0]
0000de  9901              LDR      r1,[sp,#4]
0000e0  6041              STR      r1,[r0,#4]
;;;25     }
0000e2  b002              ADD      sp,sp,#8
0000e4  4770              BX       lr
;;;26     
                          ENDP

                  _ZN11Coordinates4GetHEv PROC ; Coordinates::GetH()
;;;31     
;;;32     int32_t Coordinates::GetH ()
0000e6  f9b00004          LDRSH    r0,[r0,#4]
;;;33     {
;;;34     	return this->W;
;;;35     }
0000ea  4770              BX       lr
;;;36     
                          ENDP

                  _ZN11Coordinates4GetWEv PROC ; Coordinates::GetW()
;;;26     
;;;27     int32_t Coordinates::GetW ()
0000ec  f9b00004          LDRSH    r0,[r0,#4]
;;;28     {
;;;29     	return this->W;
;;;30     }
0000f0  4770              BX       lr
;;;31     
                          ENDP

                  _ZN11Coordinates10AllignLeftE3b2D PROC ; Coordinates::AllignLeft(b2D)
;;;64     
;;;65     b2D Coordinates::AllignLeft (b2D rect)
0000f2  b40f              PUSH     {r0-r3}
;;;66     {
;;;67     	this->W = rect.x;
0000f4  f8bd2008          LDRH     r2,[sp,#8]
0000f8  808a              STRH     r2,[r1,#4]
;;;68     	return this->GetRect();
0000fa  b004              ADD      sp,sp,#0x10
0000fc  e7fe              B        _ZN11Coordinates7GetRectEv ; Coordinates::GetRect()
;;;69     }
;;;70     b2D Coordinates::AllignRight (b2D rect)
                          ENDP

                  _ZN11Coordinates11AllignRightE3b2D PROC ; Coordinates::AllignRight(b2D)
0000fe  b40f              PUSH     {r0-r3}
;;;71     {
;;;72     	this->X0 = rect.x + rect.w;
000100  f8bd2008          LDRH     r2,[sp,#8]
000104  f8bd300c          LDRH     r3,[sp,#0xc]
000108  441a              ADD      r2,r2,r3
00010a  800a              STRH     r2,[r1,#0]
;;;73     	this->W -= X0;
00010c  888b              LDRH     r3,[r1,#4]
00010e  1a9a              SUBS     r2,r3,r2
000110  808a              STRH     r2,[r1,#4]
;;;74     	return this->GetRect();
000112  b004              ADD      sp,sp,#0x10
000114  e7fe              B        _ZN11Coordinates7GetRectEv ; Coordinates::GetRect()
;;;75     }
;;;76     b2D Coordinates::AllignTop (b2D rect)
                          ENDP

                  _ZN11Coordinates9AllignTopE3b2D PROC ; Coordinates::AllignTop(b2D)
000116  b40f              PUSH     {r0-r3}
;;;77     {
;;;78     	this->Y0 = rect.y + rect.h;
000118  f8bd200a          LDRH     r2,[sp,#0xa]
00011c  f8bd300e          LDRH     r3,[sp,#0xe]
000120  441a              ADD      r2,r2,r3
000122  804a              STRH     r2,[r1,#2]
;;;79     	this->H -= Y0;
000124  88cb              LDRH     r3,[r1,#6]
000126  1a9a              SUBS     r2,r3,r2
000128  80ca              STRH     r2,[r1,#6]
;;;80     	return this->GetRect();
00012a  b004              ADD      sp,sp,#0x10
00012c  e7fe              B        _ZN11Coordinates7GetRectEv ; Coordinates::GetRect()
;;;81     }
;;;82     
                          ENDP

                  _ZN11Coordinates12AllignBottomE3b2D PROC ; Coordinates::AllignBottom(b2D)
;;;83     b2D Coordinates::AllignBottom (b2D rect)
00012e  b40f              PUSH     {r0-r3}
;;;84     {
;;;85     	this->H = rect.y;
000130  f8bd200a          LDRH     r2,[sp,#0xa]
000134  80ca              STRH     r2,[r1,#6]
;;;86     	return this->GetRect();
000136  b004              ADD      sp,sp,#0x10
000138  e7fe              B        _ZN11Coordinates7GetRectEv ; Coordinates::GetRect()
;;;87     }
;;;88     
                          ENDP

                  _ZN11Coordinates5TruncEP3b2DS0_ PROC ; Coordinates::Trunc(b2D*, b2D)
;;;89     int32_t Coordinates::Trunc (b2D *rect, b2D cut)
00013a  b40f              PUSH     {r0-r3}
;;;90     {
;;;91     	
;;;92     	if (rect->x > cut.w) {
00013c  f9b12000          LDRSH    r2,[r1,#0]
000140  f9bd000c          LDRSH    r0,[sp,#0xc]
000144  4282              CMP      r2,r0
000146  dd00              BLE      |L1.330|
;;;93     		  rect->x = cut.w;
000148  8008              STRH     r0,[r1,#0]
                  |L1.330|
;;;94     	}
;;;95     	if (rect->x + rect->w > cut.w) {
00014a  f9b12000          LDRSH    r2,[r1,#0]
00014e  f9b13004          LDRSH    r3,[r1,#4]
000152  4413              ADD      r3,r3,r2
000154  4283              CMP      r3,r0
000156  dd01              BLE      |L1.348|
;;;96     		  rect->w = cut.w - rect->x;
000158  1a80              SUBS     r0,r0,r2
00015a  8088              STRH     r0,[r1,#4]
                  |L1.348|
;;;97     	}
;;;98       if (rect->y > cut.h) {
00015c  f9b12002          LDRSH    r2,[r1,#2]
000160  f9bd000e          LDRSH    r0,[sp,#0xe]
000164  4282              CMP      r2,r0
000166  dd00              BLE      |L1.362|
;;;99     		  rect->y = cut.h;
000168  8048              STRH     r0,[r1,#2]
                  |L1.362|
;;;100    	}
;;;101    	if (rect->y + rect->h > cut.h) {
00016a  f9b12002          LDRSH    r2,[r1,#2]
00016e  f9b13006          LDRSH    r3,[r1,#6]
000172  4413              ADD      r3,r3,r2
000174  4283              CMP      r3,r0
000176  dd01              BLE      |L1.380|
;;;102    		  rect->h = cut.h - rect->y;
000178  1a80              SUBS     r0,r0,r2
00017a  80c8              STRH     r0,[r1,#6]
                  |L1.380|
;;;103    	}
;;;104    	return 0;
00017c  2000              MOVS     r0,#0
;;;105    }
00017e  b004              ADD      sp,sp,#0x10
000180  4770              BX       lr
;;;106    
                          ENDP

                  _ZN11Coordinates5TruncEP3b2D PROC ; Coordinates::Trunc(b2D*)
;;;107    int32_t Coordinates::Trunc (b2D *rect)
000182  b410              PUSH     {r4}
;;;108    {
;;;109    	
;;;110    	if (rect->x > this->W) {
000184  f9b13000          LDRSH    r3,[r1,#0]
000188  f9b02004          LDRSH    r2,[r0,#4]
00018c  4293              CMP      r3,r2
00018e  dd00              BLE      |L1.402|
;;;111    		  rect->x = this->W;
000190  800a              STRH     r2,[r1,#0]
                  |L1.402|
;;;112    	}
;;;113    	if (rect->x + rect->w > this->W) {
000192  f9b12000          LDRSH    r2,[r1,#0]
000196  f9b13004          LDRSH    r3,[r1,#4]
00019a  eb020c03          ADD      r12,r2,r3
00019e  f9b03004          LDRSH    r3,[r0,#4]
0001a2  459c              CMP      r12,r3
0001a4  dd01              BLE      |L1.426|
;;;114    		  rect->w = this->W - rect->x;
0001a6  1a9b              SUBS     r3,r3,r2
0001a8  808b              STRH     r3,[r1,#4]
                  |L1.426|
;;;115    	}
;;;116      if (rect->y > this->H) {
0001aa  f9b1c002          LDRSH    r12,[r1,#2]
0001ae  f9b03006          LDRSH    r3,[r0,#6]
0001b2  459c              CMP      r12,r3
0001b4  dd00              BLE      |L1.440|
;;;117    		  rect->y = this->H;
0001b6  804b              STRH     r3,[r1,#2]
                  |L1.440|
;;;118    	}
;;;119    	if (rect->y + rect->h > this->H) {
0001b8  f9b13002          LDRSH    r3,[r1,#2]
0001bc  f9b1c006          LDRSH    r12,[r1,#6]
0001c0  eb03040c          ADD      r4,r3,r12
0001c4  f9b0c006          LDRSH    r12,[r0,#6]
0001c8  4564              CMP      r4,r12
0001ca  dd03              BLE      |L1.468|
;;;120    		  rect->h = this->H - rect->y;
0001cc  ebac0c03          SUB      r12,r12,r3
0001d0  f8a1c006          STRH     r12,[r1,#6]
                  |L1.468|
;;;121    	}
;;;122    	
;;;123    	rect->x += this->X0;
0001d4  f8b0c000          LDRH     r12,[r0,#0]
0001d8  4462              ADD      r2,r2,r12
0001da  800a              STRH     r2,[r1,#0]
;;;124    	rect->y += this->Y0;
0001dc  8840              LDRH     r0,[r0,#2]
0001de  4418              ADD      r0,r0,r3
0001e0  8048              STRH     r0,[r1,#2]
;;;125    	return 0;
;;;126    }
0001e2  bc10              POP      {r4}
0001e4  2000              MOVS     r0,#0                 ;125
0001e6  4770              BX       lr
;;;127    
                          ENDP

                  _ZN11Coordinates9TruncLineEssss PROC ; Coordinates::TruncLine(short, short, short, short)
;;;128    b2D Coordinates::TruncLine  (gbasic_t x0, gbasic_t y0,gbasic_t x, gbasic_t y)
0001e8  b430              PUSH     {r4,r5}
;;;129    {	
0001ea  b082              SUB      sp,sp,#8
0001ec  f8ddc010          LDR      r12,[sp,#0x10]
0001f0  9c05              LDR      r4,[sp,#0x14]
;;;130    	if (x0 < 0) {
0001f2  2a00              CMP      r2,#0
0001f4  da01              BGE      |L1.506|
;;;131    		  x0 = 0;
0001f6  2200              MOVS     r2,#0
0001f8  e004              B        |L1.516|
                  |L1.506|
;;;132    	} else {
;;;133    		  if (x0 > this->W) {
0001fa  f9b15004          LDRSH    r5,[r1,#4]
0001fe  4295              CMP      r5,r2
000200  da00              BGE      |L1.516|
;;;134    		     x0 = this->W;
000202  462a              MOV      r2,r5
                  |L1.516|
;;;135    	    }  else {}
;;;136    	}
;;;137    	if (y0 < 0) {
000204  2b00              CMP      r3,#0
000206  da01              BGE      |L1.524|
;;;138    		  y0 = 0;
000208  2300              MOVS     r3,#0
00020a  e004              B        |L1.534|
                  |L1.524|
;;;139    	} else {
;;;140          if (y0 > this->H) {
00020c  f9b15006          LDRSH    r5,[r1,#6]
000210  429d              CMP      r5,r3
000212  da00              BGE      |L1.534|
;;;141    		      y0 = this->H;
000214  462b              MOV      r3,r5
                  |L1.534|
;;;142    	    } else {}	
;;;143    	}
;;;144        if (x < 0) {
000216  f1bc0f00          CMP      r12,#0
00021a  da02              BGE      |L1.546|
;;;145    	    x = 0;
00021c  f04f0c00          MOV      r12,#0
000220  e004              B        |L1.556|
                  |L1.546|
;;;146    	} else {
;;;147    		  if (x > this->W) {
000222  f9b15004          LDRSH    r5,[r1,#4]
000226  4565              CMP      r5,r12
000228  da00              BGE      |L1.556|
;;;148    		      x = this->W;
00022a  46ac              MOV      r12,r5
                  |L1.556|
;;;149    	    } else {}
;;;150    	}
;;;151        if (y < 0) {
00022c  2c00              CMP      r4,#0
00022e  da01              BGE      |L1.564|
;;;152    		  y = 0;
000230  2400              MOVS     r4,#0
000232  e004              B        |L1.574|
                  |L1.564|
;;;153    	} else {
;;;154    	    if (y > this->H) {
000234  f9b15006          LDRSH    r5,[r1,#6]
000238  42a5              CMP      r5,r4
00023a  da00              BGE      |L1.574|
;;;155    		      y = this->H;
00023c  462c              MOV      r4,r5
                  |L1.574|
;;;156    	    } else {}
;;;157    	}
;;;158    	
;;;159    	x0 += this->X0;
00023e  880d              LDRH     r5,[r1,#0]
000240  442a              ADD      r2,r2,r5
;;;160    	y0 += this->Y0;
000242  8849              LDRH     r1,[r1,#2]
000244  440b              ADD      r3,r3,r1
;;;161    	x  += this->X0;
000246  44ac              ADD      r12,r12,r5
;;;162    	y  += this->Y0;
000248  4421              ADD      r1,r1,r4
;;;163    	b2D rect = {x0, y0, x, y};
00024a  f8ad2000          STRH     r2,[sp,#0]
00024e  f8ad3002          STRH     r3,[sp,#2]
000252  f8adc004          STRH     r12,[sp,#4]
000256  f8ad1006          STRH     r1,[sp,#6]
;;;164    	return  rect;
00025a  9900              LDR      r1,[sp,#0]
00025c  6001              STR      r1,[r0,#0]
00025e  9901              LDR      r1,[sp,#4]
000260  6041              STR      r1,[r0,#4]
;;;165    }
000262  b002              ADD      sp,sp,#8
000264  bc30              POP      {r4,r5}
000266  4770              BX       lr
;;;166    
                          ENDP

                  _ZN5gTest17TestLineIntersectEffffffff PROC ; gTest::TestLineIntersect(float, float, float, float, float, float, float, float)
;;;169    
;;;170    bool gTest::TestLineIntersect (float xa, float ya, float xb, float yb,\
000268  ee612a22          VMUL.F32 s5,s2,s5
;;;171                            float xc, float yc, float xd, float yd )
;;;172    {
;;;173      float v1, v2, v3, v4;
;;;174      
;;;175      v1 = xb * yc - yb * xc;
00026c  ee412ac2          VMLS.F32 s5,s3,s4
;;;176      v2 = xb * yd - yb * xd;
000270  ee212a23          VMUL.F32 s4,s2,s7
000274  ee012ac3          VMLS.F32 s4,s3,s6
;;;177      v1 *= v2;
000278  ee222a82          VMUL.F32 s4,s5,s4
;;;178      if (v1 > 0) {
00027c  eeb52ac0          VCMPE.F32 s4,#0.0
000280  eef1fa10          VMRS     APSR_nzcv,FPSCR
000284  dd01              BLE      |L1.650|
;;;179          return false;
000286  2000              MOVS     r0,#0
;;;180      } else {}
;;;181          
;;;182      v3 = xd * ya - yd * xa;
;;;183      v4 = xd * yb - yd * xb;
;;;184      v3 *= v4;
;;;185      if (v3 > 0) {
;;;186          return false;
;;;187      } else {}
;;;188    
;;;189      return true;
;;;190    }
000288  4770              BX       lr
                  |L1.650|
00028a  ee630a20          VMUL.F32 s1,s6,s1              ;182
00028e  ee430ac0          VMLS.F32 s1,s7,s0              ;182
000292  ee230a21          VMUL.F32 s0,s6,s3              ;183
000296  ee030ac1          VMLS.F32 s0,s7,s2              ;183
00029a  ee200a80          VMUL.F32 s0,s1,s0              ;184
00029e  eeb50ac0          VCMPE.F32 s0,#0.0               ;185
0002a2  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;185
0002a6  dd01              BLE      |L1.684|
0002a8  2000              MOVS     r0,#0                 ;186
0002aa  4770              BX       lr
                  |L1.684|
0002ac  2001              MOVS     r0,#1                 ;189
0002ae  4770              BX       lr
;;;191    
                          ENDP

                  _ZN5gTest13TestBoxBoundsE3f2DS0_ PROC ; gTest::TestBoxBounds(f2D, f2D)
;;;192    bool gTest::TestBoxBounds (f2D r0, f2D r1)
0002b0  ed2d0b08          VPUSH    {d0-d3}
;;;193    {
;;;194    	 int32_t w0 = r0.x + r0.w, h0 = r0.y + r0.h;
0002b4  eddd1a00          VLDR     s3,[sp,#0]
0002b8  ed9d0a02          VLDR     s0,[sp,#8]
0002bc  ee310a80          VADD.F32 s0,s3,s0
0002c0  eebd2ac0          VCVT.S32.F32 s4,s0
0002c4  ed9d0a01          VLDR     s0,[sp,#4]
0002c8  eddd0a03          VLDR     s1,[sp,#0xc]
0002cc  ee700a20          VADD.F32 s1,s0,s1
0002d0  eefd2ae0          VCVT.S32.F32 s5,s1
;;;195    	 int32_t w = r1.x + r1.w, h = r1.y + r1.h;
0002d4  eddd0a04          VLDR     s1,[sp,#0x10]
0002d8  ed9d1a06          VLDR     s2,[sp,#0x18]
0002dc  ee301a81          VADD.F32 s2,s1,s2
0002e0  eebd3ac1          VCVT.S32.F32 s6,s2
0002e4  ed9d1a05          VLDR     s2,[sp,#0x14]
0002e8  eddd3a07          VLDR     s7,[sp,#0x1c]
0002ec  ee713a23          VADD.F32 s7,s2,s7
0002f0  eefd3ae3          VCVT.S32.F32 s7,s7
;;;196    	 if (w < r0.x) {
0002f4  eeb83ac3          VCVT.F32.S32 s6,s6
0002f8  eef41ac3          VCMPE.F32 s3,s6
0002fc  eef1fa10          VMRS     APSR_nzcv,FPSCR
000300  dd02              BLE      |L1.776|
;;;197    		   return false;
000302  2000              MOVS     r0,#0
;;;198    	 } else {}
;;;199    	 if (h < r0.y) {
;;;200    		   return false;
;;;201    	 } else {}
;;;202    		 
;;;203    	 if (w0 < r1.x) {
;;;204    		   return false;
;;;205    	 } else {}
;;;206    	 if (h0 < r1.y) {
;;;207    		   return false;
;;;208    	 } else {}
;;;209       return true;
;;;210    }
000304  b008              ADD      sp,sp,#0x20
000306  4770              BX       lr
                  |L1.776|
000308  eef81ae3          VCVT.F32.S32 s3,s7                 ;199
00030c  eeb40ae1          VCMPE.F32 s0,s3                 ;199
000310  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;199
000314  dd02              BLE      |L1.796|
000316  2000              MOVS     r0,#0                 ;200
000318  b008              ADD      sp,sp,#0x20
00031a  4770              BX       lr
                  |L1.796|
00031c  eeb80ac2          VCVT.F32.S32 s0,s4                 ;203
000320  eef40ac0          VCMPE.F32 s1,s0                 ;203
000324  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;203
000328  dd02              BLE      |L1.816|
00032a  2000              MOVS     r0,#0                 ;204
00032c  b008              ADD      sp,sp,#0x20
00032e  4770              BX       lr
                  |L1.816|
000330  eeb80ae2          VCVT.F32.S32 s0,s5                 ;206
000334  eeb41ac0          VCMPE.F32 s2,s0                 ;206
000338  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;206
00033c  dd02              BLE      |L1.836|
00033e  2000              MOVS     r0,#0                 ;207
000340  b008              ADD      sp,sp,#0x20
000342  4770              BX       lr
                  |L1.836|
000344  2001              MOVS     r0,#1                 ;209
000346  b008              ADD      sp,sp,#0x20
000348  4770              BX       lr
;;;211    
                          ENDP

                  _ZN5gTest14TestPointInBoxE3f2Dff PROC ; gTest::TestPointInBox(f2D, float, float)
;;;212    bool gTest::TestPointInBox (f2D r, float x, float y)
00034a  ed2d0b06          VPUSH    {d0-d2}
;;;213    {
;;;214       x -= r.x;
00034e  ed9d0a00          VLDR     s0,[sp,#0]
000352  ee320a40          VSUB.F32 s0,s4,s0
;;;215       if (x < 0) {
000356  eeb50ac0          VCMPE.F32 s0,#0.0
00035a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00035e  d202              BCS      |L1.870|
;;;216           return false;
000360  2000              MOVS     r0,#0
;;;217       } else if (x > r.w) {
;;;218           return false;
;;;219       } else {}
;;;220           
;;;221       y -= r.y;
;;;222       if (y < 0) {
;;;223           return false;
;;;224       } else if (y > r.h) {
;;;225           return false;
;;;226       } else {}
;;;227           
;;;228       return true;
;;;229    }
000362  b006              ADD      sp,sp,#0x18
000364  4770              BX       lr
                  |L1.870|
000366  eddd0a02          VLDR     s1,[sp,#8]            ;217
00036a  eef40ac0          VCMPE.F32 s1,s0                 ;217
00036e  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;217
000372  d202              BCS      |L1.890|
000374  2000              MOVS     r0,#0                 ;218
000376  b006              ADD      sp,sp,#0x18
000378  4770              BX       lr
                  |L1.890|
00037a  ed9d0a01          VLDR     s0,[sp,#4]            ;221
00037e  ee320ac0          VSUB.F32 s0,s5,s0              ;221
000382  eeb50ac0          VCMPE.F32 s0,#0.0               ;222
000386  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;222
00038a  d202              BCS      |L1.914|
00038c  2000              MOVS     r0,#0                 ;223
00038e  b006              ADD      sp,sp,#0x18
000390  4770              BX       lr
                  |L1.914|
000392  eddd0a03          VLDR     s1,[sp,#0xc]          ;224
000396  eef40ac0          VCMPE.F32 s1,s0                 ;224
00039a  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;224
00039e  d202              BCS      |L1.934|
0003a0  2000              MOVS     r0,#0                 ;225
0003a2  b006              ADD      sp,sp,#0x18
0003a4  4770              BX       lr
                  |L1.934|
0003a6  2001              MOVS     r0,#1                 ;228
0003a8  b006              ADD      sp,sp,#0x18
0003aa  4770              BX       lr
;;;230    
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001
