; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\objects\stm32f4xx_hal_rcc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f4xx_hal_rcc.d --cpu=Cortex-M4.fp --apcs=interwork -O1 -Otime --diag_suppress=9931 -I.\device\GUI\inc -I.\device\hardware\inc -I.\device\init\inc -I.\misc\inc -I.\user\inc -I..\tester_1.03 -I.\memory\inc -I.\drivers\inc -IE:\KeilProj\tester_1.03\tester_1.03\tester_1.03\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F417xx -DSTM32F417xx -DColorDepthBpp16 -Dtftili9486 -DSOFTWARE_GL -DGUI_ALLIGN_LAYSIZE_TO_POW2 --omf_browse=.\objects\stm32f4xx_hal_rcc.crf drivers\src\stm32f4xx_hal_rcc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  HAL_RCC_DeInit PROC
;;;233      */
;;;234    void HAL_RCC_DeInit(void)
000000  48fe              LDR      r0,|L1.1020|
;;;235    {
;;;236      /* Set HSION bit */
;;;237      SET_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSITRIM_4); 
000002  6801              LDR      r1,[r0,#0]
000004  f0410181          ORR      r1,r1,#0x81
000008  6001              STR      r1,[r0,#0]
;;;238      
;;;239      /* Reset CFGR register */
;;;240      CLEAR_REG(RCC->CFGR);
00000a  4afd              LDR      r2,|L1.1024|
00000c  2100              MOVS     r1,#0
00000e  6011              STR      r1,[r2,#0]
;;;241      
;;;242      /* Reset HSEON, CSSON, PLLON, PLLI2S */
;;;243      CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLLON| RCC_CR_PLLI2SON); 
000010  6802              LDR      r2,[r0,#0]
000012  f4222210          BIC      r2,r2,#0x90000
000016  f02262a0          BIC      r2,r2,#0x5000000
00001a  6002              STR      r2,[r0,#0]
;;;244      
;;;245      /* Reset PLLCFGR register */
;;;246      CLEAR_REG(RCC->PLLCFGR);
00001c  1d02              ADDS     r2,r0,#4
00001e  6011              STR      r1,[r2,#0]
;;;247      SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2); 
000020  6813              LDR      r3,[r2,#0]
000022  f8dfc3e0          LDR      r12,|L1.1028|
000026  ea43030c          ORR      r3,r3,r12
00002a  6013              STR      r3,[r2,#0]
;;;248      
;;;249      /* Reset PLLI2SCFGR register */
;;;250      CLEAR_REG(RCC->PLLI2SCFGR);
00002c  4af6              LDR      r2,|L1.1032|
00002e  6011              STR      r1,[r2,#0]
;;;251      SET_BIT(RCC->PLLI2SCFGR,  RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1);
000030  6813              LDR      r3,[r2,#0]
000032  f4435340          ORR      r3,r3,#0x3000
000036  f0435300          ORR      r3,r3,#0x20000000
00003a  6013              STR      r3,[r2,#0]
;;;252      
;;;253      /* Reset HSEBYP bit */
;;;254      CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
00003c  6802              LDR      r2,[r0,#0]
00003e  f4222280          BIC      r2,r2,#0x40000
000042  6002              STR      r2,[r0,#0]
;;;255      
;;;256      /* Disable all interrupts */
;;;257      CLEAR_REG(RCC->CIR); 
000044  48f1              LDR      r0,|L1.1036|
000046  6001              STR      r1,[r0,#0]
;;;258    }
000048  4770              BX       lr
;;;259    
                          ENDP

                  HAL_RCC_OscConfig PROC
;;;267      */
;;;268    __weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
00004a  e92d4ff8          PUSH     {r3-r11,lr}
;;;269    {
00004e  4604              MOV      r4,r0
;;;270     uint32_t tickstart = 0;  
;;;271     
;;;272      /* Check the parameters */
;;;273      assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
;;;274      /*------------------------------- HSE Configuration ------------------------*/ 
;;;275      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
;;;276      {
;;;277        /* Check the parameters */
;;;278        assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
;;;279        /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
;;;280        if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
000050  f8dfb3ac          LDR      r11,|L1.1024|
000054  7820              LDRB     r0,[r4,#0]            ;275
;;;281          ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
;;;282        {
;;;283          if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
000056  4de9              LDR      r5,|L1.1020|
000058  f0100f01          TST      r0,#1                 ;275
00005c  f04f0700          MOV      r7,#0                 ;280
;;;284          {
;;;285            return HAL_ERROR;
;;;286          }
;;;287        }
;;;288        else
;;;289        {
;;;290          /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
;;;291          __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
;;;292          
;;;293          /* Get Start Tick*/
;;;294          tickstart = HAL_GetTick();
;;;295          
;;;296          /* Wait till HSE is disabled */  
;;;297          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
;;;298          {
;;;299            if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
000060  f2413688          MOV      r6,#0x1388
000064  d060              BEQ      |L1.296|
000066  f8db0000          LDR      r0,[r11,#0]           ;280
00006a  f000000c          AND      r0,r0,#0xc            ;280
00006e  2804              CMP      r0,#4                 ;280
000070  d00a              BEQ      |L1.136|
000072  f8db0000          LDR      r0,[r11,#0]           ;281
000076  f000000c          AND      r0,r0,#0xc            ;281
00007a  2808              CMP      r0,#8                 ;281
00007c  d10d              BNE      |L1.154|
00007e  1d28              ADDS     r0,r5,#4              ;281
000080  6800              LDR      r0,[r0,#0]            ;281
000082  f4100f80          TST      r0,#0x400000          ;281
000086  d008              BEQ      |L1.154|
                  |L1.136|
000088  6828              LDR      r0,[r5,#0]            ;283
00008a  f4103f00          TST      r0,#0x20000           ;283
00008e  d04b              BEQ      |L1.296|
000090  6860              LDR      r0,[r4,#4]            ;283
000092  bb78              CBNZ     r0,|L1.244|
000094  2001              MOVS     r0,#1                 ;285
;;;300            {
;;;301              return HAL_TIMEOUT;
;;;302            }       
;;;303          }
;;;304          
;;;305          /* Set the new HSE configuration ---------------------------------------*/
;;;306          __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
;;;307          
;;;308          /* Check the HSE State */
;;;309          if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
;;;310          {
;;;311            /* Get Start Tick*/
;;;312            tickstart = HAL_GetTick();
;;;313          
;;;314            /* Wait till HSE is ready */  
;;;315            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;316            {
;;;317              if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
;;;318              {
;;;319                return HAL_TIMEOUT;
;;;320              } 
;;;321            }
;;;322          }
;;;323          else
;;;324          {
;;;325            /* Get Start Tick*/
;;;326            tickstart = HAL_GetTick();
;;;327    
;;;328            /* Wait till HSE is bypassed or disabled */
;;;329            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
;;;330            {
;;;331              if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
;;;332              {
;;;333                return HAL_TIMEOUT;
;;;334              } 
;;;335            }
;;;336          }
;;;337        }
;;;338      }
;;;339      /*----------------------------- HSI Configuration --------------------------*/
;;;340      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
;;;341      {
;;;342        /* Check the parameters */
;;;343        assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
;;;344        assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
;;;345        
;;;346        /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
;;;347        if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
;;;348          ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
;;;349        {
;;;350          /* When HSI is used as system clock it will not disabled */
;;;351          if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
;;;352          {
;;;353            return HAL_ERROR;
;;;354          }
;;;355          /* Otherwise, just the calibration is allowed */
;;;356          else
;;;357          {
;;;358            /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;359            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;360          }
;;;361        }
;;;362        else
;;;363        {
;;;364          /* Check the HSI State */
;;;365          if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
;;;366          {
;;;367            /* Enable the Internal High Speed oscillator (HSI). */
;;;368            __HAL_RCC_HSI_ENABLE();
;;;369    
;;;370            /* Get Start Tick*/
;;;371            tickstart = HAL_GetTick();
;;;372    
;;;373            /* Wait till HSI is ready */  
;;;374            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;375            {
;;;376              if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
;;;377              {
;;;378                return HAL_TIMEOUT;
;;;379              }       
;;;380            } 
;;;381                    
;;;382            /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;383            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;384          }
;;;385          else
;;;386          {
;;;387            /* Disable the Internal High Speed oscillator (HSI). */
;;;388            __HAL_RCC_HSI_DISABLE();
;;;389    
;;;390            /* Get Start Tick*/
;;;391            tickstart = HAL_GetTick();
;;;392          
;;;393            /* Wait till HSI is ready */  
;;;394            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
;;;395            {
;;;396              if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
;;;397              {
;;;398                return HAL_TIMEOUT;
;;;399              } 
;;;400            } 
;;;401          }
;;;402        }
;;;403      }
;;;404      /*------------------------------ LSI Configuration -------------------------*/
;;;405      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
;;;406      {
;;;407        /* Check the parameters */
;;;408        assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
;;;409    
;;;410        /* Check the LSI State */
;;;411        if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
;;;412        {
;;;413          /* Enable the Internal Low Speed oscillator (LSI). */
;;;414          __HAL_RCC_LSI_ENABLE();
;;;415          
;;;416          /* Get Start Tick*/
;;;417          tickstart = HAL_GetTick();
;;;418          
;;;419          /* Wait till LSI is ready */
;;;420          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
;;;421          {
;;;422            if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
;;;423            {
;;;424              return HAL_TIMEOUT;
;;;425            } 
;;;426          }
;;;427        }
;;;428        else
;;;429        {
;;;430          /* Disable the Internal Low Speed oscillator (LSI). */
;;;431          __HAL_RCC_LSI_DISABLE();
;;;432          
;;;433          /* Get Start Tick*/
;;;434          tickstart = HAL_GetTick();
;;;435          
;;;436          /* Wait till LSI is ready */  
;;;437          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
;;;438          {
;;;439            if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
;;;440            {
;;;441              return HAL_TIMEOUT;
;;;442            }       
;;;443          } 
;;;444        }
;;;445      }
;;;446      /*------------------------------ LSE Configuration -------------------------*/ 
;;;447      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
;;;448      {
;;;449        /* Check the parameters */
;;;450        assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
;;;451        
;;;452        /* Enable Power Clock*/
;;;453        __HAL_RCC_PWR_CLK_ENABLE();
;;;454        
;;;455        /* Enable write access to Backup domain */
;;;456        PWR->CR |= PWR_CR_DBP;
;;;457        
;;;458        /* Wait for Backup domain Write protection disable */
;;;459        tickstart = HAL_GetTick();
;;;460        
;;;461        while((PWR->CR & PWR_CR_DBP) == RESET)
;;;462        {
;;;463          if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
;;;464          {
;;;465            return HAL_TIMEOUT;
;;;466          }      
;;;467        }
;;;468        
;;;469        /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
;;;470        __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
;;;471        
;;;472        /* Get Start Tick*/
;;;473        tickstart = HAL_GetTick();
;;;474        
;;;475        /* Wait till LSE is ready */  
;;;476        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
;;;477        {
;;;478          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;479          {
;;;480            return HAL_TIMEOUT;
;;;481          }    
;;;482        } 
;;;483        
;;;484        /* Set the new LSE configuration -----------------------------------------*/
;;;485        __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
;;;486        /* Check the LSE State */
;;;487        if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
;;;488        {
;;;489          /* Get Start Tick*/
;;;490          tickstart = HAL_GetTick();
;;;491          
;;;492          /* Wait till LSE is ready */  
;;;493          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
;;;494          {
;;;495            if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;496            {
;;;497              return HAL_TIMEOUT;
;;;498            }       
;;;499          }
;;;500        }
;;;501        else
;;;502        {
;;;503          /* Get Start Tick*/
;;;504          tickstart = HAL_GetTick();
;;;505          
;;;506          /* Wait till LSE is ready */  
;;;507          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
;;;508          {
;;;509            if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;510            {
;;;511              return HAL_TIMEOUT;
;;;512            }       
;;;513          }
;;;514        }
;;;515      }
;;;516      /*-------------------------------- PLL Configuration -----------------------*/
;;;517      /* Check the parameters */
;;;518      assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
;;;519      if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
;;;520      {
;;;521        /* Check if the PLL is used as system clock or not */
;;;522        if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
;;;523        { 
;;;524          if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
;;;525          {
;;;526            /* Check the parameters */
;;;527            assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
;;;528            assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
;;;529            assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
;;;530            assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
;;;531            assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
;;;532          
;;;533            /* Disable the main PLL. */
;;;534            __HAL_RCC_PLL_DISABLE();
;;;535            
;;;536            /* Get Start Tick*/
;;;537            tickstart = HAL_GetTick();
;;;538            
;;;539            /* Wait till PLL is ready */  
;;;540            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
;;;541            {
;;;542              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;543              {
;;;544                return HAL_TIMEOUT;
;;;545              }
;;;546            }        
;;;547    
;;;548            /* Configure the main PLL clock source, multiplication and division factors. */
;;;549            WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
;;;550                                     RCC_OscInitStruct->PLL.PLLM                                                 | \
;;;551                                     (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
;;;552                                     (((RCC_OscInitStruct->PLL.PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
;;;553                                     (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
;;;554            /* Enable the main PLL. */
;;;555            __HAL_RCC_PLL_ENABLE();
;;;556    
;;;557            /* Get Start Tick*/
;;;558            tickstart = HAL_GetTick();
;;;559            
;;;560            /* Wait till PLL is ready */  
;;;561            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
;;;562            {
;;;563              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;564              {
;;;565                return HAL_TIMEOUT;
;;;566              } 
;;;567            }
;;;568          }
;;;569          else
;;;570          {
;;;571            /* Disable the main PLL. */
;;;572            __HAL_RCC_PLL_DISABLE();
;;;573     
;;;574            /* Get Start Tick*/
;;;575            tickstart = HAL_GetTick();
;;;576            
;;;577            /* Wait till PLL is ready */  
;;;578            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
;;;579            {
;;;580              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;581              {
;;;582                return HAL_TIMEOUT;
;;;583              }
;;;584            }
;;;585          }
;;;586        }
;;;587        else
;;;588        {
;;;589          return HAL_ERROR;
;;;590        }
;;;591      }
;;;592      return HAL_OK;
;;;593    }
000096  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.154|
00009a  f8df9374          LDR      r9,|L1.1040|
00009e  f8897000          STRB     r7,[r9,#0]            ;291
0000a2  f7fffffe          BL       HAL_GetTick
0000a6  4680              MOV      r8,r0                 ;294
0000a8  6828              LDR      r0,[r5,#0]            ;297
0000aa  f4103f00          TST      r0,#0x20000           ;297
0000ae  d00c              BEQ      |L1.202|
                  |L1.176|
0000b0  f7fffffe          BL       HAL_GetTick
0000b4  eba00008          SUB      r0,r0,r8              ;299
0000b8  42b0              CMP      r0,r6                 ;299
0000ba  d902              BLS      |L1.194|
0000bc  2003              MOVS     r0,#3                 ;301
0000be  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.194|
0000c2  6828              LDR      r0,[r5,#0]            ;297
0000c4  f4103f00          TST      r0,#0x20000           ;297
0000c8  d1f2              BNE      |L1.176|
                  |L1.202|
0000ca  7920              LDRB     r0,[r4,#4]            ;306
0000cc  f8890000          STRB     r0,[r9,#0]            ;306
0000d0  6860              LDR      r0,[r4,#4]            ;309
0000d2  b1a8              CBZ      r0,|L1.256|
0000d4  f7fffffe          BL       HAL_GetTick
0000d8  4680              MOV      r8,r0                 ;312
0000da  6828              LDR      r0,[r5,#0]            ;315
0000dc  f4103f00          TST      r0,#0x20000           ;315
0000e0  d122              BNE      |L1.296|
                  |L1.226|
0000e2  f7fffffe          BL       HAL_GetTick
0000e6  eba00008          SUB      r0,r0,r8              ;317
0000ea  42b0              CMP      r0,r6                 ;317
0000ec  d903              BLS      |L1.246|
0000ee  2003              MOVS     r0,#3                 ;319
0000f0  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.244|
0000f4  e018              B        |L1.296|
                  |L1.246|
0000f6  6828              LDR      r0,[r5,#0]            ;315
0000f8  f4103f00          TST      r0,#0x20000           ;315
0000fc  d0f1              BEQ      |L1.226|
0000fe  e013              B        |L1.296|
                  |L1.256|
000100  f7fffffe          BL       HAL_GetTick
000104  4680              MOV      r8,r0                 ;326
000106  6828              LDR      r0,[r5,#0]            ;329
000108  f4103f00          TST      r0,#0x20000           ;329
00010c  d00c              BEQ      |L1.296|
                  |L1.270|
00010e  f7fffffe          BL       HAL_GetTick
000112  eba00008          SUB      r0,r0,r8              ;331
000116  42b0              CMP      r0,r6                 ;331
000118  d902              BLS      |L1.288|
00011a  2003              MOVS     r0,#3                 ;333
00011c  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.288|
000120  6828              LDR      r0,[r5,#0]            ;329
000122  f4103f00          TST      r0,#0x20000           ;329
000126  d1f2              BNE      |L1.270|
                  |L1.296|
000128  7820              LDRB     r0,[r4,#0]            ;340
00012a  f8df82e8          LDR      r8,|L1.1044|
00012e  f0100f02          TST      r0,#2                 ;340
000132  d064              BEQ      |L1.510|
000134  f8db0000          LDR      r0,[r11,#0]           ;347
000138  f04f0af8          MOV      r10,#0xf8             ;359
00013c  f0100f0c          TST      r0,#0xc               ;347
000140  d017              BEQ      |L1.370|
000142  f8db0000          LDR      r0,[r11,#0]           ;348
000146  f000000c          AND      r0,r0,#0xc            ;348
00014a  2808              CMP      r0,#8                 ;348
00014c  d104              BNE      |L1.344|
00014e  48b2              LDR      r0,|L1.1048|
000150  6800              LDR      r0,[r0,#0]            ;348
000152  f4100f80          TST      r0,#0x400000          ;348
000156  d00c              BEQ      |L1.370|
                  |L1.344|
000158  68e0              LDR      r0,[r4,#0xc]          ;365
00015a  b3c8              CBZ      r0,|L1.464|
00015c  2001              MOVS     r0,#1                 ;368
00015e  f8c80000          STR      r0,[r8,#0]            ;368
000162  f7fffffe          BL       HAL_GetTick
000166  4681              MOV      r9,r0                 ;371
000168  6828              LDR      r0,[r5,#0]            ;374
00016a  f0100f02          TST      r0,#2                 ;374
00016e  d016              BEQ      |L1.414|
000170  e022              B        |L1.440|
                  |L1.370|
000172  6828              LDR      r0,[r5,#0]            ;351
000174  f0100f02          TST      r0,#2                 ;351
000178  d005              BEQ      |L1.390|
00017a  68e0              LDR      r0,[r4,#0xc]          ;351
00017c  2801              CMP      r0,#1                 ;351
00017e  d002              BEQ      |L1.390|
000180  2001              MOVS     r0,#1                 ;353
000182  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.390|
000186  6828              LDR      r0,[r5,#0]            ;359
000188  fa9af2aa          RBIT     r2,r10                ;359
00018c  6921              LDR      r1,[r4,#0x10]         ;359
00018e  fab2f282          CLZ      r2,r2                 ;359
000192  f02000f8          BIC      r0,r0,#0xf8           ;359
000196  4091              LSLS     r1,r1,r2              ;359
000198  4308              ORRS     r0,r0,r1              ;359
00019a  6028              STR      r0,[r5,#0]            ;359
00019c  e02f              B        |L1.510|
                  |L1.414|
00019e  f7fffffe          BL       HAL_GetTick
0001a2  eba00009          SUB      r0,r0,r9              ;376
0001a6  2864              CMP      r0,#0x64              ;376
0001a8  d902              BLS      |L1.432|
0001aa  2003              MOVS     r0,#3                 ;378
0001ac  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.432|
0001b0  6828              LDR      r0,[r5,#0]            ;374
0001b2  f0100f02          TST      r0,#2                 ;374
0001b6  d0f2              BEQ      |L1.414|
                  |L1.440|
0001b8  6828              LDR      r0,[r5,#0]            ;383
0001ba  fa9af2aa          RBIT     r2,r10                ;383
0001be  6921              LDR      r1,[r4,#0x10]         ;383
0001c0  fab2f282          CLZ      r2,r2                 ;383
0001c4  f02000f8          BIC      r0,r0,#0xf8           ;383
0001c8  4091              LSLS     r1,r1,r2              ;383
0001ca  4308              ORRS     r0,r0,r1              ;383
0001cc  6028              STR      r0,[r5,#0]            ;383
0001ce  e016              B        |L1.510|
                  |L1.464|
0001d0  e7ff              B        |L1.466|
                  |L1.466|
0001d2  f8c87000          STR      r7,[r8,#0]            ;388
0001d6  f7fffffe          BL       HAL_GetTick
0001da  4681              MOV      r9,r0                 ;391
0001dc  6828              LDR      r0,[r5,#0]            ;394
0001de  f0100f02          TST      r0,#2                 ;394
0001e2  d00c              BEQ      |L1.510|
                  |L1.484|
0001e4  f7fffffe          BL       HAL_GetTick
0001e8  eba00009          SUB      r0,r0,r9              ;396
0001ec  2864              CMP      r0,#0x64              ;396
0001ee  d902              BLS      |L1.502|
0001f0  2003              MOVS     r0,#3                 ;398
0001f2  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.502|
0001f6  6828              LDR      r0,[r5,#0]            ;394
0001f8  f0100f02          TST      r0,#2                 ;394
0001fc  d1f2              BNE      |L1.484|
                  |L1.510|
0001fe  7820              LDRB     r0,[r4,#0]            ;405
000200  f0100f08          TST      r0,#8                 ;405
000204  d034              BEQ      |L1.624|
000206  4885              LDR      r0,|L1.1052|
000208  f8dfa214          LDR      r10,|L1.1056|
00020c  6961              LDR      r1,[r4,#0x14]         ;411
00020e  b1c1              CBZ      r1,|L1.578|
000210  2101              MOVS     r1,#1                 ;414
000212  6001              STR      r1,[r0,#0]            ;414
000214  f7fffffe          BL       HAL_GetTick
000218  4681              MOV      r9,r0                 ;417
00021a  f8da0000          LDR      r0,[r10,#0]           ;420
00021e  f0100f02          TST      r0,#2                 ;420
000222  d125              BNE      |L1.624|
                  |L1.548|
000224  f7fffffe          BL       HAL_GetTick
000228  eba00009          SUB      r0,r0,r9              ;422
00022c  2864              CMP      r0,#0x64              ;422
00022e  d902              BLS      |L1.566|
000230  2003              MOVS     r0,#3                 ;424
000232  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.566|
000236  f8da0000          LDR      r0,[r10,#0]           ;420
00023a  f0100f02          TST      r0,#2                 ;420
00023e  d0f1              BEQ      |L1.548|
000240  e016              B        |L1.624|
                  |L1.578|
000242  6007              STR      r7,[r0,#0]            ;431
000244  f7fffffe          BL       HAL_GetTick
000248  4681              MOV      r9,r0                 ;434
00024a  f8da0000          LDR      r0,[r10,#0]           ;437
00024e  f0100f02          TST      r0,#2                 ;437
000252  d00d              BEQ      |L1.624|
                  |L1.596|
000254  f7fffffe          BL       HAL_GetTick
000258  eba00009          SUB      r0,r0,r9              ;439
00025c  2864              CMP      r0,#0x64              ;439
00025e  d902              BLS      |L1.614|
000260  2003              MOVS     r0,#3                 ;441
000262  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.614|
000266  f8da0000          LDR      r0,[r10,#0]           ;437
00026a  f0100f02          TST      r0,#2                 ;437
00026e  d1f1              BNE      |L1.596|
                  |L1.624|
000270  7820              LDRB     r0,[r4,#0]            ;447
000272  f0100f04          TST      r0,#4                 ;447
000276  d072              BEQ      |L1.862|
000278  486a              LDR      r0,|L1.1060|
00027a  6801              LDR      r1,[r0,#0]            ;453
00027c  f0415180          ORR      r1,r1,#0x10000000     ;453
000280  6001              STR      r1,[r0,#0]            ;453
000282  6800              LDR      r0,[r0,#0]            ;453
000284  f0005080          AND      r0,r0,#0x10000000     ;453
000288  9000              STR      r0,[sp,#0]            ;453
00028a  f8dfa19c          LDR      r10,|L1.1064|
00028e  f8da0000          LDR      r0,[r10,#0]           ;456
000292  f4407080          ORR      r0,r0,#0x100          ;456
000296  f8ca0000          STR      r0,[r10,#0]           ;456
00029a  f7fffffe          BL       HAL_GetTick
00029e  4681              MOV      r9,r0                 ;459
0002a0  f8da0000          LDR      r0,[r10,#0]           ;461
0002a4  f4107f80          TST      r0,#0x100             ;461
0002a8  d10d              BNE      |L1.710|
                  |L1.682|
0002aa  f7fffffe          BL       HAL_GetTick
0002ae  eba00009          SUB      r0,r0,r9              ;463
0002b2  2864              CMP      r0,#0x64              ;463
0002b4  d902              BLS      |L1.700|
0002b6  2003              MOVS     r0,#3                 ;465
0002b8  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.700|
0002bc  f8da0000          LDR      r0,[r10,#0]           ;461
0002c0  f4107f80          TST      r0,#0x100             ;461
0002c4  d0f1              BEQ      |L1.682|
                  |L1.710|
0002c6  f8dfa164          LDR      r10,|L1.1068|
0002ca  f88a7000          STRB     r7,[r10,#0]           ;470
0002ce  f7fffffe          BL       HAL_GetTick
0002d2  4681              MOV      r9,r0                 ;473
0002d4  f8da0000          LDR      r0,[r10,#0]           ;476
0002d8  f0100f02          TST      r0,#2                 ;476
0002dc  d00d              BEQ      |L1.762|
                  |L1.734|
0002de  f7fffffe          BL       HAL_GetTick
0002e2  eba00009          SUB      r0,r0,r9              ;478
0002e6  42b0              CMP      r0,r6                 ;478
0002e8  d902              BLS      |L1.752|
0002ea  2003              MOVS     r0,#3                 ;480
0002ec  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.752|
0002f0  f8da0000          LDR      r0,[r10,#0]           ;476
0002f4  f0100f02          TST      r0,#2                 ;476
0002f8  d1f1              BNE      |L1.734|
                  |L1.762|
0002fa  7a20              LDRB     r0,[r4,#8]            ;485
0002fc  f88a0000          STRB     r0,[r10,#0]           ;485
000300  68a0              LDR      r0,[r4,#8]            ;487
000302  b1b0              CBZ      r0,|L1.818|
000304  f7fffffe          BL       HAL_GetTick
000308  4681              MOV      r9,r0                 ;490
00030a  f8da0000          LDR      r0,[r10,#0]           ;493
00030e  f0100f02          TST      r0,#2                 ;493
000312  d124              BNE      |L1.862|
                  |L1.788|
000314  f7fffffe          BL       HAL_GetTick
000318  eba00009          SUB      r0,r0,r9              ;495
00031c  42b0              CMP      r0,r6                 ;495
00031e  d902              BLS      |L1.806|
000320  2003              MOVS     r0,#3                 ;497
000322  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.806|
000326  f8da0000          LDR      r0,[r10,#0]           ;493
00032a  f0100f02          TST      r0,#2                 ;493
00032e  d0f1              BEQ      |L1.788|
000330  e015              B        |L1.862|
                  |L1.818|
000332  f7fffffe          BL       HAL_GetTick
000336  4681              MOV      r9,r0                 ;504
000338  f8da0000          LDR      r0,[r10,#0]           ;507
00033c  f0100f02          TST      r0,#2                 ;507
000340  d00d              BEQ      |L1.862|
                  |L1.834|
000342  f7fffffe          BL       HAL_GetTick
000346  eba00009          SUB      r0,r0,r9              ;509
00034a  42b0              CMP      r0,r6                 ;509
00034c  d902              BLS      |L1.852|
00034e  2003              MOVS     r0,#3                 ;511
000350  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.852|
000354  f8da0000          LDR      r0,[r10,#0]           ;507
000358  f0100f02          TST      r0,#2                 ;507
00035c  d1f1              BNE      |L1.834|
                  |L1.862|
00035e  69a0              LDR      r0,[r4,#0x18]         ;519
000360  b3e8              CBZ      r0,|L1.990|
000362  f8db1000          LDR      r1,[r11,#0]           ;522
000366  f001010c          AND      r1,r1,#0xc            ;522
00036a  2908              CMP      r1,#8                 ;522
00036c  d07b              BEQ      |L1.1126|
00036e  2802              CMP      r0,#2                 ;524
000370  d010              BEQ      |L1.916|
000372  f8c87060          STR      r7,[r8,#0x60]         ;572
000376  f7fffffe          BL       HAL_GetTick
00037a  4604              MOV      r4,r0                 ;575
00037c  6828              LDR      r0,[r5,#0]            ;578
00037e  f0107f00          TST      r0,#0x2000000         ;578
000382  d07b              BEQ      |L1.1148|
                  |L1.900|
000384  f7fffffe          BL       HAL_GetTick
000388  1b00              SUBS     r0,r0,r4              ;580
00038a  2864              CMP      r0,#0x64              ;580
00038c  d972              BLS      |L1.1140|
00038e  2003              MOVS     r0,#3                 ;582
000390  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.916|
000394  f8c87060          STR      r7,[r8,#0x60]         ;534
000398  f7fffffe          BL       HAL_GetTick
00039c  4606              MOV      r6,r0                 ;537
00039e  6828              LDR      r0,[r5,#0]            ;540
0003a0  f0107f00          TST      r0,#0x2000000         ;540
0003a4  d00b              BEQ      |L1.958|
                  |L1.934|
0003a6  f7fffffe          BL       HAL_GetTick
0003aa  1b80              SUBS     r0,r0,r6              ;542
0003ac  2864              CMP      r0,#0x64              ;542
0003ae  d902              BLS      |L1.950|
0003b0  2003              MOVS     r0,#3                 ;544
0003b2  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.950|
0003b6  6828              LDR      r0,[r5,#0]            ;540
0003b8  f0107f00          TST      r0,#0x2000000         ;540
0003bc  d1f3              BNE      |L1.934|
                  |L1.958|
0003be  6a21              LDR      r1,[r4,#0x20]         ;549
0003c0  69e0              LDR      r0,[r4,#0x1c]         ;549
0003c2  6a62              LDR      r2,[r4,#0x24]         ;549
0003c4  4301              ORRS     r1,r1,r0              ;549
0003c6  f64770c0          MOV      r0,#0x7fc0            ;549
0003ca  fa90f0a0          RBIT     r0,r0                 ;549
0003ce  fab0f080          CLZ      r0,r0                 ;549
0003d2  fa02f000          LSL      r0,r2,r0              ;549
0003d6  f04f33ff          MOV      r3,#0xffffffff        ;549
0003da  6aa2              LDR      r2,[r4,#0x28]         ;549
0003dc  e000              B        |L1.992|
                  |L1.990|
0003de  e04d              B        |L1.1148|
                  |L1.992|
0003e0  eb030252          ADD      r2,r3,r2,LSR #1       ;549
0003e4  f44f3340          MOV      r3,#0x30000           ;549
0003e8  fa93f3a3          RBIT     r3,r3                 ;549
0003ec  fab3f383          CLZ      r3,r3                 ;549
0003f0  409a              LSLS     r2,r2,r3              ;549
0003f2  4310              ORRS     r0,r0,r2              ;549
0003f4  4308              ORRS     r0,r0,r1              ;549
0003f6  f04f6270          MOV      r2,#0xf000000         ;549
0003fa  e019              B        |L1.1072|
                  |L1.1020|
                          DCD      0x40023800
                  |L1.1024|
                          DCD      0x40023808
                  |L1.1028|
                          DCD      0x04003010
                  |L1.1032|
                          DCD      0x40023884
                  |L1.1036|
                          DCD      0x4002380c
                  |L1.1040|
                          DCD      0x40023802
                  |L1.1044|
                          DCD      0x42470000
                  |L1.1048|
                          DCD      0x40023804
                  |L1.1052|
                          DCD      0x42470e80
                  |L1.1056|
                          DCD      0x40023874
                  |L1.1060|
                          DCD      0x40023840
                  |L1.1064|
                          DCD      0x40007000
                  |L1.1068|
                          DCD      0x40023870
                  |L1.1072|
000430  fa92f2a2          RBIT     r2,r2                 ;549
000434  6ae1              LDR      r1,[r4,#0x2c]         ;549
000436  fab2f282          CLZ      r2,r2                 ;549
00043a  4091              LSLS     r1,r1,r2              ;549
00043c  4301              ORRS     r1,r1,r0              ;549
00043e  48fe              LDR      r0,|L1.2104|
000440  6001              STR      r1,[r0,#0]            ;549
000442  2001              MOVS     r0,#1                 ;555
000444  f8c80060          STR      r0,[r8,#0x60]         ;555
000448  f7fffffe          BL       HAL_GetTick
00044c  4604              MOV      r4,r0                 ;558
00044e  6828              LDR      r0,[r5,#0]            ;561
000450  f0107f00          TST      r0,#0x2000000         ;561
000454  d112              BNE      |L1.1148|
                  |L1.1110|
000456  f7fffffe          BL       HAL_GetTick
00045a  1b00              SUBS     r0,r0,r4              ;563
00045c  2864              CMP      r0,#0x64              ;563
00045e  d904              BLS      |L1.1130|
000460  2003              MOVS     r0,#3                 ;565
000462  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.1126|
000466  e00c              B        |L1.1154|
000468  e004              B        |L1.1140|
                  |L1.1130|
00046a  6828              LDR      r0,[r5,#0]            ;561
00046c  f0107f00          TST      r0,#0x2000000         ;561
000470  d0f1              BEQ      |L1.1110|
000472  e003              B        |L1.1148|
                  |L1.1140|
000474  6828              LDR      r0,[r5,#0]            ;578
000476  f0107f00          TST      r0,#0x2000000         ;578
00047a  d183              BNE      |L1.900|
                  |L1.1148|
00047c  2000              MOVS     r0,#0                 ;592
00047e  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.1154|
000482  2001              MOVS     r0,#1                 ;589
000484  e8bd8ff8          POP      {r3-r11,pc}
;;;594     
                          ENDP

                  HAL_RCC_ClockConfig PROC
;;;619      */
;;;620    HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
000488  e92d47f0          PUSH     {r4-r10,lr}
;;;621    {
00048c  4604              MOV      r4,r0
00048e  460e              MOV      r6,r1
;;;622      uint32_t tickstart = 0;   
;;;623     
;;;624      /* Check the parameters */
;;;625      assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
;;;626      assert_param(IS_FLASH_LATENCY(FLatency));
;;;627     
;;;628      /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
;;;629        must be correctly programmed according to the frequency of the CPU clock 
;;;630        (HCLK) and the supply voltage of the device. */
;;;631      
;;;632      /* Increasing the CPU frequency */
;;;633      if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
000490  f8dfa3a8          LDR      r10,|L1.2108|
000494  f8da0000          LDR      r0,[r10,#0]
;;;634      {    
;;;635        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;636        __HAL_FLASH_SET_LATENCY(FLatency);
;;;637        
;;;638        /* Check that the new number of wait states is taken into account to access the Flash
;;;639        memory by reading the FLASH_ACR register */
;;;640        if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
;;;641        {
;;;642          return HAL_ERROR;
;;;643        }
;;;644    
;;;645        /*-------------------------- HCLK Configuration --------------------------*/
;;;646        if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
;;;647        {
;;;648          assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
;;;649          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
;;;650        }
;;;651    
;;;652        /*------------------------- SYSCLK Configuration ---------------------------*/ 
;;;653        if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
;;;654        {    
;;;655          assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
;;;656          
;;;657          /* HSE is selected as System Clock Source */
;;;658          if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
;;;659          {
;;;660            /* Check the HSE ready flag */  
;;;661            if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
000498  49e9              LDR      r1,|L1.2112|
00049a  f000000f          AND      r0,r0,#0xf            ;633
00049e  4fe9              LDR      r7,|L1.2116|
0004a0  f00609ff          AND      r9,r6,#0xff           ;636
;;;662            {
;;;663              return HAL_ERROR;
;;;664            }
;;;665          }
;;;666          /* PLL is selected as System Clock Source */
;;;667          else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
;;;668                  (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
;;;669          {
;;;670            /* Check the PLL ready flag */  
;;;671            if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
;;;672            {
;;;673              return HAL_ERROR;
;;;674            }
;;;675          }
;;;676          /* HSI is selected as System Clock Source */
;;;677          else
;;;678          {
;;;679            /* Check the HSI ready flag */  
;;;680            if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;681            {
;;;682              return HAL_ERROR;
;;;683            }
;;;684          }
;;;685    
;;;686          __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
;;;687          /* Get Start Tick*/
;;;688          tickstart = HAL_GetTick();
;;;689          
;;;690          if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
;;;691          {
;;;692            while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
;;;693            {
;;;694              if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
0004a4  f2413888          MOV      r8,#0x1388
0004a8  42b0              CMP      r0,r6                 ;633
0004aa  d270              BCS      |L1.1422|
0004ac  f88a9000          STRB     r9,[r10,#0]           ;636
0004b0  f8da0000          LDR      r0,[r10,#0]           ;640
0004b4  f000000f          AND      r0,r0,#0xf            ;640
0004b8  42b0              CMP      r0,r6                 ;640
0004ba  d002              BEQ      |L1.1218|
0004bc  2001              MOVS     r0,#1                 ;642
;;;695              {
;;;696                return HAL_TIMEOUT;
;;;697              }
;;;698            }
;;;699          }
;;;700          else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
;;;701          {
;;;702            while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
;;;703            {
;;;704              if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;705              {
;;;706                return HAL_TIMEOUT;
;;;707              }
;;;708            }
;;;709          }
;;;710          else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
;;;711          {
;;;712            while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
;;;713            {
;;;714              if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;715              {
;;;716                return HAL_TIMEOUT;
;;;717              }
;;;718            }
;;;719          }
;;;720          else
;;;721          {
;;;722            while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
;;;723            {
;;;724              if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;725              {
;;;726                return HAL_TIMEOUT;
;;;727              }
;;;728            }
;;;729          }
;;;730        }    
;;;731      }
;;;732      /* Decreasing the CPU frequency */
;;;733      else
;;;734      {
;;;735        /*-------------------------- HCLK Configuration --------------------------*/
;;;736        if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
;;;737        {
;;;738          assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
;;;739          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
;;;740        }
;;;741    
;;;742        /*------------------------- SYSCLK Configuration -------------------------*/
;;;743        if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
;;;744        {    
;;;745          assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
;;;746          
;;;747          /* HSE is selected as System Clock Source */
;;;748          if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
;;;749          {
;;;750            /* Check the HSE ready flag */  
;;;751            if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;752            {
;;;753              return HAL_ERROR;
;;;754            }
;;;755          }
;;;756          /* PLL is selected as System Clock Source */
;;;757          else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) || 
;;;758                  (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
;;;759          {
;;;760            /* Check the PLL ready flag */  
;;;761            if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
;;;762            {
;;;763              return HAL_ERROR;
;;;764            }
;;;765          }
;;;766          /* HSI is selected as System Clock Source */
;;;767          else
;;;768          {
;;;769            /* Check the HSI ready flag */  
;;;770            if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;771            {
;;;772              return HAL_ERROR;
;;;773            }
;;;774          }
;;;775          __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
;;;776          /* Get Start Tick*/
;;;777          tickstart = HAL_GetTick();
;;;778          
;;;779          if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
;;;780          {
;;;781            while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
;;;782            {
;;;783              if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;784              {
;;;785                return HAL_TIMEOUT;
;;;786              } 
;;;787            }
;;;788          }
;;;789          else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
;;;790          {
;;;791            while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
;;;792            {
;;;793              if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;794              {
;;;795                return HAL_TIMEOUT;
;;;796              } 
;;;797            }
;;;798          }
;;;799          else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
;;;800          {
;;;801            while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
;;;802            {
;;;803              if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;804              {
;;;805                return HAL_TIMEOUT;
;;;806              } 
;;;807            }
;;;808          }
;;;809          else
;;;810          {
;;;811            while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
;;;812            {
;;;813              if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;814              {
;;;815                return HAL_TIMEOUT;
;;;816              }
;;;817            }
;;;818          }
;;;819        }
;;;820        
;;;821        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;822        __HAL_FLASH_SET_LATENCY(FLatency);
;;;823        
;;;824        /* Check that the new number of wait states is taken into account to access the Flash
;;;825        memory by reading the FLASH_ACR register */
;;;826        if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
;;;827        {
;;;828          return HAL_ERROR;
;;;829        }
;;;830     }
;;;831    
;;;832      /*-------------------------- PCLK1 Configuration ---------------------------*/ 
;;;833      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
;;;834      {
;;;835        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
;;;836        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
;;;837      }
;;;838      
;;;839      /*-------------------------- PCLK2 Configuration ---------------------------*/ 
;;;840      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
;;;841      {
;;;842        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
;;;843        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
;;;844      }
;;;845    
;;;846      /* Configure the source of time base considering new system clocks settings*/
;;;847      HAL_InitTick (TICK_INT_PRIORITY);
;;;848      
;;;849      return HAL_OK;
;;;850    }
0004be  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1218|
0004c2  7820              LDRB     r0,[r4,#0]            ;646
0004c4  f0100f02          TST      r0,#2                 ;646
0004c8  d005              BEQ      |L1.1238|
0004ca  6838              LDR      r0,[r7,#0]            ;649
0004cc  68a2              LDR      r2,[r4,#8]            ;649
0004ce  f02000f0          BIC      r0,r0,#0xf0           ;649
0004d2  4310              ORRS     r0,r0,r2              ;649
0004d4  6038              STR      r0,[r7,#0]            ;649
                  |L1.1238|
0004d6  7820              LDRB     r0,[r4,#0]            ;653
0004d8  f0100f01          TST      r0,#1                 ;653
0004dc  d049              BEQ      |L1.1394|
0004de  6860              LDR      r0,[r4,#4]            ;658
0004e0  2801              CMP      r0,#1                 ;658
0004e2  d008              BEQ      |L1.1270|
0004e4  2802              CMP      r0,#2                 ;667
0004e6  d00d              BEQ      |L1.1284|
0004e8  2803              CMP      r0,#3                 ;668
0004ea  d00b              BEQ      |L1.1284|
0004ec  6809              LDR      r1,[r1,#0]            ;680
0004ee  f0110f02          TST      r1,#2                 ;680
0004f2  d029              BEQ      |L1.1352|
0004f4  e00a              B        |L1.1292|
                  |L1.1270|
0004f6  6809              LDR      r1,[r1,#0]            ;661
0004f8  f4113f00          TST      r1,#0x20000           ;661
0004fc  d106              BNE      |L1.1292|
0004fe  2001              MOVS     r0,#1                 ;663
000500  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1284|
000504  6809              LDR      r1,[r1,#0]            ;671
000506  f0117f00          TST      r1,#0x2000000         ;671
00050a  d01a              BEQ      |L1.1346|
                  |L1.1292|
00050c  6839              LDR      r1,[r7,#0]            ;686
00050e  f0210103          BIC      r1,r1,#3              ;686
000512  4308              ORRS     r0,r0,r1              ;686
000514  6038              STR      r0,[r7,#0]            ;686
000516  f7fffffe          BL       HAL_GetTick
00051a  4605              MOV      r5,r0                 ;688
00051c  6860              LDR      r0,[r4,#4]            ;690
00051e  2801              CMP      r0,#1                 ;690
000520  d015              BEQ      |L1.1358|
000522  2802              CMP      r0,#2                 ;700
000524  d026              BEQ      |L1.1396|
000526  2803              CMP      r0,#3                 ;710
000528  d03b              BEQ      |L1.1442|
00052a  6838              LDR      r0,[r7,#0]            ;722
00052c  f0100f0c          TST      r0,#0xc               ;722
000530  d01f              BEQ      |L1.1394|
                  |L1.1330|
000532  f7fffffe          BL       HAL_GetTick
000536  1b40              SUBS     r0,r0,r5              ;724
000538  4540              CMP      r0,r8                 ;724
00053a  d939              BLS      |L1.1456|
00053c  2003              MOVS     r0,#3                 ;726
00053e  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1346|
000542  2001              MOVS     r0,#1                 ;673
000544  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1352|
000548  2001              MOVS     r0,#1                 ;682
00054a  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1358|
00054e  6838              LDR      r0,[r7,#0]            ;692
000550  f000000c          AND      r0,r0,#0xc            ;692
000554  2804              CMP      r0,#4                 ;692
000556  d00c              BEQ      |L1.1394|
                  |L1.1368|
000558  f7fffffe          BL       HAL_GetTick
00055c  1b40              SUBS     r0,r0,r5              ;694
00055e  4540              CMP      r0,r8                 ;694
000560  d902              BLS      |L1.1384|
000562  2003              MOVS     r0,#3                 ;696
000564  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1384|
000568  6838              LDR      r0,[r7,#0]            ;692
00056a  f000000c          AND      r0,r0,#0xc            ;692
00056e  2804              CMP      r0,#4                 ;692
000570  d1f2              BNE      |L1.1368|
                  |L1.1394|
000572  e0a8              B        |L1.1734|
                  |L1.1396|
000574  6838              LDR      r0,[r7,#0]            ;702
000576  f000000c          AND      r0,r0,#0xc            ;702
00057a  2808              CMP      r0,#8                 ;702
00057c  d070              BEQ      |L1.1632|
                  |L1.1406|
00057e  f7fffffe          BL       HAL_GetTick
000582  1b40              SUBS     r0,r0,r5              ;704
000584  4540              CMP      r0,r8                 ;704
000586  d903              BLS      |L1.1424|
000588  2003              MOVS     r0,#3                 ;706
00058a  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1422|
00058e  e014              B        |L1.1466|
                  |L1.1424|
000590  6838              LDR      r0,[r7,#0]            ;702
000592  f000000c          AND      r0,r0,#0xc            ;702
000596  2808              CMP      r0,#8                 ;702
000598  d1f1              BNE      |L1.1406|
00059a  e094              B        |L1.1734|
                  |L1.1436|
00059c  2003              MOVS     r0,#3                 ;716
00059e  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1442|
0005a2  6838              LDR      r0,[r7,#0]            ;712
0005a4  f7fffffe          BL       HAL_GetTick
0005a8  1b40              SUBS     r0,r0,r5              ;714
0005aa  4540              CMP      r0,r8                 ;714
0005ac  d9f9              BLS      |L1.1442|
0005ae  e7f5              B        |L1.1436|
                  |L1.1456|
0005b0  6838              LDR      r0,[r7,#0]            ;722
0005b2  f0100f0c          TST      r0,#0xc               ;722
0005b6  d1bc              BNE      |L1.1330|
0005b8  e085              B        |L1.1734|
                  |L1.1466|
0005ba  7820              LDRB     r0,[r4,#0]            ;736
0005bc  f0100f02          TST      r0,#2                 ;736
0005c0  d005              BEQ      |L1.1486|
0005c2  6838              LDR      r0,[r7,#0]            ;739
0005c4  68a2              LDR      r2,[r4,#8]            ;739
0005c6  f02000f0          BIC      r0,r0,#0xf0           ;739
0005ca  4310              ORRS     r0,r0,r2              ;739
0005cc  6038              STR      r0,[r7,#0]            ;739
                  |L1.1486|
0005ce  7820              LDRB     r0,[r4,#0]            ;743
0005d0  f0100f01          TST      r0,#1                 ;743
0005d4  d06c              BEQ      |L1.1712|
0005d6  6860              LDR      r0,[r4,#4]            ;748
0005d8  2801              CMP      r0,#1                 ;748
0005da  d008              BEQ      |L1.1518|
0005dc  2802              CMP      r0,#2                 ;757
0005de  d00d              BEQ      |L1.1532|
0005e0  2803              CMP      r0,#3                 ;758
0005e2  d00b              BEQ      |L1.1532|
0005e4  6809              LDR      r1,[r1,#0]            ;770
0005e6  f0110f02          TST      r1,#2                 ;770
0005ea  d029              BEQ      |L1.1600|
0005ec  e00a              B        |L1.1540|
                  |L1.1518|
0005ee  6809              LDR      r1,[r1,#0]            ;751
0005f0  f4113f00          TST      r1,#0x20000           ;751
0005f4  d106              BNE      |L1.1540|
0005f6  2001              MOVS     r0,#1                 ;753
0005f8  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1532|
0005fc  6809              LDR      r1,[r1,#0]            ;761
0005fe  f0117f00          TST      r1,#0x2000000         ;761
000602  d01a              BEQ      |L1.1594|
                  |L1.1540|
000604  6839              LDR      r1,[r7,#0]            ;775
000606  f0210103          BIC      r1,r1,#3              ;775
00060a  4308              ORRS     r0,r0,r1              ;775
00060c  6038              STR      r0,[r7,#0]            ;775
00060e  f7fffffe          BL       HAL_GetTick
000612  4605              MOV      r5,r0                 ;777
000614  6860              LDR      r0,[r4,#4]            ;779
000616  2801              CMP      r0,#1                 ;779
000618  d015              BEQ      |L1.1606|
00061a  2802              CMP      r0,#2                 ;789
00061c  d027              BEQ      |L1.1646|
00061e  2803              CMP      r0,#3                 ;799
000620  d03b              BEQ      |L1.1690|
000622  6838              LDR      r0,[r7,#0]            ;811
000624  f0100f0c          TST      r0,#0xc               ;811
000628  d042              BEQ      |L1.1712|
                  |L1.1578|
00062a  f7fffffe          BL       HAL_GetTick
00062e  1b40              SUBS     r0,r0,r5              ;813
000630  4540              CMP      r0,r8                 ;813
000632  d939              BLS      |L1.1704|
000634  2003              MOVS     r0,#3                 ;815
000636  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1594|
00063a  2001              MOVS     r0,#1                 ;763
00063c  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1600|
000640  2001              MOVS     r0,#1                 ;772
000642  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1606|
000646  6838              LDR      r0,[r7,#0]            ;781
000648  f000000c          AND      r0,r0,#0xc            ;781
00064c  2804              CMP      r0,#4                 ;781
00064e  d02f              BEQ      |L1.1712|
                  |L1.1616|
000650  f7fffffe          BL       HAL_GetTick
000654  1b40              SUBS     r0,r0,r5              ;783
000656  4540              CMP      r0,r8                 ;783
000658  d903              BLS      |L1.1634|
00065a  2003              MOVS     r0,#3                 ;785
00065c  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1632|
000660  e031              B        |L1.1734|
                  |L1.1634|
000662  6838              LDR      r0,[r7,#0]            ;781
000664  f000000c          AND      r0,r0,#0xc            ;781
000668  2804              CMP      r0,#4                 ;781
00066a  d1f1              BNE      |L1.1616|
00066c  e020              B        |L1.1712|
                  |L1.1646|
00066e  6838              LDR      r0,[r7,#0]            ;791
000670  f000000c          AND      r0,r0,#0xc            ;791
000674  2808              CMP      r0,#8                 ;791
000676  d01b              BEQ      |L1.1712|
                  |L1.1656|
000678  f7fffffe          BL       HAL_GetTick
00067c  1b40              SUBS     r0,r0,r5              ;793
00067e  4540              CMP      r0,r8                 ;793
000680  d902              BLS      |L1.1672|
000682  2003              MOVS     r0,#3                 ;795
000684  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1672|
000688  6838              LDR      r0,[r7,#0]            ;791
00068a  f000000c          AND      r0,r0,#0xc            ;791
00068e  2808              CMP      r0,#8                 ;791
000690  d1f2              BNE      |L1.1656|
000692  e00d              B        |L1.1712|
                  |L1.1684|
000694  2003              MOVS     r0,#3                 ;805
000696  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1690|
00069a  6838              LDR      r0,[r7,#0]            ;801
00069c  f7fffffe          BL       HAL_GetTick
0006a0  1b40              SUBS     r0,r0,r5              ;803
0006a2  4540              CMP      r0,r8                 ;803
0006a4  d9f9              BLS      |L1.1690|
0006a6  e7f5              B        |L1.1684|
                  |L1.1704|
0006a8  6838              LDR      r0,[r7,#0]            ;811
0006aa  f0100f0c          TST      r0,#0xc               ;811
0006ae  d1bc              BNE      |L1.1578|
                  |L1.1712|
0006b0  f88a9000          STRB     r9,[r10,#0]           ;822
0006b4  f8da0000          LDR      r0,[r10,#0]           ;826
0006b8  f000000f          AND      r0,r0,#0xf            ;826
0006bc  42b0              CMP      r0,r6                 ;826
0006be  d002              BEQ      |L1.1734|
0006c0  2001              MOVS     r0,#1                 ;828
0006c2  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1734|
0006c6  7820              LDRB     r0,[r4,#0]            ;833
0006c8  f0100f04          TST      r0,#4                 ;833
0006cc  d005              BEQ      |L1.1754|
0006ce  6838              LDR      r0,[r7,#0]            ;836
0006d0  68e1              LDR      r1,[r4,#0xc]          ;836
0006d2  f42050e0          BIC      r0,r0,#0x1c00         ;836
0006d6  4308              ORRS     r0,r0,r1              ;836
0006d8  6038              STR      r0,[r7,#0]            ;836
                  |L1.1754|
0006da  7820              LDRB     r0,[r4,#0]            ;840
0006dc  f0100f08          TST      r0,#8                 ;840
0006e0  d006              BEQ      |L1.1776|
0006e2  6838              LDR      r0,[r7,#0]            ;843
0006e4  6921              LDR      r1,[r4,#0x10]         ;843
0006e6  f4204060          BIC      r0,r0,#0xe000         ;843
0006ea  ea4000c1          ORR      r0,r0,r1,LSL #3       ;843
0006ee  6038              STR      r0,[r7,#0]            ;843
                  |L1.1776|
0006f0  200f              MOVS     r0,#0xf               ;847
0006f2  f7fffffe          BL       HAL_InitTick
0006f6  2000              MOVS     r0,#0                 ;849
0006f8  e8bd87f0          POP      {r4-r10,pc}
;;;851    
                          ENDP

                  HAL_RCC_MCOConfig PROC
;;;896      */
;;;897    void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
0006fc  b570              PUSH     {r4-r6,lr}
;;;898    {
0006fe  b086              SUB      sp,sp,#0x18
000700  460c              MOV      r4,r1
000702  4615              MOV      r5,r2
;;;899      GPIO_InitTypeDef GPIO_InitStruct;
;;;900      /* Check the parameters */
;;;901      assert_param(IS_RCC_MCO(RCC_MCOx));
;;;902      assert_param(IS_RCC_MCODIV(RCC_MCODiv));
;;;903      /* RCC_MCO1 */
;;;904      if(RCC_MCOx == RCC_MCO1)
000704  2200              MOVS     r2,#0
;;;905      {
;;;906        assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
;;;907        
;;;908        /* MCO1 Clock Enable */
;;;909        __MCO1_CLK_ENABLE();
000706  4950              LDR      r1,|L1.2120|
;;;910        
;;;911        /* Configure the MCO1 pin in alternate function mode */    
;;;912        GPIO_InitStruct.Pin = MCO1_PIN;
;;;913        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
000708  2302              MOVS     r3,#2
;;;914        GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
;;;915        GPIO_InitStruct.Pull = GPIO_NOPULL;
;;;916        GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
;;;917        HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
;;;918        
;;;919        /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
;;;920        MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
00070a  4e4e              LDR      r6,|L1.2116|
00070c  f04f0c03          MOV      r12,#3                ;914
000710  2800              CMP      r0,#0                 ;904
000712  d01b              BEQ      |L1.1868|
;;;921      }
;;;922      else
;;;923      {
;;;924        assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
;;;925        
;;;926        /* MCO2 Clock Enable */
;;;927        __MCO2_CLK_ENABLE();
000714  6808              LDR      r0,[r1,#0]
000716  f0400004          ORR      r0,r0,#4
00071a  6008              STR      r0,[r1,#0]
00071c  6808              LDR      r0,[r1,#0]
00071e  f0000004          AND      r0,r0,#4
000722  9000              STR      r0,[sp,#0]
;;;928        
;;;929        /* Configure the MCO2 pin in alternate function mode */
;;;930        GPIO_InitStruct.Pin = MCO2_PIN;
000724  1548              ASRS     r0,r1,#21
000726  9001              STR      r0,[sp,#4]
;;;931        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
000728  9302              STR      r3,[sp,#8]
;;;932        GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
00072a  f8cdc010          STR      r12,[sp,#0x10]
;;;933        GPIO_InitStruct.Pull = GPIO_NOPULL;
00072e  9203              STR      r2,[sp,#0xc]
;;;934        GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
000730  9205              STR      r2,[sp,#0x14]
;;;935        HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
000732  a901              ADD      r1,sp,#4
000734  4845              LDR      r0,|L1.2124|
000736  f7fffffe          BL       HAL_GPIO_Init
;;;936        
;;;937        /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
;;;938        MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
00073a  6830              LDR      r0,[r6,#0]
00073c  ea4401c5          ORR      r1,r4,r5,LSL #3
000740  f0204078          BIC      r0,r0,#0xf8000000
000744  4308              ORRS     r0,r0,r1
000746  6030              STR      r0,[r6,#0]
;;;939      }
;;;940    }
000748  b006              ADD      sp,sp,#0x18
00074a  bd70              POP      {r4-r6,pc}
                  |L1.1868|
00074c  6808              LDR      r0,[r1,#0]            ;909
00074e  f0400001          ORR      r0,r0,#1              ;909
000752  6008              STR      r0,[r1,#0]            ;909
000754  6808              LDR      r0,[r1,#0]            ;909
000756  f0000001          AND      r0,r0,#1              ;909
00075a  9000              STR      r0,[sp,#0]            ;909
00075c  f44f7080          MOV      r0,#0x100             ;912
000760  9001              STR      r0,[sp,#4]            ;912
000762  9302              STR      r3,[sp,#8]            ;913
000764  f8cdc010          STR      r12,[sp,#0x10]        ;914
000768  9203              STR      r2,[sp,#0xc]          ;915
00076a  9205              STR      r2,[sp,#0x14]         ;916
00076c  a901              ADD      r1,sp,#4              ;917
00076e  4838              LDR      r0,|L1.2128|
000770  f7fffffe          BL       HAL_GPIO_Init
000774  6830              LDR      r0,[r6,#0]            ;920
000776  ea440105          ORR      r1,r4,r5              ;920
00077a  f02060ec          BIC      r0,r0,#0x7600000      ;920
00077e  4308              ORRS     r0,r0,r1              ;920
000780  6030              STR      r0,[r6,#0]            ;920
000782  b006              ADD      sp,sp,#0x18
000784  bd70              POP      {r4-r6,pc}
;;;941    
                          ENDP

                  HAL_RCC_EnableCSS PROC
;;;950      */
;;;951    void HAL_RCC_EnableCSS(void)
000786  4933              LDR      r1,|L1.2132|
;;;952    {
;;;953      *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
000788  2001              MOVS     r0,#1
00078a  64c8              STR      r0,[r1,#0x4c]
;;;954    }
00078c  4770              BX       lr
;;;955    
                          ENDP

                  HAL_RCC_DisableCSS PROC
;;;959      */
;;;960    void HAL_RCC_DisableCSS(void)
00078e  4931              LDR      r1,|L1.2132|
;;;961    {
;;;962      *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
000790  2000              MOVS     r0,#0
000792  64c8              STR      r0,[r1,#0x4c]
;;;963    }
000794  4770              BX       lr
;;;964    
                          ENDP

                  HAL_RCC_GetSysClockFreq PROC
;;;994      */
;;;995    __weak uint32_t HAL_RCC_GetSysClockFreq(void)
000796  b410              PUSH     {r4}
;;;996    {
;;;997      uint32_t pllm = 0, pllvco = 0, pllp = 0;
;;;998      uint32_t sysclockfreq = 0;
;;;999    
;;;1000     /* Get SYSCLK source -------------------------------------------------------*/
;;;1001     switch (RCC->CFGR & RCC_CFGR_SWS)
000798  482a              LDR      r0,|L1.2116|
00079a  6800              LDR      r0,[r0,#0]
00079c  f010010c          ANDS     r1,r0,#0xc
;;;1002     {
;;;1003       case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
;;;1004       {
;;;1005         sysclockfreq = HSI_VALUE;
0007a0  482d              LDR      r0,|L1.2136|
0007a2  d01b              BEQ      |L1.2012|
;;;1006          break;
;;;1007       }
;;;1008       case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
;;;1009       {
;;;1010         sysclockfreq = HSE_VALUE;
0007a4  ea4f0c60          ASR      r12,r0,#1
0007a8  2904              CMP      r1,#4                 ;1001
0007aa  d016              BEQ      |L1.2010|
0007ac  2908              CMP      r1,#8                 ;1001
0007ae  d115              BNE      |L1.2012|
;;;1011         break;
;;;1012       }
;;;1013       case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
;;;1014       {
;;;1015         /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
;;;1016         SYSCLK = PLL_VCO / PLLP */
;;;1017         pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
0007b0  4a21              LDR      r2,|L1.2104|
0007b2  6811              LDR      r1,[r2,#0]
0007b4  f001013f          AND      r1,r1,#0x3f
;;;1018         if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
0007b8  6813              LDR      r3,[r2,#0]
0007ba  f4130f80          TST      r3,#0x400000
;;;1019         {
;;;1020           /* HSE used as PLL clock source */
;;;1021           pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
0007be  f64773c0          MOV      r3,#0x7fc0
0007c2  d00d              BEQ      |L1.2016|
0007c4  fbbcf0f1          UDIV     r0,r12,r1
0007c8  6811              LDR      r1,[r2,#0]
0007ca  4019              ANDS     r1,r1,r3
0007cc  fa93f3a3          RBIT     r3,r3
0007d0  fab3f383          CLZ      r3,r3
0007d4  40d9              LSRS     r1,r1,r3
0007d6  4348              MULS     r0,r1,r0
0007d8  e00c              B        |L1.2036|
                  |L1.2010|
0007da  4660              MOV      r0,r12                ;1010
                  |L1.2012|
;;;1022         }
;;;1023         else
;;;1024         {
;;;1025           /* HSI used as PLL clock source */
;;;1026           pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
;;;1027         }
;;;1028         pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
;;;1029         
;;;1030         sysclockfreq = pllvco/pllp;
;;;1031         break;
;;;1032       }
;;;1033       default:
;;;1034       {
;;;1035         sysclockfreq = HSI_VALUE;
;;;1036         break;
;;;1037       }
;;;1038     }
;;;1039     return sysclockfreq;
;;;1040   }
0007dc  bc10              POP      {r4}
0007de  4770              BX       lr
                  |L1.2016|
0007e0  fbb0f0f1          UDIV     r0,r0,r1              ;1026
0007e4  6811              LDR      r1,[r2,#0]            ;1026
0007e6  4019              ANDS     r1,r1,r3              ;1026
0007e8  fa93f3a3          RBIT     r3,r3                 ;1026
0007ec  fab3f383          CLZ      r3,r3                 ;1026
0007f0  40d9              LSRS     r1,r1,r3              ;1026
0007f2  4348              MULS     r0,r1,r0              ;1026
                  |L1.2036|
0007f4  6811              LDR      r1,[r2,#0]            ;1028
0007f6  f44f3240          MOV      r2,#0x30000           ;1028
0007fa  fa92f2a2          RBIT     r2,r2                 ;1028
0007fe  f4013140          AND      r1,r1,#0x30000        ;1028
000802  fab2f282          CLZ      r2,r2                 ;1028
000806  40d1              LSRS     r1,r1,r2              ;1028
000808  1c49              ADDS     r1,r1,#1              ;1028
00080a  0049              LSLS     r1,r1,#1              ;1028
00080c  fbb0f0f1          UDIV     r0,r0,r1              ;1030
000810  bc10              POP      {r4}
000812  4770              BX       lr
;;;1041   
                          ENDP

                  HAL_RCC_GetHCLKFreq PROC
;;;1050     */
;;;1051   uint32_t HAL_RCC_GetHCLKFreq(void)
000814  b510              PUSH     {r4,lr}
;;;1052   {
;;;1053     SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
000816  f7fffffe          BL       HAL_RCC_GetSysClockFreq
00081a  490a              LDR      r1,|L1.2116|
00081c  6809              LDR      r1,[r1,#0]
00081e  22f0              MOVS     r2,#0xf0
000820  fa92f2a2          RBIT     r2,r2
000824  f00101f0          AND      r1,r1,#0xf0
000828  fab2f282          CLZ      r2,r2
00082c  40d1              LSRS     r1,r1,r2
00082e  4a0b              LDR      r2,|L1.2140|
000830  5c51              LDRB     r1,[r2,r1]
000832  40c8              LSRS     r0,r0,r1
000834  490a              LDR      r1,|L1.2144|
000836  e015              B        |L1.2148|
                  |L1.2104|
                          DCD      0x40023804
                  |L1.2108|
                          DCD      0x40023c00
                  |L1.2112|
                          DCD      0x40023800
                  |L1.2116|
                          DCD      0x40023808
                  |L1.2120|
                          DCD      0x40023830
                  |L1.2124|
                          DCD      0x40020800
                  |L1.2128|
                          DCD      0x40020000
                  |L1.2132|
                          DCD      0x42470000
                  |L1.2136|
                          DCD      0x00f42400
                  |L1.2140|
                          DCD      ||.constdata||
                  |L1.2144|
                          DCD      SystemCoreClock
                  |L1.2148|
000864  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;1054     return SystemCoreClock;
;;;1055   }
000866  bd10              POP      {r4,pc}
;;;1056   
                          ENDP

                  HAL_RCC_GetPCLK1Freq PROC
;;;1062     */
;;;1063   uint32_t HAL_RCC_GetPCLK1Freq(void)
000868  b510              PUSH     {r4,lr}
;;;1064   {  
;;;1065     /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
;;;1066     return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
00086a  f7fffffe          BL       HAL_RCC_GetHCLKFreq
00086e  4963              LDR      r1,|L1.2556|
000870  6809              LDR      r1,[r1,#0]
000872  f44f52e0          MOV      r2,#0x1c00
000876  fa92f2a2          RBIT     r2,r2
00087a  f40151e0          AND      r1,r1,#0x1c00
00087e  fab2f282          CLZ      r2,r2
000882  40d1              LSRS     r1,r1,r2
000884  4a5e              LDR      r2,|L1.2560|
000886  5c51              LDRB     r1,[r2,r1]
000888  40c8              LSRS     r0,r0,r1
;;;1067   }
00088a  bd10              POP      {r4,pc}
;;;1068   
                          ENDP

                  HAL_RCC_GetPCLK2Freq PROC
;;;1074     */
;;;1075   uint32_t HAL_RCC_GetPCLK2Freq(void)
00088c  b510              PUSH     {r4,lr}
;;;1076   {
;;;1077     /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
;;;1078     return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
00088e  f7fffffe          BL       HAL_RCC_GetHCLKFreq
000892  495a              LDR      r1,|L1.2556|
000894  6809              LDR      r1,[r1,#0]
000896  f44f4260          MOV      r2,#0xe000
00089a  fa92f2a2          RBIT     r2,r2
00089e  f4014160          AND      r1,r1,#0xe000
0008a2  fab2f282          CLZ      r2,r2
0008a6  40d1              LSRS     r1,r1,r2
0008a8  4a55              LDR      r2,|L1.2560|
0008aa  5c51              LDRB     r1,[r2,r1]
0008ac  40c8              LSRS     r0,r0,r1
;;;1079   } 
0008ae  bd10              POP      {r4,pc}
;;;1080   
                          ENDP

                  HAL_RCC_GetOscConfig PROC
;;;1087     */
;;;1088   __weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
0008b0  b430              PUSH     {r4,r5}
;;;1089   {
;;;1090     /* Set all possible values for the Oscillator type parameter ---------------*/
;;;1091     RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
0008b2  210f              MOVS     r1,#0xf
0008b4  6001              STR      r1,[r0,#0]
;;;1092     
;;;1093     /* Get the HSE configuration -----------------------------------------------*/
;;;1094     if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
0008b6  4b53              LDR      r3,|L1.2564|
0008b8  6819              LDR      r1,[r3,#0]
;;;1095     {
;;;1096       RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
0008ba  f04f0405          MOV      r4,#5
0008be  f4112f80          TST      r1,#0x40000           ;1094
0008c2  f04f0200          MOV      r2,#0
;;;1097     }
;;;1098     else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
;;;1099     {
;;;1100       RCC_OscInitStruct->HSEState = RCC_HSE_ON;
0008c6  f04f0101          MOV      r1,#1
0008ca  d001              BEQ      |L1.2256|
0008cc  6044              STR      r4,[r0,#4]            ;1096
0008ce  e007              B        |L1.2272|
                  |L1.2256|
0008d0  f8d3c000          LDR      r12,[r3,#0]           ;1098
0008d4  f41c3f80          TST      r12,#0x10000          ;1098
0008d8  d001              BEQ      |L1.2270|
0008da  6041              STR      r1,[r0,#4]
0008dc  e000              B        |L1.2272|
                  |L1.2270|
;;;1101     }
;;;1102     else
;;;1103     {
;;;1104       RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
0008de  6042              STR      r2,[r0,#4]
                  |L1.2272|
;;;1105     }
;;;1106     
;;;1107     /* Get the HSI configuration -----------------------------------------------*/
;;;1108     if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
0008e0  f8d3c000          LDR      r12,[r3,#0]
0008e4  f01c0f01          TST      r12,#1
0008e8  d001              BEQ      |L1.2286|
;;;1109     {
;;;1110       RCC_OscInitStruct->HSIState = RCC_HSI_ON;
0008ea  60c1              STR      r1,[r0,#0xc]
0008ec  e000              B        |L1.2288|
                  |L1.2286|
;;;1111     }
;;;1112     else
;;;1113     {
;;;1114       RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
0008ee  60c2              STR      r2,[r0,#0xc]
                  |L1.2288|
;;;1115     }
;;;1116     
;;;1117     RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> POSITION_VAL(RCC_CR_HSITRIM));
0008f0  f8d3c000          LDR      r12,[r3,#0]
0008f4  25f8              MOVS     r5,#0xf8
0008f6  fa95f5a5          RBIT     r5,r5
0008fa  f00c0cf8          AND      r12,r12,#0xf8
0008fe  fab5f585          CLZ      r5,r5
000902  fa2cfc05          LSR      r12,r12,r5
000906  f8c0c010          STR      r12,[r0,#0x10]
;;;1118     
;;;1119     /* Get the LSE configuration -----------------------------------------------*/
;;;1120     if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
00090a  f8dfc0fc          LDR      r12,|L1.2568|
00090e  f8dc5000          LDR      r5,[r12,#0]
000912  f0150f04          TST      r5,#4
000916  d001              BEQ      |L1.2332|
;;;1121     {
;;;1122       RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
000918  6084              STR      r4,[r0,#8]
00091a  e007              B        |L1.2348|
                  |L1.2332|
;;;1123     }
;;;1124     else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
00091c  f8dcc000          LDR      r12,[r12,#0]
000920  f01c0f01          TST      r12,#1
000924  d001              BEQ      |L1.2346|
;;;1125     {
;;;1126       RCC_OscInitStruct->LSEState = RCC_LSE_ON;
000926  6081              STR      r1,[r0,#8]
000928  e000              B        |L1.2348|
                  |L1.2346|
;;;1127     }
;;;1128     else
;;;1129     {
;;;1130       RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
00092a  6082              STR      r2,[r0,#8]
                  |L1.2348|
;;;1131     }
;;;1132     
;;;1133     /* Get the LSI configuration -----------------------------------------------*/
;;;1134     if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
00092c  f8dfc0dc          LDR      r12,|L1.2572|
000930  f8dcc000          LDR      r12,[r12,#0]
000934  f01c0f01          TST      r12,#1
000938  d001              BEQ      |L1.2366|
;;;1135     {
;;;1136       RCC_OscInitStruct->LSIState = RCC_LSI_ON;
00093a  6141              STR      r1,[r0,#0x14]
00093c  e000              B        |L1.2368|
                  |L1.2366|
;;;1137     }
;;;1138     else
;;;1139     {
;;;1140       RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
00093e  6142              STR      r2,[r0,#0x14]
                  |L1.2368|
;;;1141     }
;;;1142     
;;;1143     /* Get the PLL configuration -----------------------------------------------*/
;;;1144     if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
000940  681a              LDR      r2,[r3,#0]
000942  f0127f80          TST      r2,#0x1000000
000946  d002              BEQ      |L1.2382|
;;;1145     {
;;;1146       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
000948  2102              MOVS     r1,#2
00094a  6181              STR      r1,[r0,#0x18]
00094c  e000              B        |L1.2384|
                  |L1.2382|
;;;1147     }
;;;1148     else
;;;1149     {
;;;1150       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
00094e  6181              STR      r1,[r0,#0x18]
                  |L1.2384|
;;;1151     }
;;;1152     RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
000950  492f              LDR      r1,|L1.2576|
000952  680a              LDR      r2,[r1,#0]
000954  f4020280          AND      r2,r2,#0x400000
000958  61c2              STR      r2,[r0,#0x1c]
;;;1153     RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
00095a  680a              LDR      r2,[r1,#0]
00095c  f002023f          AND      r2,r2,#0x3f
000960  6202              STR      r2,[r0,#0x20]
;;;1154     RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
000962  680b              LDR      r3,[r1,#0]
000964  f64772c0          MOV      r2,#0x7fc0
000968  4013              ANDS     r3,r3,r2
00096a  fa92f2a2          RBIT     r2,r2
00096e  fab2f282          CLZ      r2,r2
000972  fa23f202          LSR      r2,r3,r2
000976  6242              STR      r2,[r0,#0x24]
;;;1155     RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1) >> POSITION_VAL(RCC_PLLCFGR_PLLP));
000978  680a              LDR      r2,[r1,#0]
00097a  f44f3340          MOV      r3,#0x30000
00097e  f4023240          AND      r2,r2,#0x30000
000982  f5023280          ADD      r2,r2,#0x10000
000986  fa93f3a3          RBIT     r3,r3
00098a  0052              LSLS     r2,r2,#1
00098c  fab3f383          CLZ      r3,r3
000990  40da              LSRS     r2,r2,r3
000992  6282              STR      r2,[r0,#0x28]
;;;1156     RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> POSITION_VAL(RCC_PLLCFGR_PLLQ));
000994  6809              LDR      r1,[r1,#0]
000996  f04f6270          MOV      r2,#0xf000000
00099a  fa92f2a2          RBIT     r2,r2
00099e  f0016170          AND      r1,r1,#0xf000000
0009a2  fab2f282          CLZ      r2,r2
0009a6  40d1              LSRS     r1,r1,r2
0009a8  62c1              STR      r1,[r0,#0x2c]
;;;1157   }
0009aa  bc30              POP      {r4,r5}
0009ac  4770              BX       lr
;;;1158   
                          ENDP

                  HAL_RCC_GetClockConfig PROC
;;;1166     */
;;;1167   void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
0009ae  220f              MOVS     r2,#0xf
;;;1168   {
;;;1169     /* Set all possible values for the Clock type parameter --------------------*/
;;;1170     RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
0009b0  6002              STR      r2,[r0,#0]
;;;1171      
;;;1172     /* Get the SYSCLK configuration --------------------------------------------*/ 
;;;1173     RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
0009b2  4a12              LDR      r2,|L1.2556|
0009b4  6813              LDR      r3,[r2,#0]
0009b6  f0030303          AND      r3,r3,#3
0009ba  6043              STR      r3,[r0,#4]
;;;1174     
;;;1175     /* Get the HCLK configuration ----------------------------------------------*/ 
;;;1176     RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
0009bc  6813              LDR      r3,[r2,#0]
0009be  f00303f0          AND      r3,r3,#0xf0
0009c2  6083              STR      r3,[r0,#8]
;;;1177     
;;;1178     /* Get the APB1 configuration ----------------------------------------------*/ 
;;;1179     RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
0009c4  6813              LDR      r3,[r2,#0]
0009c6  f40353e0          AND      r3,r3,#0x1c00
0009ca  60c3              STR      r3,[r0,#0xc]
;;;1180     
;;;1181     /* Get the APB2 configuration ----------------------------------------------*/ 
;;;1182     RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
0009cc  6812              LDR      r2,[r2,#0]
0009ce  f4024260          AND      r2,r2,#0xe000
0009d2  08d2              LSRS     r2,r2,#3
0009d4  6102              STR      r2,[r0,#0x10]
;;;1183     
;;;1184     /* Get the Flash Wait State (Latency) configuration ------------------------*/   
;;;1185     *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
0009d6  480f              LDR      r0,|L1.2580|
0009d8  6800              LDR      r0,[r0,#0]
0009da  f000000f          AND      r0,r0,#0xf
0009de  6008              STR      r0,[r1,#0]
;;;1186   }
0009e0  4770              BX       lr
;;;1187   
                          ENDP

                  HAL_RCC_CSSCallback PROC
;;;1209     */
;;;1210   __weak void HAL_RCC_CSSCallback(void)
0009e2  4770              BX       lr
;;;1211   {
;;;1212     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1213               the HAL_RCC_CSSCallback could be implemented in the user file
;;;1214      */ 
;;;1215   }
;;;1216   
                          ENDP

                  HAL_RCC_NMI_IRQHandler PROC
;;;1192     */
;;;1193   void HAL_RCC_NMI_IRQHandler(void)
0009e4  b510              PUSH     {r4,lr}
;;;1194   {
;;;1195     /* Check RCC CSSF flag  */
;;;1196     if(__HAL_RCC_GET_IT(RCC_IT_CSS))
0009e6  480c              LDR      r0,|L1.2584|
0009e8  6800              LDR      r0,[r0,#0]
0009ea  f0100f80          TST      r0,#0x80
0009ee  d004              BEQ      |L1.2554|
;;;1197     {
;;;1198       /* RCC Clock Security System interrupt user callback */
;;;1199       HAL_RCC_CSSCallback();
0009f0  f7fffffe          BL       HAL_RCC_CSSCallback
;;;1200   
;;;1201       /* Clear RCC CSS pending bit */
;;;1202       __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
0009f4  4909              LDR      r1,|L1.2588|
0009f6  2080              MOVS     r0,#0x80
0009f8  7008              STRB     r0,[r1,#0]
                  |L1.2554|
;;;1203     }
;;;1204   }
0009fa  bd10              POP      {r4,pc}
;;;1205   
                          ENDP

                  |L1.2556|
                          DCD      0x40023808
                  |L1.2560|
                          DCD      ||.constdata||
                  |L1.2564|
                          DCD      0x40023800
                  |L1.2568|
                          DCD      0x40023870
                  |L1.2572|
                          DCD      0x40023874
                  |L1.2576|
                          DCD      0x40023804
                  |L1.2580|
                          DCD      0x40023c00
                  |L1.2584|
                          DCD      0x4002380c
                  |L1.2588|
                          DCD      0x4002380e

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  APBAHBPrescTable
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  01020304          DCB      0x01,0x02,0x03,0x04
000008  01020304          DCB      0x01,0x02,0x03,0x04
00000c  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "drivers\\src\\stm32f4xx_hal_rcc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_rcc_c_b7071a4b___Z7__REV16j|
#line 138 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.3.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___19_stm32f4xx_hal_rcc_c_b7071a4b___Z7__REV16j| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_rcc_c_b7071a4b___Z7__REVSHi|
#line 153
|__asm___19_stm32f4xx_hal_rcc_c_b7071a4b___Z7__REVSHi| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_rcc_c_b7071a4b___Z5__RRXj|
#line 328
|__asm___19_stm32f4xx_hal_rcc_c_b7071a4b___Z5__RRXj| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
