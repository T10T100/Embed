; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\objects\memory_alloc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\memory_alloc.d --cpu=Cortex-M4.fp --apcs=interwork -O1 -Otime --diag_suppress=9931 -I.\device\GUI\inc -I.\device\hardware\inc -I.\device\init\inc -I.\misc\inc -I.\user\inc -I..\tester_1.03 -I.\memory\inc -I.\drivers\inc -I.\res -I..\Embed -IE:\KeilProj\Embed\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F417xx -DSTM32F417xx -DColorDepthBpp16 -Dtftili9486 -DSOFTWARE_GL -DGUI_ALLIGN_LAYSIZE_TO_POW2 --omf_browse=.\objects\memory_alloc.crf memory\src\memory_alloc.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ZN15MemoryAllocator8SeparateEP11MemoryChunkj PROC ; MemoryAllocator::Separate(MemoryChunk*, unsigned)
;;;16     
;;;17     MemoryChunk *MemoryAllocator::Separate (MemoryChunk *memo, memory_size_t size)
000000  1888              ADDS     r0,r1,r2
;;;18     {
;;;19     	  MemoryChunk *chunk = (MemoryChunk *)0;
;;;20     		chunk = (MemoryChunk *)((alloc_addr_t)memo + size + sizeof(MemoryChunk));
000002  3010              ADDS     r0,r0,#0x10
;;;21     		chunk->size = memo->size - size - sizeof(MemoryChunk);
000004  68cb              LDR      r3,[r1,#0xc]
000006  1a9b              SUBS     r3,r3,r2
000008  3b10              SUBS     r3,r3,#0x10
00000a  60c3              STR      r3,[r0,#0xc]
;;;22     		memo->size = size;
00000c  60ca              STR      r2,[r1,#0xc]
;;;23     		return chunk;
;;;24     }
00000e  4770              BX       lr
;;;25     
                          ENDP

                  _ZN15MemoryAllocator3NewEj PROC ; MemoryAllocator::New(unsigned)
;;;54     
;;;55     void *MemoryAllocator::New (memory_size_t size)
000010  b570              PUSH     {r4-r6,lr}
;;;56     {
000012  4605              MOV      r5,r0
000014  460e              MOV      r6,r1
;;;57     	 if (!size) return 0;
000016  2e00              CMP      r6,#0
000018  d005              BEQ      |L1.38|
;;;58     	 if (this->Test()) return 0;
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       _ZN6Locker4TestEv ; Locker::Test()
000020  b118              CBZ      r0,|L1.42|
000022  2000              MOVS     r0,#0
;;;59     	 this->Lock();
;;;60     	
;;;61     	 MemoryChunk *chunk = this->PoolFree.GetFirst();
;;;62     			while (chunk != (MemoryChunk *)0) {
;;;63     				if (chunk->size >= size) {
;;;64     					this->PoolFree.Remove(chunk);
;;;65     					if (chunk->size >= size + sizeof(MemoryChunk) + __m) 
;;;66     						this->PoolFree + Separate(chunk, size);
;;;67     					this->PoolInUse + chunk;
;;;68     					chunk->key = (alloc_addr_t)chunk;
;;;69     					this->Unlock();
;;;70                         this->Success++;
;;;71     					return (void *)(chunk + 1);
;;;72     				}
;;;73     				chunk = chunk->rlink;
;;;74     			}
;;;75     	 errno = ENOMEM;
;;;76          this->Errors++;
;;;77     	 this->Unlock();
;;;78     	 return (void *)0;
;;;79     }
000024  bd70              POP      {r4-r6,pc}
                  |L1.38|
000026  2000              MOVS     r0,#0                 ;57
000028  bd70              POP      {r4-r6,pc}
                  |L1.42|
00002a  2100              MOVS     r1,#0                 ;59
00002c  4628              MOV      r0,r5                 ;59
00002e  f7fffffe          BL       _ZN6Locker4LockEj ; Locker::Lock(unsigned)
000032  f1050010          ADD      r0,r5,#0x10           ;61
000036  f7fffffe          BL       _ZN13List_IteratorI11MemoryChunkE8GetFirstEv ; List_Iterator<MemoryChunk>::GetFirst()
00003a  4604              MOV      r4,r0                 ;61
00003c  b34c              CBZ      r4,|L1.146|
                  |L1.62|
00003e  68e0              LDR      r0,[r4,#0xc]          ;63
000040  42b0              CMP      r0,r6                 ;63
000042  d323              BCC      |L1.140|
000044  4621              MOV      r1,r4                 ;64
000046  f1050010          ADD      r0,r5,#0x10           ;64
00004a  f7fffffe          BL       _ZN13List_IteratorI11MemoryChunkE6RemoveEPS0_ ; List_Iterator<MemoryChunk>::Remove(MemoryChunk*)
00004e  68e0              LDR      r0,[r4,#0xc]          ;65
000050  f1060120          ADD      r1,r6,#0x20           ;65
000054  4288              CMP      r0,r1                 ;65
000056  d309              BCC      |L1.108|
000058  4632              MOV      r2,r6                 ;66
00005a  4621              MOV      r1,r4                 ;66
00005c  4628              MOV      r0,r5                 ;66
00005e  f7fffffe          BL       _ZN15MemoryAllocator8SeparateEP11MemoryChunkj ; MemoryAllocator::Separate(MemoryChunk*, unsigned)
000062  4601              MOV      r1,r0                 ;66
000064  f1050010          ADD      r0,r5,#0x10           ;66
000068  f7fffffe          BL       _ZN13List_IteratorI11MemoryChunkEplEPS0_ ; List_Iterator<MemoryChunk>::operator +(MemoryChunk*)
                  |L1.108|
00006c  4621              MOV      r1,r4                 ;67
00006e  f105001c          ADD      r0,r5,#0x1c           ;67
000072  f7fffffe          BL       _ZN13List_IteratorI11MemoryChunkEplEPS0_ ; List_Iterator<MemoryChunk>::operator +(MemoryChunk*)
000076  60a4              STR      r4,[r4,#8]            ;68
000078  2100              MOVS     r1,#0                 ;69
00007a  4628              MOV      r0,r5                 ;69
00007c  f7fffffe          BL       _ZN6Locker6UnlockEj ; Locker::Unlock(unsigned)
000080  6aa8              LDR      r0,[r5,#0x28]         ;70
000082  1c40              ADDS     r0,r0,#1              ;70
000084  62a8              STR      r0,[r5,#0x28]         ;70
000086  f1040010          ADD      r0,r4,#0x10           ;71
00008a  bd70              POP      {r4-r6,pc}
                  |L1.140|
00008c  6824              LDR      r4,[r4,#0]            ;73
00008e  2c00              CMP      r4,#0                 ;62
000090  d1d5              BNE      |L1.62|
                  |L1.146|
000092  f7fffffe          BL       __aeabi_errno_addr
000096  2106              MOVS     r1,#6                 ;75
000098  6001              STR      r1,[r0,#0]            ;75
00009a  6ae8              LDR      r0,[r5,#0x2c]         ;76
00009c  1c40              ADDS     r0,r0,#1              ;76
00009e  62e8              STR      r0,[r5,#0x2c]         ;76
0000a0  2100              MOVS     r1,#0                 ;77
0000a2  4628              MOV      r0,r5                 ;77
0000a4  f7fffffe          BL       _ZN6Locker6UnlockEj ; Locker::Unlock(unsigned)
0000a8  2000              MOVS     r0,#0                 ;78
0000aa  bd70              POP      {r4-r6,pc}
;;;80     
                          ENDP

                  _ZN15MemoryAllocatorclEPvj PROC ; MemoryAllocator::operator ()(void*, unsigned)
;;;2      
;;;3      void MemoryAllocator::operator () (void *__heap, memory_size_t __size) 
0000ac  b510              PUSH     {r4,lr}
;;;4      {
0000ae  4604              MOV      r4,r0
;;;5      	MemoryChunk *chunk = (MemoryChunk *)__heap;
;;;6      	for (memory_size_t i = 0; i < __size; i++) {
0000b0  2000              MOVS     r0,#0
0000b2  2a00              CMP      r2,#0
0000b4  d905              BLS      |L1.194|
0000b6  4684              MOV      r12,r0                ;4
                  |L1.184|
;;;7      	    *((uint8_t *)__heap + i) = 0;
0000b8  f801c000          STRB     r12,[r1,r0]
0000bc  1c40              ADDS     r0,r0,#1              ;6
0000be  4290              CMP      r0,r2                 ;6
0000c0  d3fa              BCC      |L1.184|
                  |L1.194|
;;;8      	}
;;;9      	chunk->size = __size;
0000c2  60ca              STR      r2,[r1,#0xc]
;;;10     	chunk->key  = (alloc_addr_t)chunk;
0000c4  6089              STR      r1,[r1,#8]
;;;11     	this->PoolFree + chunk;
0000c6  f1040010          ADD      r0,r4,#0x10
0000ca  f7fffffe          BL       _ZN13List_IteratorI11MemoryChunkEplEPS0_ ; List_Iterator<MemoryChunk>::operator +(MemoryChunk*)
;;;12     	char *a = (char *)this->New(Heap_Print_Alloc);
0000ce  21c8              MOVS     r1,#0xc8
0000d0  4620              MOV      r0,r4
0000d2  f7fffffe          BL       _ZN15MemoryAllocator3NewEj ; MemoryAllocator::New(unsigned)
;;;13     	__TTY::operator () (a, Heap_Print_Alloc);
0000d6  4601              MOV      r1,r0
0000d8  22c8              MOVS     r2,#0xc8
0000da  1d20              ADDS     r0,r4,#4
0000dc  f7fffffe          BL       _ZN5__TTYclEPvj ; __TTY::operator ()(void*, unsigned)
;;;14     	this->Unlock();
0000e0  4620              MOV      r0,r4
0000e2  e8bd4010          POP      {r4,lr}
0000e6  2100              MOVS     r1,#0
0000e8  f7ffbffe          B.W      _ZN6Locker6UnlockEj ; Locker::Unlock(unsigned)
;;;15     }
;;;16     
                          ENDP

                  _ZN15MemoryAllocator8SanitizeER13List_IteratorI11MemoryChunkE PROC ; MemoryAllocator::Sanitize(List_Iterator<MemoryChunk>&)
;;;25     
;;;26     int32_t MemoryAllocator::Sanitize (List_Iterator <MemoryChunk> &List)
0000ec  b570              PUSH     {r4-r6,lr}
;;;27     {
0000ee  4605              MOV      r5,r0
0000f0  460e              MOV      r6,r1
;;;28     	  if (List.Contain() < 2) {
0000f2  4630              MOV      r0,r6
0000f4  f7fffffe          BL       _ZN13List_IteratorI11MemoryChunkE7ContainEv ; List_Iterator<MemoryChunk>::Contain()
0000f8  2802              CMP      r0,#2
0000fa  d202              BCS      |L1.258|
;;;29     			return -1;
0000fc  f04f30ff          MOV      r0,#0xffffffff
;;;30     		} else {}
;;;31     		MemoryChunk *New = List.GetLast()->llink, *Old = List.GetLast();
;;;32     		while (New != (MemoryChunk *)0) {
;;;33     			if ((alloc_addr_t)Old + Old->size + sizeof(MemoryChunk) == (alloc_addr_t)New) {
;;;34     				Old->size += sizeof(MemoryChunk) + New->size;
;;;35     				List - New;
;;;36             this->Sanitized++;
;;;37     			}
;;;38     			Old = New;
;;;39     			New = New->llink;
;;;40     		}	
;;;41     		New = List.GetFirst()->rlink;
;;;42     		Old = List.GetFirst();
;;;43     		while (New != (MemoryChunk *)0) {
;;;44     			if ((alloc_addr_t)Old + Old->size + sizeof(MemoryChunk) == (alloc_addr_t)New) {
;;;45     				Old->size += sizeof(MemoryChunk) + New->size;
;;;46     				List - New;
;;;47             this->Sanitized++;
;;;48     			}
;;;49     			Old = New;
;;;50     			New = New->rlink;
;;;51     		}	
;;;52         return 0;		
;;;53     }
000100  bd70              POP      {r4-r6,pc}
                  |L1.258|
000102  4630              MOV      r0,r6                 ;31
000104  f7fffffe          BL       _ZN13List_IteratorI11MemoryChunkE7GetLastEv ; List_Iterator<MemoryChunk>::GetLast()
000108  6844              LDR      r4,[r0,#4]            ;31
00010a  4630              MOV      r0,r6                 ;31
00010c  f7fffffe          BL       _ZN13List_IteratorI11MemoryChunkE7GetLastEv ; List_Iterator<MemoryChunk>::GetLast()
000110  b1a4              CBZ      r4,|L1.316|
                  |L1.274|
000112  68c1              LDR      r1,[r0,#0xc]          ;33
000114  f1000210          ADD      r2,r0,#0x10           ;33
000118  440a              ADD      r2,r2,r1              ;33
00011a  42a2              CMP      r2,r4                 ;33
00011c  d10a              BNE      |L1.308|
00011e  68e2              LDR      r2,[r4,#0xc]          ;34
000120  4411              ADD      r1,r1,r2              ;34
000122  3110              ADDS     r1,r1,#0x10           ;34
000124  60c1              STR      r1,[r0,#0xc]          ;34
000126  4621              MOV      r1,r4                 ;35
000128  4630              MOV      r0,r6                 ;35
00012a  f7fffffe          BL       _ZN13List_IteratorI11MemoryChunkEmiEPS0_ ; List_Iterator<MemoryChunk>::operator -(MemoryChunk*)
00012e  6b28              LDR      r0,[r5,#0x30]         ;36
000130  1c40              ADDS     r0,r0,#1              ;36
000132  6328              STR      r0,[r5,#0x30]         ;36
                  |L1.308|
000134  4620              MOV      r0,r4                 ;38
000136  6864              LDR      r4,[r4,#4]            ;39
000138  2c00              CMP      r4,#0                 ;32
00013a  d1ea              BNE      |L1.274|
                  |L1.316|
00013c  4630              MOV      r0,r6                 ;41
00013e  f7fffffe          BL       _ZN13List_IteratorI11MemoryChunkE8GetFirstEv ; List_Iterator<MemoryChunk>::GetFirst()
000142  6804              LDR      r4,[r0,#0]            ;41
000144  4630              MOV      r0,r6                 ;42
000146  f7fffffe          BL       _ZN13List_IteratorI11MemoryChunkE8GetFirstEv ; List_Iterator<MemoryChunk>::GetFirst()
00014a  b1a4              CBZ      r4,|L1.374|
                  |L1.332|
00014c  68c1              LDR      r1,[r0,#0xc]          ;44
00014e  f1000210          ADD      r2,r0,#0x10           ;44
000152  440a              ADD      r2,r2,r1              ;44
000154  42a2              CMP      r2,r4                 ;44
000156  d10a              BNE      |L1.366|
000158  68e2              LDR      r2,[r4,#0xc]          ;45
00015a  4411              ADD      r1,r1,r2              ;45
00015c  3110              ADDS     r1,r1,#0x10           ;45
00015e  60c1              STR      r1,[r0,#0xc]          ;45
000160  4621              MOV      r1,r4                 ;46
000162  4630              MOV      r0,r6                 ;46
000164  f7fffffe          BL       _ZN13List_IteratorI11MemoryChunkEmiEPS0_ ; List_Iterator<MemoryChunk>::operator -(MemoryChunk*)
000168  6b28              LDR      r0,[r5,#0x30]         ;47
00016a  1c40              ADDS     r0,r0,#1              ;47
00016c  6328              STR      r0,[r5,#0x30]         ;47
                  |L1.366|
00016e  4620              MOV      r0,r4                 ;49
000170  6824              LDR      r4,[r4,#0]            ;50
000172  2c00              CMP      r4,#0                 ;43
000174  d1ea              BNE      |L1.332|
                  |L1.374|
000176  2000              MOVS     r0,#0                 ;52
000178  bd70              POP      {r4-r6,pc}
;;;54     
                          ENDP

                  _ZN15MemoryAllocator6DeleteEPv PROC ; MemoryAllocator::Delete(void*)
;;;80     
;;;81     int32_t MemoryAllocator::Delete (void *P)
00017a  b570              PUSH     {r4-r6,lr}
;;;82     {
00017c  4604              MOV      r4,r0
00017e  460d              MOV      r5,r1
;;;83     	 if (P == (MemoryChunk *)0) {
000180  2d00              CMP      r5,#0
000182  d008              BEQ      |L1.406|
;;;84              this->Errors++;
;;;85              return errno = EINVAL;
;;;86          } else {}
;;;87     	 if (this->Test()) {
000184  4620              MOV      r0,r4
000186  f7fffffe          BL       _ZN6Locker4TestEv ; Locker::Test()
00018a  b168              CBZ      r0,|L1.424|
;;;88              this->Errors++;
00018c  6ae0              LDR      r0,[r4,#0x2c]
00018e  1c40              ADDS     r0,r0,#1
000190  62e0              STR      r0,[r4,#0x2c]
;;;89              return 0;
000192  2000              MOVS     r0,#0
;;;90          } else {}
;;;91     	 this->Lock();
;;;92     	 errno = 0;
;;;93     	 MemoryChunk *chunk = (MemoryChunk *)(P) - 1;
;;;94     	 
;;;95     	 /*
;;;96     	 if (!(chunk->llink) && !(chunk->llink)) errno = EINVAL;
;;;97     	 else if (!(chunk->llink)) {
;;;98     		 if (chunk->rlink->llink != chunk) errno = EINVAL;
;;;99     	 } else if (!(chunk->rlink)){
;;;100    		 if (chunk->llink->rlink != chunk) errno = EINVAL;
;;;101    	 } else {
;;;102    		 if (chunk->llink->rlink != chunk->rlink->llink) errno = EINVAL;
;;;103    	 }
;;;104    	 */
;;;105    	 if (errno == EINVAL) {
;;;106    		 this->Unlock();
;;;107    		 return errno;
;;;108    	 } else {}
;;;109    	 this->PoolInUse - chunk;
;;;110    	 this->PoolFree + chunk;
;;;111    	 Sanitize(this->PoolFree);
;;;112    	 this->Unlock();
;;;113    	 return errno;	
;;;114    }
000194  bd70              POP      {r4-r6,pc}
                  |L1.406|
000196  6ae0              LDR      r0,[r4,#0x2c]         ;84
000198  1c40              ADDS     r0,r0,#1              ;84
00019a  62e0              STR      r0,[r4,#0x2c]         ;84
00019c  f7fffffe          BL       __aeabi_errno_addr
0001a0  4601              MOV      r1,r0                 ;85
0001a2  2005              MOVS     r0,#5                 ;85
0001a4  6008              STR      r0,[r1,#0]            ;85
0001a6  bd70              POP      {r4-r6,pc}
                  |L1.424|
0001a8  2100              MOVS     r1,#0                 ;91
0001aa  4620              MOV      r0,r4                 ;91
0001ac  f7fffffe          BL       _ZN6Locker4LockEj ; Locker::Lock(unsigned)
0001b0  f7fffffe          BL       __aeabi_errno_addr
0001b4  2100              MOVS     r1,#0                 ;92
0001b6  4606              MOV      r6,r0                 ;92
0001b8  6001              STR      r1,[r0,#0]            ;92
0001ba  3d10              SUBS     r5,r5,#0x10           ;93
0001bc  6800              LDR      r0,[r0,#0]            ;105
0001be  2805              CMP      r0,#5                 ;105
0001c0  d014              BEQ      |L1.492|
0001c2  4629              MOV      r1,r5                 ;109
0001c4  f104001c          ADD      r0,r4,#0x1c           ;109
0001c8  f7fffffe          BL       _ZN13List_IteratorI11MemoryChunkEmiEPS0_ ; List_Iterator<MemoryChunk>::operator -(MemoryChunk*)
0001cc  4629              MOV      r1,r5                 ;110
0001ce  f1040010          ADD      r0,r4,#0x10           ;110
0001d2  f7fffffe          BL       _ZN13List_IteratorI11MemoryChunkEplEPS0_ ; List_Iterator<MemoryChunk>::operator +(MemoryChunk*)
0001d6  f1040110          ADD      r1,r4,#0x10           ;111
0001da  4620              MOV      r0,r4                 ;111
0001dc  f7fffffe          BL       _ZN15MemoryAllocator8SanitizeER13List_IteratorI11MemoryChunkE ; MemoryAllocator::Sanitize(List_Iterator<MemoryChunk>&)
0001e0  2100              MOVS     r1,#0                 ;112
0001e2  4620              MOV      r0,r4                 ;112
0001e4  f7fffffe          BL       _ZN6Locker6UnlockEj ; Locker::Unlock(unsigned)
0001e8  6830              LDR      r0,[r6,#0]            ;113
0001ea  bd70              POP      {r4-r6,pc}
                  |L1.492|
0001ec  2100              MOVS     r1,#0                 ;106
0001ee  4620              MOV      r0,r4                 ;106
0001f0  f7fffffe          BL       _ZN6Locker6UnlockEj ; Locker::Unlock(unsigned)
0001f4  6830              LDR      r0,[r6,#0]            ;107
0001f6  bd70              POP      {r4-r6,pc}
;;;115    
                          ENDP

                  _ZN15MemoryAllocator5CheckEv PROC ; MemoryAllocator::Check()
;;;116    int32_t MemoryAllocator::Check ()
0001f8  2000              MOVS     r0,#0
;;;117    {
;;;118    	return 0;
;;;119    }
0001fa  4770              BX       lr
;;;120    
                          ENDP

                  _ZN15MemoryAllocator10PrintTableEv PROC ; MemoryAllocator::PrintTable()
;;;121    __TEXT MemoryAllocator::PrintTable ()
0001fc  e92d41f0          PUSH     {r4-r8,lr}
;;;122    {
000200  4607              MOV      r7,r0
000202  460c              MOV      r4,r1
;;;123    	int32_t t = this->PoolInUse.Contain();
000204  f104001c          ADD      r0,r4,#0x1c
000208  f7fffffe          BL       _ZN13List_IteratorI11MemoryChunkE7ContainEv ; List_Iterator<MemoryChunk>::Contain()
00020c  4605              MOV      r5,r0
;;;124    	int32_t i = this->PoolFree.Contain(), total;
00020e  f1040010          ADD      r0,r4,#0x10
000212  f7fffffe          BL       _ZN13List_IteratorI11MemoryChunkE7ContainEv ; List_Iterator<MemoryChunk>::Contain()
000216  4606              MOV      r6,r0
;;;125    	this->Print(0, (char *)"Memory Chip :", 13);
000218  230d              MOVS     r3,#0xd
00021a  a25e              ADR      r2,|L1.916|
00021c  2100              MOVS     r1,#0
00021e  1d20              ADDS     r0,r4,#4
000220  f7fffffe          BL       _ZN5__TTY5PrintEiPcj ; __TTY::Print(int, char*, unsigned)
;;;126    	this->Print((char *)"CY1619", 6);
000224  2206              MOVS     r2,#6
000226  a15f              ADR      r1,|L1.932|
000228  1d20              ADDS     r0,r4,#4
00022a  f7fffffe          BL       _ZN5__TTY5PrintEPcj ; __TTY::Print(char*, unsigned)
;;;127    	(*this) + '\n';
00022e  210a              MOVS     r1,#0xa
000230  1d20              ADDS     r0,r4,#4
000232  f7fffffe          BL       _ZN5__TTYplEc ; __TTY::operator +(char)
;;;128    	this->Print((char *)"Memory Speed :", 14);
000236  220e              MOVS     r2,#0xe
000238  a15c              ADR      r1,|L1.940|
00023a  1d20              ADDS     r0,r4,#4
00023c  f7fffffe          BL       _ZN5__TTY5PrintEPcj ; __TTY::Print(char*, unsigned)
;;;129    	this->Print((char *)"20MHz", 5);
000240  2205              MOVS     r2,#5
000242  a15e              ADR      r1,|L1.956|
000244  1d20              ADDS     r0,r4,#4
000246  f7fffffe          BL       _ZN5__TTY5PrintEPcj ; __TTY::Print(char*, unsigned)
;;;130    	(*this) + '\n';
00024a  210a              MOVS     r1,#0xa
00024c  1d20              ADDS     r0,r4,#4
00024e  f7fffffe          BL       _ZN5__TTYplEc ; __TTY::operator +(char)
;;;131    	this->Print((char *)"Allocations:", 12);
000252  220c              MOVS     r2,#0xc
000254  a15b              ADR      r1,|L1.964|
000256  1d20              ADDS     r0,r4,#4
000258  f7fffffe          BL       _ZN5__TTY5PrintEPcj ; __TTY::Print(char*, unsigned)
;;;132    	(*this) + ' ' + (i + t) + '(' + i + '/' + t + ')' + '\n';
00025c  2120              MOVS     r1,#0x20
00025e  1d20              ADDS     r0,r4,#4
000260  f7fffffe          BL       _ZN5__TTYplEc ; __TTY::operator +(char)
000264  1971              ADDS     r1,r6,r5
000266  f7fffffe          BL       _ZN5__TTYplEi ; __TTY::operator +(int)
00026a  2128              MOVS     r1,#0x28
00026c  f7fffffe          BL       _ZN5__TTYplEc ; __TTY::operator +(char)
000270  4631              MOV      r1,r6
000272  f7fffffe          BL       _ZN5__TTYplEi ; __TTY::operator +(int)
000276  212f              MOVS     r1,#0x2f
000278  f7fffffe          BL       _ZN5__TTYplEc ; __TTY::operator +(char)
00027c  4629              MOV      r1,r5
00027e  f7fffffe          BL       _ZN5__TTYplEi ; __TTY::operator +(int)
000282  2129              MOVS     r1,#0x29
000284  f7fffffe          BL       _ZN5__TTYplEc ; __TTY::operator +(char)
000288  210a              MOVS     r1,#0xa
00028a  f7fffffe          BL       _ZN5__TTYplEc ; __TTY::operator +(char)
;;;133    	i = this->PoolFree.Contain();
00028e  f1040010          ADD      r0,r4,#0x10
000292  f7fffffe          BL       _ZN13List_IteratorI11MemoryChunkE7ContainEv ; List_Iterator<MemoryChunk>::Contain()
;;;134    	t = 0;
000296  2500              MOVS     r5,#0
;;;135    	while (i--) {
000298  1e46              SUBS     r6,r0,#1
00029a  d308              BCC      |L1.686|
                  |L1.668|
;;;136    		t += this->PoolFree.Get(i)->size;
00029c  4631              MOV      r1,r6
00029e  f1040010          ADD      r0,r4,#0x10
0002a2  f7fffffe          BL       _ZN13List_IteratorI11MemoryChunkE3GetEj ; List_Iterator<MemoryChunk>::Get(unsigned)
0002a6  68c0              LDR      r0,[r0,#0xc]
0002a8  4405              ADD      r5,r5,r0
0002aa  1e76              SUBS     r6,r6,#1              ;135
0002ac  d2f6              BCS      |L1.668|
                  |L1.686|
;;;137    	}
;;;138    	total = t;
0002ae  46a8              MOV      r8,r5
;;;139    	this->Print((char *)"Free (Bytes):", 13);
0002b0  220d              MOVS     r2,#0xd
0002b2  a148              ADR      r1,|L1.980|
0002b4  1d20              ADDS     r0,r4,#4
0002b6  f7fffffe          BL       _ZN5__TTY5PrintEPcj ; __TTY::Print(char*, unsigned)
;;;140    	(*this) + ' ' + t + '\n';
0002ba  2120              MOVS     r1,#0x20
0002bc  1d20              ADDS     r0,r4,#4
0002be  f7fffffe          BL       _ZN5__TTYplEc ; __TTY::operator +(char)
0002c2  4629              MOV      r1,r5
0002c4  f7fffffe          BL       _ZN5__TTYplEi ; __TTY::operator +(int)
0002c8  210a              MOVS     r1,#0xa
0002ca  f7fffffe          BL       _ZN5__TTYplEc ; __TTY::operator +(char)
;;;141    	
;;;142    	i = this->PoolInUse.Contain();
0002ce  f104001c          ADD      r0,r4,#0x1c
0002d2  f7fffffe          BL       _ZN13List_IteratorI11MemoryChunkE7ContainEv ; List_Iterator<MemoryChunk>::Contain()
;;;143    	t = 0;
0002d6  2500              MOVS     r5,#0
;;;144    	while (i--) {
0002d8  1e46              SUBS     r6,r0,#1
0002da  d308              BCC      |L1.750|
                  |L1.732|
;;;145    		t += this->PoolInUse.Get(i)->size;
0002dc  4631              MOV      r1,r6
0002de  f104001c          ADD      r0,r4,#0x1c
0002e2  f7fffffe          BL       _ZN13List_IteratorI11MemoryChunkE3GetEj ; List_Iterator<MemoryChunk>::Get(unsigned)
0002e6  68c0              LDR      r0,[r0,#0xc]
0002e8  4405              ADD      r5,r5,r0
0002ea  1e76              SUBS     r6,r6,#1              ;144
0002ec  d2f6              BCS      |L1.732|
                  |L1.750|
;;;146    	}
;;;147    	this->Print((char *)"Used (Bytes):", 13);
0002ee  220d              MOVS     r2,#0xd
0002f0  a13c              ADR      r1,|L1.996|
0002f2  1d20              ADDS     r0,r4,#4
0002f4  f7fffffe          BL       _ZN5__TTY5PrintEPcj ; __TTY::Print(char*, unsigned)
;;;148    	(*this) + ' ' + t + '\n';
0002f8  2120              MOVS     r1,#0x20
0002fa  1d20              ADDS     r0,r4,#4
0002fc  f7fffffe          BL       _ZN5__TTYplEc ; __TTY::operator +(char)
000300  4629              MOV      r1,r5
000302  f7fffffe          BL       _ZN5__TTYplEi ; __TTY::operator +(int)
000306  210a              MOVS     r1,#0xa
000308  f7fffffe          BL       _ZN5__TTYplEc ; __TTY::operator +(char)
;;;149    	total += t;
00030c  4445              ADD      r5,r5,r8
;;;150        this->Print((char *)"Total (Bytes):", 14);
00030e  220e              MOVS     r2,#0xe
000310  a138              ADR      r1,|L1.1012|
000312  1d20              ADDS     r0,r4,#4
000314  f7fffffe          BL       _ZN5__TTY5PrintEPcj ; __TTY::Print(char*, unsigned)
;;;151    	(*this) + ' ' + total + '\n';
000318  2120              MOVS     r1,#0x20
00031a  1d20              ADDS     r0,r4,#4
00031c  f7fffffe          BL       _ZN5__TTYplEc ; __TTY::operator +(char)
000320  4629              MOV      r1,r5
000322  f7fffffe          BL       _ZN5__TTYplEi ; __TTY::operator +(int)
000326  210a              MOVS     r1,#0xa
000328  f7fffffe          BL       _ZN5__TTYplEc ; __TTY::operator +(char)
;;;152        
;;;153        this->Print((char *)"Succeed:", 8);
00032c  2208              MOVS     r2,#8
00032e  a135              ADR      r1,|L1.1028|
000330  1d20              ADDS     r0,r4,#4
000332  f7fffffe          BL       _ZN5__TTY5PrintEPcj ; __TTY::Print(char*, unsigned)
;;;154    	(*this) + ' ' + (int32_t)this->Success + '\n';
000336  2120              MOVS     r1,#0x20
000338  1d20              ADDS     r0,r4,#4
00033a  f7fffffe          BL       _ZN5__TTYplEc ; __TTY::operator +(char)
00033e  6aa1              LDR      r1,[r4,#0x28]
000340  f7fffffe          BL       _ZN5__TTYplEi ; __TTY::operator +(int)
000344  210a              MOVS     r1,#0xa
000346  f7fffffe          BL       _ZN5__TTYplEc ; __TTY::operator +(char)
;;;155        this->Print((char *)"Sanitized:", 10);
00034a  220a              MOVS     r2,#0xa
00034c  a130              ADR      r1,|L1.1040|
00034e  1d20              ADDS     r0,r4,#4
000350  f7fffffe          BL       _ZN5__TTY5PrintEPcj ; __TTY::Print(char*, unsigned)
;;;156    	(*this) + ' ' + (int32_t)this->Sanitized + '\n';
000354  2120              MOVS     r1,#0x20
000356  1d20              ADDS     r0,r4,#4
000358  f7fffffe          BL       _ZN5__TTYplEc ; __TTY::operator +(char)
00035c  6b21              LDR      r1,[r4,#0x30]
00035e  f7fffffe          BL       _ZN5__TTYplEi ; __TTY::operator +(int)
000362  210a              MOVS     r1,#0xa
000364  f7fffffe          BL       _ZN5__TTYplEc ; __TTY::operator +(char)
;;;157        this->Print((char *)"Errors:", 7);
000368  2207              MOVS     r2,#7
00036a  a12c              ADR      r1,|L1.1052|
00036c  1d20              ADDS     r0,r4,#4
00036e  f7fffffe          BL       _ZN5__TTY5PrintEPcj ; __TTY::Print(char*, unsigned)
;;;158    	(*this) + ' ' + (int32_t)this->Errors + '\n';
000372  2120              MOVS     r1,#0x20
000374  1d20              ADDS     r0,r4,#4
000376  f7fffffe          BL       _ZN5__TTYplEc ; __TTY::operator +(char)
00037a  6ae1              LDR      r1,[r4,#0x2c]
00037c  f7fffffe          BL       _ZN5__TTYplEi ; __TTY::operator +(int)
000380  210a              MOVS     r1,#0xa
000382  f7fffffe          BL       _ZN5__TTYplEc ; __TTY::operator +(char)
;;;159    	return this->Print();
000386  1d21              ADDS     r1,r4,#4
000388  4638              MOV      r0,r7
00038a  e8bd41f0          POP      {r4-r8,lr}
00038e  f7ffbffe          B.W      _ZN5__TTY5PrintEv ; __TTY::Print()
;;;160    }
;;;161    
                          ENDP

000392  0000              DCW      0x0000
                  |L1.916|
000394  4d656d6f          DCB      "Memory Chip :",0
000398  72792043
00039c  68697020
0003a0  3a00    
0003a2  00                DCB      0
0003a3  00                DCB      0
                  |L1.932|
0003a4  43593136          DCB      "CY1619",0
0003a8  313900  
0003ab  00                DCB      0
                  |L1.940|
0003ac  4d656d6f          DCB      "Memory Speed :",0
0003b0  72792053
0003b4  70656564
0003b8  203a00  
0003bb  00                DCB      0
                  |L1.956|
0003bc  32304d48          DCB      "20MHz",0
0003c0  7a00    
0003c2  00                DCB      0
0003c3  00                DCB      0
                  |L1.964|
0003c4  416c6c6f          DCB      "Allocations:",0
0003c8  63617469
0003cc  6f6e733a
0003d0  00      
0003d1  00                DCB      0
0003d2  00                DCB      0
0003d3  00                DCB      0
                  |L1.980|
0003d4  46726565          DCB      "Free (Bytes):",0
0003d8  20284279
0003dc  74657329
0003e0  3a00    
0003e2  00                DCB      0
0003e3  00                DCB      0
                  |L1.996|
0003e4  55736564          DCB      "Used (Bytes):",0
0003e8  20284279
0003ec  74657329
0003f0  3a00    
0003f2  00                DCB      0
0003f3  00                DCB      0
                  |L1.1012|
0003f4  546f7461          DCB      "Total (Bytes):",0
0003f8  6c202842
0003fc  79746573
000400  293a00  
000403  00                DCB      0
                  |L1.1028|
000404  53756363          DCB      "Succeed:",0
000408  6565643a
00040c  00      
00040d  00                DCB      0
00040e  00                DCB      0
00040f  00                DCB      0
                  |L1.1040|
000410  53616e69          DCB      "Sanitized:",0
000414  74697a65
000418  643a00  
00041b  00                DCB      0
                  |L1.1052|
00041c  4572726f          DCB      "Errors:",0
000420  72733a00

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorI11MemoryChunkEplERS0_||, COMGROUP=_ZN13List_IteratorI11MemoryChunkEplERS0_, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorI11MemoryChunkEplERS0_ PROC ; List_Iterator<MemoryChunk>::operator +(MemoryChunk&)
;;;55     template <class T>
;;;56     bool List_Iterator<T>::operator + (T &item)
000000  b410              PUSH     {r4}
;;;57     {
;;;58     	this->Elements++;
000002  6882              LDR      r2,[r0,#8]
000004  1c52              ADDS     r2,r2,#1
000006  6082              STR      r2,[r0,#8]
;;;59     		T *i,*j;
;;;60     		if (!this->First) {
000008  6802              LDR      r2,[r0,#0]
00000a  2400              MOVS     r4,#0
00000c  2a00              CMP      r2,#0
00000e  d00f              BEQ      |L13.48|
;;;61     			this->First = &item;
;;;62     			this->Last = &item;
;;;63     			item.rlink = (T *)0;
;;;64     			item.llink = (T *)0;
;;;65     			return true;
;;;66     		}
;;;67     		i = this->First;
;;;68     		j = (T *)0;
;;;69     		while (i != (T *)0) {
;;;70     			if (i->key > item.key) {
000010  f8d1c008          LDR      r12,[r1,#8]
                  |L13.20|
000014  6893              LDR      r3,[r2,#8]
000016  4563              CMP      r3,r12
000018  d911              BLS      |L13.62|
;;;71     				j = i;
00001a  4613              MOV      r3,r2
;;;72     				i = i->rlink;
00001c  6812              LDR      r2,[r2,#0]
00001e  2a00              CMP      r2,#0                 ;69
;;;73     				continue;
000020  d1f8              BNE      |L13.20|
;;;74     			}
;;;75     			if (i->llink) {
;;;76     				i->llink->rlink = &item;
;;;77     				item.rlink = i;
;;;78     				item.llink = i->llink;
;;;79     				i->llink = &item;
;;;80     				return true;
;;;81     			}
;;;82     			item.rlink = i;
;;;83     			item.llink = (T *)0;
;;;84     			i->llink = &item;
;;;85     			this->First = &item;
;;;86     			return true;
;;;87     		}
;;;88     		j->rlink = &item;
000022  6019              STR      r1,[r3,#0]
;;;89     		item.rlink = (T *)0;
000024  600c              STR      r4,[r1,#0]
;;;90     		this->Last = &item;
000026  6041              STR      r1,[r0,#4]
;;;91     		item.llink = j;
000028  604b              STR      r3,[r1,#4]
;;;92     		return true;	
;;;93     }
00002a  bc10              POP      {r4}
00002c  2001              MOVS     r0,#1                 ;92
00002e  4770              BX       lr
                  |L13.48|
000030  6001              STR      r1,[r0,#0]            ;61
000032  6041              STR      r1,[r0,#4]            ;62
000034  600c              STR      r4,[r1,#0]            ;63
000036  604c              STR      r4,[r1,#4]            ;64
000038  bc10              POP      {r4}
00003a  2001              MOVS     r0,#1                 ;65
00003c  4770              BX       lr
                  |L13.62|
00003e  6853              LDR      r3,[r2,#4]            ;75
000040  b13b              CBZ      r3,|L13.82|
000042  6019              STR      r1,[r3,#0]            ;76
000044  600a              STR      r2,[r1,#0]            ;77
000046  6850              LDR      r0,[r2,#4]            ;78
000048  6048              STR      r0,[r1,#4]            ;78
00004a  6051              STR      r1,[r2,#4]            ;79
00004c  bc10              POP      {r4}
00004e  2001              MOVS     r0,#1                 ;80
000050  4770              BX       lr
                  |L13.82|
000052  600a              STR      r2,[r1,#0]            ;82
000054  604c              STR      r4,[r1,#4]            ;83
000056  6051              STR      r1,[r2,#4]            ;84
000058  6001              STR      r1,[r0,#0]            ;85
00005a  bc10              POP      {r4}
00005c  2001              MOVS     r0,#1                 ;86
00005e  4770              BX       lr
;;;94     template <class T>
                          ENDP


                          AREA ||area_number.14||, COMGROUP=_ZN13List_IteratorI11MemoryChunkEplERS0_, LINKORDER=||t._ZN13List_IteratorI11MemoryChunkEplERS0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorI11MemoryChunkEplERS0_||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorI11MemoryChunkEmiERS0_||, COMGROUP=_ZN13List_IteratorI11MemoryChunkEmiERS0_, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorI11MemoryChunkEmiERS0_ PROC ; List_Iterator<MemoryChunk>::operator -(MemoryChunk&)
;;;94     template <class T>
;;;95     T *List_Iterator<T>::operator - (T &item)
000000  b410              PUSH     {r4}
;;;96     {
000002  4603              MOV      r3,r0
;;;97     	if (this->Elements == 0)return (T *)0;
000004  6898              LDR      r0,[r3,#8]
000006  2800              CMP      r0,#0
000008  d00f              BEQ      |L20.42|
;;;98     	this->Elements--;
00000a  1e40              SUBS     r0,r0,#1
00000c  6098              STR      r0,[r3,#8]
;;;99     	T *l = item.llink,*r = item.rlink;
00000e  6848              LDR      r0,[r1,#4]
000010  680a              LDR      r2,[r1,#0]
;;;100    		if (!l&&!r) {
000012  f04f0c00          MOV      r12,#0
000016  ea500402          ORRS     r4,r0,r2
00001a  d009              BEQ      |L20.48|
;;;101    			this->First = (T *)0;
;;;102    			this->Last = (T *)0;
;;;103    			return (T *)0;
;;;104    		}
;;;105    		if (!l) {
00001c  b178              CBZ      r0,|L20.62|
;;;106    			this->First = r;
;;;107    			r->llink = (T *)0;
;;;108    		}
;;;109    		else    l->rlink = r;
00001e  6002              STR      r2,[r0,#0]
                  |L20.32|
;;;110    		
;;;111    		if (!r) {
000020  b18a              CBZ      r2,|L20.70|
;;;112       			l->rlink = (T *)0;
;;;113    			  this->Last = l;
;;;114    		}
;;;115    		else    r->llink = l;
000022  6050              STR      r0,[r2,#4]
                  |L20.36|
;;;116    		return &item;	
;;;117    }
000024  bc10              POP      {r4}
000026  4608              MOV      r0,r1                 ;116
000028  4770              BX       lr
                  |L20.42|
00002a  bc10              POP      {r4}
00002c  2000              MOVS     r0,#0                 ;97
00002e  4770              BX       lr
                  |L20.48|
000030  f8c3c000          STR      r12,[r3,#0]           ;101
000034  f8c3c004          STR      r12,[r3,#4]           ;102
000038  bc10              POP      {r4}
00003a  2000              MOVS     r0,#0                 ;103
00003c  4770              BX       lr
                  |L20.62|
00003e  601a              STR      r2,[r3,#0]            ;106
000040  f8c2c004          STR      r12,[r2,#4]           ;107
000044  e7ec              B        |L20.32|
                  |L20.70|
000046  f8c0c000          STR      r12,[r0,#0]           ;112
00004a  6058              STR      r0,[r3,#4]            ;113
00004c  e7ea              B        |L20.36|
;;;118    
                          ENDP


                          AREA ||area_number.21||, COMGROUP=_ZN13List_IteratorI11MemoryChunkEmiERS0_, LINKORDER=||t._ZN13List_IteratorI11MemoryChunkEmiERS0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorI11MemoryChunkEmiERS0_||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorI11MemoryChunkEplEPS0_||, COMGROUP=_ZN13List_IteratorI11MemoryChunkEplEPS0_, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorI11MemoryChunkEplEPS0_ PROC ; List_Iterator<MemoryChunk>::operator +(MemoryChunk*)
;;;119    template <class T>
;;;120    bool List_Iterator<T>::operator + (T *item)
000000  f7ffbffe          B.W      _ZN13List_IteratorI11MemoryChunkEplERS0_ ; List_Iterator<MemoryChunk>::operator +(MemoryChunk&)
;;;121    {
;;;122    	return *this + *item;
;;;123    }
;;;124    
                          ENDP


                          AREA ||area_number.28||, COMGROUP=_ZN13List_IteratorI11MemoryChunkEplEPS0_, LINKORDER=||t._ZN13List_IteratorI11MemoryChunkEplEPS0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorI11MemoryChunkEplEPS0_||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorI11MemoryChunkEmiEPS0_||, COMGROUP=_ZN13List_IteratorI11MemoryChunkEmiEPS0_, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorI11MemoryChunkEmiEPS0_ PROC ; List_Iterator<MemoryChunk>::operator -(MemoryChunk*)
;;;164    template <class T>
;;;165    T *List_Iterator<T>::operator - (T *item)
000000  f7ffbffe          B.W      _ZN13List_IteratorI11MemoryChunkEmiERS0_ ; List_Iterator<MemoryChunk>::operator -(MemoryChunk&)
;;;166    {
;;;167    	return *this - *item;
;;;168    }
;;;169    /*
                          ENDP


                          AREA ||area_number.35||, COMGROUP=_ZN13List_IteratorI11MemoryChunkEmiEPS0_, LINKORDER=||t._ZN13List_IteratorI11MemoryChunkEmiEPS0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.35||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorI11MemoryChunkEmiEPS0_||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorI11MemoryChunkE3GetEj||, COMGROUP=_ZN13List_IteratorI11MemoryChunkE3GetEj, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorI11MemoryChunkE3GetEj PROC ; List_Iterator<MemoryChunk>::Get(unsigned)
;;;182    template <class T>
;;;183    T *List_Iterator<T>::Get (uint32_t index)
000000  6882              LDR      r2,[r0,#8]
;;;184    {
;;;185    	if (this->Elements < index) return (T *)0;
000002  428a              CMP      r2,r1
000004  d201              BCS      |L41.10|
000006  2000              MOVS     r0,#0
                  |L41.8|
;;;186    	
;;;187    	T *item = this->First;
;;;188    	while (index--)
;;;189    		  item = item->rlink;
;;;190    	return item;
;;;191    }
000008  4770              BX       lr
                  |L41.10|
00000a  6800              LDR      r0,[r0,#0]            ;187
00000c  1e49              SUBS     r1,r1,#1              ;188
00000e  d3fb              BCC      |L41.8|
                  |L41.16|
000010  6800              LDR      r0,[r0,#0]            ;189
000012  1e49              SUBS     r1,r1,#1              ;188
000014  d2fc              BCS      |L41.16|
000016  4770              BX       lr
;;;192    template <class T>
                          ENDP


                          AREA ||area_number.42||, COMGROUP=_ZN13List_IteratorI11MemoryChunkE3GetEj, LINKORDER=||t._ZN13List_IteratorI11MemoryChunkE3GetEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.42||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorI11MemoryChunkE3GetEj||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorI11MemoryChunkE7GetLastEv||, COMGROUP=_ZN13List_IteratorI11MemoryChunkE7GetLastEv, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorI11MemoryChunkE7GetLastEv PROC ; List_Iterator<MemoryChunk>::GetLast()
;;;192    template <class T>
;;;193    T *List_Iterator<T>::GetLast ()
000000  6840              LDR      r0,[r0,#4]
;;;194    {
;;;195    	return this->Last;
;;;196    }
000002  4770              BX       lr
;;;197    
                          ENDP


                          AREA ||area_number.49||, COMGROUP=_ZN13List_IteratorI11MemoryChunkE7GetLastEv, LINKORDER=||t._ZN13List_IteratorI11MemoryChunkE7GetLastEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.49||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorI11MemoryChunkE7GetLastEv||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorI11MemoryChunkE8GetFirstEv||, COMGROUP=_ZN13List_IteratorI11MemoryChunkE8GetFirstEv, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorI11MemoryChunkE8GetFirstEv PROC ; List_Iterator<MemoryChunk>::GetFirst()
;;;198    template <class T>
;;;199    T *List_Iterator<T>::GetFirst ()
000000  6800              LDR      r0,[r0,#0]
;;;200    {
;;;201    	return this->First;
;;;202    }
000002  4770              BX       lr
;;;203    
                          ENDP


                          AREA ||area_number.56||, COMGROUP=_ZN13List_IteratorI11MemoryChunkE8GetFirstEv, LINKORDER=||t._ZN13List_IteratorI11MemoryChunkE8GetFirstEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.56||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorI11MemoryChunkE8GetFirstEv||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorI11MemoryChunkE7ContainEv||, COMGROUP=_ZN13List_IteratorI11MemoryChunkE7ContainEv, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorI11MemoryChunkE7ContainEv PROC ; List_Iterator<MemoryChunk>::Contain()
;;;247    template <class T>
;;;248    uint32_t List_Iterator<T>::Contain ()
000000  6880              LDR      r0,[r0,#8]
;;;249    {
;;;250    	return this->Elements;
;;;251    }
000002  4770              BX       lr
;;;252    
                          ENDP


                          AREA ||area_number.63||, COMGROUP=_ZN13List_IteratorI11MemoryChunkE7ContainEv, LINKORDER=||t._ZN13List_IteratorI11MemoryChunkE7ContainEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.63||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorI11MemoryChunkE7ContainEv||
                          DCD      0x00000001

                          AREA ||t._ZN13List_IteratorI11MemoryChunkE6RemoveEPS0_||, COMGROUP=_ZN13List_IteratorI11MemoryChunkE6RemoveEPS0_, CODE, READONLY, ALIGN=1

                  _ZN13List_IteratorI11MemoryChunkE6RemoveEPS0_ PROC ; List_Iterator<MemoryChunk>::Remove(MemoryChunk*)
;;;224    template <class T>
;;;225    int32_t List_Iterator<T>::Remove (T *item)
000000  b570              PUSH     {r4-r6,lr}
;;;226    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;227    	if (!this->Contain()) return -1;
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       _ZN13List_IteratorI11MemoryChunkE7ContainEv ; List_Iterator<MemoryChunk>::Contain()
00000c  b128              CBZ      r0,|L69.26|
;;;228    	*(this) - item;
00000e  4629              MOV      r1,r5
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       _ZN13List_IteratorI11MemoryChunkEmiEPS0_ ; List_Iterator<MemoryChunk>::operator -(MemoryChunk*)
;;;229    	
;;;230    	return 0;
000016  2000              MOVS     r0,#0
;;;231    }
000018  bd70              POP      {r4-r6,pc}
                  |L69.26|
00001a  f04f30ff          MOV      r0,#0xffffffff        ;227
00001e  bd70              POP      {r4-r6,pc}
;;;232    
                          ENDP


                          AREA ||area_number.70||, COMGROUP=_ZN13List_IteratorI11MemoryChunkE6RemoveEPS0_, LINKORDER=||t._ZN13List_IteratorI11MemoryChunkE6RemoveEPS0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.70||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN13List_IteratorI11MemoryChunkE6RemoveEPS0_||
                          DCD      0x00000001
