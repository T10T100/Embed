; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\objects\stm32f4xx_hal_gpio.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f4xx_hal_gpio.d --cpu=Cortex-M4.fp --apcs=interwork -O1 -Otime --diag_suppress=9931 -I.\device\GUI\inc -I.\device\hardware\inc -I.\device\init\inc -I.\misc\inc -I.\user\inc -I..\tester_1.03 -I.\memory\inc -I.\drivers\inc -IE:\KeilProj\tester_1.03\tester_1.03\tester_1.03\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F417xx -DSTM32F417xx -DColorDepthBpp16 -Dtftili9486 -DSOFTWARE_GL -DGUI_ALLIGN_LAYSIZE_TO_POW2 --omf_browse=.\objects\stm32f4xx_hal_gpio.crf drivers\src\stm32f4xx_hal_gpio.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  HAL_GPIO_Init PROC
;;;188      */
;;;189    void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;190    {
;;;191      uint32_t position;
;;;192      uint32_t ioposition = 0x00;
;;;193      uint32_t iocurrent = 0x00;
;;;194      uint32_t temp = 0x00;
;;;195    
;;;196      /* Check the parameters */
;;;197      assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
;;;198      assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
;;;199      assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
;;;200      assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
;;;201    
;;;202      /* Configure the port pins */
;;;203      for(position = 0; position < GPIO_NUMBER; position++)
000004  2200              MOVS     r2,#0
;;;204      {
;;;205        /* Get the IO position */
;;;206        ioposition = ((uint32_t)0x01) << position;
;;;207        /* Get the current IO position */
;;;208        iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
;;;209    
;;;210        if(iocurrent == ioposition)
;;;211        {
;;;212          /*--------------------- GPIO Mode Configuration ------------------------*/
;;;213          /* In case of Alternate function mode selection */
;;;214          if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
;;;215          {
;;;216            /* Check the Alternate function parameter */
;;;217            assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
;;;218            /* Configure Alternate function mapped with the current IO */
;;;219            temp = GPIOx->AFR[position >> 3];
;;;220            temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
;;;221            temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
;;;222            GPIOx->AFR[position >> 3] = temp;
;;;223          }
;;;224    
;;;225          /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
;;;226          temp = GPIOx->MODER;
;;;227          temp &= ~(GPIO_MODER_MODER0 << (position * 2));
;;;228          temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
;;;229          GPIOx->MODER = temp;
;;;230    
;;;231          /* In case of Output or Alternate function mode selection */
;;;232          if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
;;;233             (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
;;;234          {
;;;235            /* Check the Speed parameter */
;;;236            assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
;;;237            /* Configure the IO Speed */
;;;238            temp = GPIOx->OSPEEDR; 
;;;239            temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
;;;240            temp |= (GPIO_Init->Speed << (position * 2));
;;;241            GPIOx->OSPEEDR = temp;
;;;242    
;;;243            /* Configure the IO Output Type */
;;;244            temp = GPIOx->OTYPER;
;;;245            temp &= ~(GPIO_OTYPER_OT_0 << position) ;
;;;246            temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
;;;247            GPIOx->OTYPER = temp;
;;;248          }
;;;249    
;;;250          /* Activate the Pull-up or Pull down resistor for the current IO */
;;;251          temp = GPIOx->PUPDR;
;;;252          temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
;;;253          temp |= ((GPIO_Init->Pull) << (position * 2));
;;;254          GPIOx->PUPDR = temp;
;;;255    
;;;256          /*--------------------- EXTI Mode Configuration ------------------------*/
;;;257          /* Configure the External Interrupt or event for the current IO */
;;;258          if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
;;;259          {
;;;260            /* Enable SYSCFG Clock */
;;;261            __HAL_RCC_SYSCFG_CLK_ENABLE();
;;;262    
;;;263            temp = SYSCFG->EXTICR[position >> 2];
;;;264            temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
;;;265            temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
;;;266            SYSCFG->EXTICR[position >> 2] = temp;
;;;267    
;;;268            /* Clear EXTI line configuration */
;;;269            temp = EXTI->IMR;
;;;270            temp &= ~((uint32_t)iocurrent);
;;;271            if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
;;;272            {
;;;273              temp |= iocurrent;
;;;274            }
;;;275            EXTI->IMR = temp;
;;;276    
;;;277            temp = EXTI->EMR;
000006  f8df93a0          LDR      r9,|L1.936|
00000a  f8df8398          LDR      r8,|L1.932|
00000e  f04f0e01          MOV      lr,#1                 ;206
000012  270f              MOVS     r7,#0xf               ;220
;;;278            temp &= ~((uint32_t)iocurrent);
;;;279            if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
;;;280            {
;;;281              temp |= iocurrent;
;;;282            }
;;;283            EXTI->EMR = temp;
;;;284    
;;;285            /* Clear Rising Falling edge configuration */
;;;286            temp = EXTI->RTSR;
000014  f1090a04          ADD      r10,r9,#4
                  |L1.24|
000018  fa0ef502          LSL      r5,lr,r2              ;206
00001c  680b              LDR      r3,[r1,#0]            ;208
00001e  402b              ANDS     r3,r3,r5              ;208
000020  42ab              CMP      r3,r5                 ;210
000022  d17c              BNE      |L1.286|
000024  f8d1c004          LDR      r12,[r1,#4]           ;214
000028  f1bc0f02          CMP      r12,#2                ;214
00002c  d002              BEQ      |L1.52|
00002e  f1bc0f12          CMP      r12,#0x12             ;214
000032  d114              BNE      |L1.94|
                  |L1.52|
000034  ea4f0cd2          LSR      r12,r2,#3             ;219
000038  eb00048c          ADD      r4,r0,r12,LSL #2      ;219
00003c  6a26              LDR      r6,[r4,#0x20]         ;219
00003e  ea4f7c42          LSL      r12,r2,#29            ;220
000042  ea4f6cdc          LSR      r12,r12,#27           ;220
000046  fa07fb0c          LSL      r11,r7,r12            ;220
00004a  ea26060b          BIC      r6,r6,r11             ;220
00004e  f8d1b010          LDR      r11,[r1,#0x10]        ;221
000052  fa0bfc0c          LSL      r12,r11,r12           ;221
000056  ea4c0c06          ORR      r12,r12,r6            ;221
00005a  f8c4c020          STR      r12,[r4,#0x20]        ;222
                  |L1.94|
00005e  6806              LDR      r6,[r0,#0]            ;226
000060  ea4f0c42          LSL      r12,r2,#1             ;227
000064  2403              MOVS     r4,#3                 ;227
000066  fa04f40c          LSL      r4,r4,r12             ;227
00006a  43a6              BICS     r6,r6,r4              ;227
00006c  f891b004          LDRB     r11,[r1,#4]           ;228
000070  f00b0b03          AND      r11,r11,#3            ;228
000074  fa0bfb0c          LSL      r11,r11,r12           ;228
000078  ea4b0606          ORR      r6,r11,r6             ;228
00007c  6006              STR      r6,[r0,#0]            ;229
00007e  684e              LDR      r6,[r1,#4]            ;232
000080  2e01              CMP      r6,#1                 ;232
000082  d005              BEQ      |L1.144|
000084  2e02              CMP      r6,#2                 ;232
000086  d003              BEQ      |L1.144|
000088  2e11              CMP      r6,#0x11              ;233
00008a  d001              BEQ      |L1.144|
00008c  2e12              CMP      r6,#0x12              ;233
00008e  d111              BNE      |L1.180|
                  |L1.144|
000090  6886              LDR      r6,[r0,#8]            ;238
000092  43a6              BICS     r6,r6,r4              ;239
000094  f8d1b00c          LDR      r11,[r1,#0xc]         ;240
000098  fa0bfb0c          LSL      r11,r11,r12           ;240
00009c  ea4b0606          ORR      r6,r11,r6             ;240
0000a0  6086              STR      r6,[r0,#8]            ;241
0000a2  6846              LDR      r6,[r0,#4]            ;244
0000a4  ea260505          BIC      r5,r6,r5              ;245
0000a8  790e              LDRB     r6,[r1,#4]            ;246
0000aa  f3c61600          UBFX     r6,r6,#4,#1           ;246
0000ae  4096              LSLS     r6,r6,r2              ;246
0000b0  4335              ORRS     r5,r5,r6              ;246
0000b2  6045              STR      r5,[r0,#4]            ;247
                  |L1.180|
0000b4  68c5              LDR      r5,[r0,#0xc]          ;251
0000b6  ea250404          BIC      r4,r5,r4              ;252
0000ba  688d              LDR      r5,[r1,#8]            ;253
0000bc  fa05fc0c          LSL      r12,r5,r12            ;253
0000c0  ea4c0c04          ORR      r12,r12,r4            ;253
0000c4  f8c0c00c          STR      r12,[r0,#0xc]         ;254
0000c8  f8d1c004          LDR      r12,[r1,#4]           ;258
0000cc  f01c5f80          TST      r12,#0x10000000       ;258
0000d0  d072              BEQ      |L1.440|
0000d2  f8d8c000          LDR      r12,[r8,#0]           ;261
0000d6  f44c4c80          ORR      r12,r12,#0x4000       ;261
0000da  f8c8c000          STR      r12,[r8,#0]           ;261
0000de  f8d8c000          LDR      r12,[r8,#0]           ;261
0000e2  f40c4c80          AND      r12,r12,#0x4000       ;261
0000e6  f8cdc000          STR      r12,[sp,#0]           ;261
0000ea  f0220c03          BIC      r12,r2,#3             ;263
0000ee  f10c4580          ADD      r5,r12,#0x40000000    ;263
0000f2  f5053598          ADD      r5,r5,#0x13000        ;263
0000f6  f8d5c808          LDR      r12,[r5,#0x808]       ;263
0000fa  0794              LSLS     r4,r2,#30             ;264
0000fc  0f24              LSRS     r4,r4,#28             ;264
0000fe  fa07f604          LSL      r6,r7,r4              ;264
000102  ea2c0606          BIC      r6,r12,r6             ;264
000106  f1a04c80          SUB      r12,r0,#0x40000000    ;265
00010a  f5bc3c00          SUBS     r12,r12,#0x20000      ;265
00010e  d059              BEQ      |L1.452|
000110  f5bc6c80          SUBS     r12,r12,#0x400        ;265
000114  d059              BEQ      |L1.458|
000116  f5bc6c80          SUBS     r12,r12,#0x400        ;265
00011a  d059              BEQ      |L1.464|
00011c  e000              B        |L1.288|
                  |L1.286|
00011e  e04b              B        |L1.440|
                  |L1.288|
000120  f5bc6c80          SUBS     r12,r12,#0x400        ;265
000124  d057              BEQ      |L1.470|
000126  f5bc6c80          SUBS     r12,r12,#0x400        ;265
00012a  d057              BEQ      |L1.476|
00012c  f5bc6c80          SUBS     r12,r12,#0x400        ;265
000130  d057              BEQ      |L1.482|
000132  f5bc6c80          SUBS     r12,r12,#0x400        ;265
000136  d057              BEQ      |L1.488|
000138  f5bc6c80          SUBS     r12,r12,#0x400        ;265
00013c  d057              BEQ      |L1.494|
00013e  f5bc6c80          SUBS     r12,r12,#0x400        ;265
000142  d057              BEQ      |L1.500|
000144  f04f0c09          MOV      r12,#9                ;265
                  |L1.328|
000148  fa0cfc04          LSL      r12,r12,r4            ;265
00014c  ea4c0c06          ORR      r12,r12,r6            ;265
000150  f8c5c808          STR      r12,[r5,#0x808]       ;266
000154  4c95              LDR      r4,|L1.940|
000156  f8d4c000          LDR      r12,[r4,#0]           ;269
00015a  ea2c0c03          BIC      r12,r12,r3            ;270
00015e  684d              LDR      r5,[r1,#4]            ;271
000160  f4153f80          TST      r5,#0x10000           ;271
000164  d001              BEQ      |L1.362|
000166  ea4c0c03          ORR      r12,r12,r3            ;273
                  |L1.362|
00016a  f8c4c000          STR      r12,[r4,#0]           ;275
00016e  f8d9c000          LDR      r12,[r9,#0]           ;277
000172  ea2c0c03          BIC      r12,r12,r3            ;278
000176  684c              LDR      r4,[r1,#4]            ;279
000178  f4143f00          TST      r4,#0x20000           ;279
00017c  d001              BEQ      |L1.386|
00017e  ea4c0c03          ORR      r12,r12,r3            ;281
                  |L1.386|
000182  f8c9c000          STR      r12,[r9,#0]           ;283
000186  f8dac000          LDR      r12,[r10,#0]
;;;287            temp &= ~((uint32_t)iocurrent);
00018a  ea2c0c03          BIC      r12,r12,r3
;;;288            if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
00018e  684c              LDR      r4,[r1,#4]
000190  f4141f80          TST      r4,#0x100000
000194  d001              BEQ      |L1.410|
;;;289            {
;;;290              temp |= iocurrent;
000196  ea4c0c03          ORR      r12,r12,r3
                  |L1.410|
;;;291            }
;;;292            EXTI->RTSR = temp;
00019a  f8cac000          STR      r12,[r10,#0]
;;;293    
;;;294            temp = EXTI->FTSR;
00019e  4c84              LDR      r4,|L1.944|
0001a0  f8d4c000          LDR      r12,[r4,#0]
;;;295            temp &= ~((uint32_t)iocurrent);
0001a4  ea2c0c03          BIC      r12,r12,r3
;;;296            if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
0001a8  684d              LDR      r5,[r1,#4]
0001aa  f4151f00          TST      r5,#0x200000
0001ae  d001              BEQ      |L1.436|
;;;297            {
;;;298              temp |= iocurrent;
0001b0  ea4c0c03          ORR      r12,r12,r3
                  |L1.436|
;;;299            }
;;;300            EXTI->FTSR = temp;
0001b4  f8c4c000          STR      r12,[r4,#0]
                  |L1.440|
0001b8  1c52              ADDS     r2,r2,#1              ;203
0001ba  2a10              CMP      r2,#0x10              ;203
0001bc  f4ffaf2c          BCC      |L1.24|
;;;301          }
;;;302        }
;;;303      }
;;;304    }
0001c0  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.452|
0001c4  f04f0c00          MOV      r12,#0                ;265
0001c8  e7be              B        |L1.328|
                  |L1.458|
0001ca  f04f0c01          MOV      r12,#1                ;265
0001ce  e7bb              B        |L1.328|
                  |L1.464|
0001d0  f04f0c02          MOV      r12,#2                ;265
0001d4  e7b8              B        |L1.328|
                  |L1.470|
0001d6  f04f0c03          MOV      r12,#3                ;265
0001da  e7b5              B        |L1.328|
                  |L1.476|
0001dc  f04f0c04          MOV      r12,#4                ;265
0001e0  e7b2              B        |L1.328|
                  |L1.482|
0001e2  f04f0c05          MOV      r12,#5                ;265
0001e6  e7af              B        |L1.328|
                  |L1.488|
0001e8  f04f0c06          MOV      r12,#6                ;265
0001ec  e7ac              B        |L1.328|
                  |L1.494|
0001ee  f04f0c07          MOV      r12,#7                ;265
0001f2  e7a9              B        |L1.328|
                  |L1.500|
0001f4  f04f0c08          MOV      r12,#8                ;265
0001f8  e7a6              B        |L1.328|
;;;305    
                          ENDP

                  HAL_GPIO_DeInit PROC
;;;313      */
;;;314    void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
0001fa  e92d4ff0          PUSH     {r4-r11,lr}
;;;315    {
;;;316      uint32_t position;
;;;317      uint32_t ioposition = 0x00;
;;;318      uint32_t iocurrent = 0x00;
;;;319      uint32_t tmp = 0x00;
;;;320    
;;;321      /* Check the parameters */
;;;322      assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
;;;323      
;;;324      /* Configure the port pins */
;;;325      for(position = 0; position < GPIO_NUMBER; position++)
0001fe  2200              MOVS     r2,#0
;;;326      {
;;;327        /* Get the IO position */
;;;328        ioposition = ((uint32_t)0x01) << position;
;;;329        /* Get the current IO position */
;;;330        iocurrent = (GPIO_Pin) & ioposition;
;;;331    
;;;332        if(iocurrent == ioposition)
;;;333        {
;;;334          /*------------------------- GPIO Mode Configuration --------------------*/
;;;335          /* Configure IO Direction in Input Floating Mode */
;;;336          GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
;;;337    
;;;338          /* Configure the default Alternate Function in current IO */
;;;339          GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
;;;340    
;;;341          /* Configure the default value for IO Speed */
;;;342          GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
;;;343    
;;;344          /* Configure the default value IO Output Type */
;;;345          GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
;;;346    
;;;347          /* Deactivate the Pull-up and Pull-down resistor for the current IO */
;;;348          GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
;;;349    
;;;350          /*------------------------- EXTI Mode Configuration --------------------*/
;;;351          tmp = SYSCFG->EXTICR[position >> 2];
;;;352          tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
;;;353          if(tmp == ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03))))
;;;354          {
;;;355            /* Configure the External Interrupt or event for the current IO */
;;;356            tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
;;;357            SYSCFG->EXTICR[position >> 2] &= ~tmp;
;;;358    
;;;359            /* Clear EXTI line configuration */
;;;360            EXTI->IMR &= ~((uint32_t)iocurrent);
000200  f8df91a8          LDR      r9,|L1.940|
000204  f04f0e03          MOV      lr,#3                 ;336
;;;361            EXTI->EMR &= ~((uint32_t)iocurrent);
000208  f1090a04          ADD      r10,r9,#4
00020c  f04f080f          MOV      r8,#0xf               ;339
;;;362            
;;;363            /* Clear Rising Falling edge configuration */
;;;364            EXTI->RTSR &= ~((uint32_t)iocurrent);
000210  f10a0b04          ADD      r11,r10,#4
                  |L1.532|
000214  2301              MOVS     r3,#1                 ;328
000216  fa03f402          LSL      r4,r3,r2              ;328
00021a  ea010304          AND      r3,r1,r4              ;330
00021e  42a3              CMP      r3,r4                 ;332
000220  d16f              BNE      |L1.770|
000222  6805              LDR      r5,[r0,#0]            ;336
000224  ea4f0c42          LSL      r12,r2,#1             ;336
000228  fa0efc0c          LSL      r12,lr,r12            ;336
00022c  ea25050c          BIC      r5,r5,r12             ;336
000230  6005              STR      r5,[r0,#0]            ;336
000232  08d5              LSRS     r5,r2,#3              ;339
000234  eb000585          ADD      r5,r0,r5,LSL #2       ;339
000238  6a2e              LDR      r6,[r5,#0x20]         ;339
00023a  0757              LSLS     r7,r2,#29             ;339
00023c  0eff              LSRS     r7,r7,#27             ;339
00023e  fa08f707          LSL      r7,r8,r7              ;339
000242  43be              BICS     r6,r6,r7              ;339
000244  622e              STR      r6,[r5,#0x20]         ;339
000246  6885              LDR      r5,[r0,#8]            ;342
000248  ea25050c          BIC      r5,r5,r12             ;342
00024c  6085              STR      r5,[r0,#8]            ;342
00024e  6845              LDR      r5,[r0,#4]            ;345
000250  ea250404          BIC      r4,r5,r4              ;345
000254  6044              STR      r4,[r0,#4]            ;345
000256  68c4              LDR      r4,[r0,#0xc]          ;348
000258  ea240c0c          BIC      r12,r4,r12            ;348
00025c  f8c0c00c          STR      r12,[r0,#0xc]         ;348
000260  f0220c03          BIC      r12,r2,#3             ;351
000264  f10c4480          ADD      r4,r12,#0x40000000    ;351
000268  f5043498          ADD      r4,r4,#0x13000        ;351
00026c  f8d4c808          LDR      r12,[r4,#0x808]       ;351
000270  0795              LSLS     r5,r2,#30             ;352
000272  0f2e              LSRS     r6,r5,#28             ;352
000274  fa08f506          LSL      r5,r8,r6              ;352
000278  ea05070c          AND      r7,r5,r12             ;352
00027c  f1a04c80          SUB      r12,r0,#0x40000000    ;353
000280  f5bc3c00          SUBS     r12,r12,#0x20000      ;353
000284  d042              BEQ      |L1.780|
000286  f5bc6c80          SUBS     r12,r12,#0x400        ;353
00028a  d042              BEQ      |L1.786|
00028c  f5bc6c80          SUBS     r12,r12,#0x400        ;353
000290  d042              BEQ      |L1.792|
000292  f5bc6c80          SUBS     r12,r12,#0x400        ;353
000296  d042              BEQ      |L1.798|
000298  f5bc6c80          SUBS     r12,r12,#0x400        ;353
00029c  d042              BEQ      |L1.804|
00029e  f5bc6c80          SUBS     r12,r12,#0x400        ;353
0002a2  d042              BEQ      |L1.810|
0002a4  f5bc6c80          SUBS     r12,r12,#0x400        ;353
0002a8  d042              BEQ      |L1.816|
0002aa  f5bc6c80          SUBS     r12,r12,#0x400        ;353
0002ae  d042              BEQ      |L1.822|
0002b0  f5bc6c80          SUBS     r12,r12,#0x400        ;353
0002b4  d042              BEQ      |L1.828|
0002b6  f04f0c09          MOV      r12,#9                ;353
                  |L1.698|
0002ba  fa0cfc06          LSL      r12,r12,r6            ;353
0002be  45bc              CMP      r12,r7                ;353
0002c0  d11f              BNE      |L1.770|
0002c2  f8d4c808          LDR      r12,[r4,#0x808]       ;357
0002c6  ea2c0c05          BIC      r12,r12,r5            ;357
0002ca  f8c4c808          STR      r12,[r4,#0x808]       ;357
0002ce  f8d9c000          LDR      r12,[r9,#0]           ;360
0002d2  ea2c0c03          BIC      r12,r12,r3            ;360
0002d6  f8c9c000          STR      r12,[r9,#0]           ;360
0002da  f8dac000          LDR      r12,[r10,#0]          ;361
0002de  ea2c0c03          BIC      r12,r12,r3            ;361
0002e2  f8cac000          STR      r12,[r10,#0]          ;361
0002e6  f8dbc000          LDR      r12,[r11,#0]
0002ea  ea2c0c03          BIC      r12,r12,r3
0002ee  f8cbc000          STR      r12,[r11,#0]
;;;365            EXTI->FTSR &= ~((uint32_t)iocurrent);
0002f2  f8dfc0bc          LDR      r12,|L1.944|
0002f6  f8dc4000          LDR      r4,[r12,#0]
0002fa  ea240303          BIC      r3,r4,r3
0002fe  f8cc3000          STR      r3,[r12,#0]
                  |L1.770|
000302  1c52              ADDS     r2,r2,#1              ;325
000304  2a10              CMP      r2,#0x10              ;325
000306  d385              BCC      |L1.532|
;;;366          }
;;;367        }
;;;368      }
;;;369    }
000308  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.780|
00030c  f04f0c00          MOV      r12,#0                ;353
000310  e7d3              B        |L1.698|
                  |L1.786|
000312  f04f0c01          MOV      r12,#1                ;353
000316  e7d0              B        |L1.698|
                  |L1.792|
000318  f04f0c02          MOV      r12,#2                ;353
00031c  e7cd              B        |L1.698|
                  |L1.798|
00031e  f04f0c03          MOV      r12,#3                ;353
000322  e7ca              B        |L1.698|
                  |L1.804|
000324  f04f0c04          MOV      r12,#4                ;353
000328  e7c7              B        |L1.698|
                  |L1.810|
00032a  f04f0c05          MOV      r12,#5                ;353
00032e  e7c4              B        |L1.698|
                  |L1.816|
000330  f04f0c06          MOV      r12,#6                ;353
000334  e7c1              B        |L1.698|
                  |L1.822|
000336  f04f0c07          MOV      r12,#7                ;353
00033a  e7be              B        |L1.698|
                  |L1.828|
00033c  f04f0c08          MOV      r12,#8                ;353
000340  e7bb              B        |L1.698|
;;;370    
                          ENDP

                  HAL_GPIO_ReadPin PROC
;;;394      */
;;;395    GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000342  6900              LDR      r0,[r0,#0x10]
;;;396    {
;;;397      GPIO_PinState bitstatus;
;;;398    
;;;399      /* Check the parameters */
;;;400      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;401    
;;;402      if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
000344  4208              TST      r0,r1
000346  d001              BEQ      |L1.844|
;;;403      {
;;;404        bitstatus = GPIO_PIN_SET;
000348  2001              MOVS     r0,#1
;;;405      }
;;;406      else
;;;407      {
;;;408        bitstatus = GPIO_PIN_RESET;
;;;409      }
;;;410      return bitstatus;
;;;411    }
00034a  4770              BX       lr
                  |L1.844|
00034c  2000              MOVS     r0,#0                 ;408
00034e  4770              BX       lr
;;;412    
                          ENDP

                  HAL_GPIO_WritePin PROC
;;;429      */
;;;430    void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
000350  2a00              CMP      r2,#0
;;;431    {
000352  d001              BEQ      |L1.856|
;;;432      /* Check the parameters */
;;;433      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;434      assert_param(IS_GPIO_PIN_ACTION(PinState));
;;;435    
;;;436      if(PinState != GPIO_PIN_RESET)
;;;437      {
;;;438        GPIOx->BSRR = GPIO_Pin;
000354  6181              STR      r1,[r0,#0x18]
;;;439      }
;;;440      else
;;;441      {
;;;442        GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
;;;443      }
;;;444    }
000356  4770              BX       lr
                  |L1.856|
000358  0409              LSLS     r1,r1,#16             ;442
00035a  6181              STR      r1,[r0,#0x18]         ;442
00035c  4770              BX       lr
;;;445    
                          ENDP

                  HAL_GPIO_TogglePin PROC
;;;452      */
;;;453    void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
00035e  6942              LDR      r2,[r0,#0x14]
;;;454    {
;;;455      /* Check the parameters */
;;;456      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;457    
;;;458      GPIOx->ODR ^= GPIO_Pin;
000360  4051              EORS     r1,r1,r2
000362  6141              STR      r1,[r0,#0x14]
;;;459    }
000364  4770              BX       lr
;;;460    
                          ENDP

                  HAL_GPIO_LockPin PROC
;;;471      */
;;;472    HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000366  b081              SUB      sp,sp,#4
;;;473    {
;;;474      __IO uint32_t tmp = GPIO_LCKR_LCKK;
;;;475    
;;;476      /* Check the parameters */
;;;477      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;478    
;;;479      /* Apply lock key write sequence */
;;;480      tmp |= GPIO_Pin;
000368  f4413280          ORR      r2,r1,#0x10000
00036c  9200              STR      r2,[sp,#0]
;;;481      /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
;;;482      GPIOx->LCKR = tmp;
00036e  9a00              LDR      r2,[sp,#0]
000370  61c2              STR      r2,[r0,#0x1c]
;;;483      /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
;;;484      GPIOx->LCKR = GPIO_Pin;
000372  61c1              STR      r1,[r0,#0x1c]
;;;485      /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
;;;486      GPIOx->LCKR = tmp;
000374  9900              LDR      r1,[sp,#0]
000376  61c1              STR      r1,[r0,#0x1c]
;;;487      /* Read LCKK bit*/
;;;488      tmp = GPIOx->LCKR;
000378  69c1              LDR      r1,[r0,#0x1c]
00037a  9100              STR      r1,[sp,#0]
;;;489    
;;;490     if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
00037c  69c0              LDR      r0,[r0,#0x1c]
00037e  f4103f80          TST      r0,#0x10000
000382  d002              BEQ      |L1.906|
;;;491      {
;;;492        return HAL_OK;
000384  2000              MOVS     r0,#0
;;;493      }
;;;494      else
;;;495      {
;;;496        return HAL_ERROR;
;;;497      }
;;;498    }
000386  b001              ADD      sp,sp,#4
000388  4770              BX       lr
                  |L1.906|
00038a  2001              MOVS     r0,#1                 ;496
00038c  b001              ADD      sp,sp,#4
00038e  4770              BX       lr
;;;499    
                          ENDP

                  HAL_GPIO_EXTI_Callback PROC
;;;519      */
;;;520    __weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
000390  4770              BX       lr
;;;521    {
;;;522      /* NOTE: This function Should not be modified, when the callback is needed,
;;;523               the HAL_GPIO_EXTI_Callback could be implemented in the user file
;;;524       */
;;;525    }
;;;526    
                          ENDP

                  HAL_GPIO_EXTI_IRQHandler PROC
;;;504      */
;;;505    void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
000392  b510              PUSH     {r4,lr}
;;;506    {
;;;507      /* EXTI line interrupt detected */
;;;508      if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
000394  4907              LDR      r1,|L1.948|
000396  680a              LDR      r2,[r1,#0]
000398  4202              TST      r2,r0
00039a  d002              BEQ      |L1.930|
;;;509      {
;;;510        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
00039c  6008              STR      r0,[r1,#0]
;;;511        HAL_GPIO_EXTI_Callback(GPIO_Pin);
00039e  f7fffffe          BL       HAL_GPIO_EXTI_Callback
                  |L1.930|
;;;512      }
;;;513    }
0003a2  bd10              POP      {r4,pc}
;;;514    
                          ENDP

                  |L1.932|
                          DCD      0x40023844
                  |L1.936|
                          DCD      0x40013c04
                  |L1.940|
                          DCD      0x40013c00
                  |L1.944|
                          DCD      0x40013c0c
                  |L1.948|
                          DCD      0x40013c14

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "drivers\\src\\stm32f4xx_hal_gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_hal_gpio_c_ea787061___Z7__REV16j|
#line 138 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.3.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___20_stm32f4xx_hal_gpio_c_ea787061___Z7__REV16j| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_hal_gpio_c_ea787061___Z7__REVSHi|
#line 153
|__asm___20_stm32f4xx_hal_gpio_c_ea787061___Z7__REVSHi| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_hal_gpio_c_ea787061___Z5__RRXj|
#line 328
|__asm___20_stm32f4xx_hal_gpio_c_ea787061___Z5__RRXj| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
