; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp11 --list --debug -c --asm --interleave -o.\objects\stm32f4xx_hal_sram.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f4xx_hal_sram.d --cpu=Cortex-M4.fp --apcs=interwork -O1 -Otime --diag_suppress=9931 -I.\device\GUI\inc -I.\device\hardware\inc -I.\device\init\inc -I.\misc\inc -I.\user\inc -I..\tester_1.03 -I.\memory\inc -I.\drivers\inc -I.\res -I..\Embed -IE:\KeilProj\Embed\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F417xx -DSTM32F417xx -DColorDepthBpp16 -Dtftili9486 -DSOFTWARE_GL -DGUI_ALLIGN_LAYSIZE_TO_POW2 --omf_browse=.\objects\stm32f4xx_hal_sram.crf drivers\src\stm32f4xx_hal_sram.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  HAL_SRAM_MspInit PROC
;;;201      */
;;;202    __weak void HAL_SRAM_MspInit(SRAM_HandleTypeDef *hsram)
000000  4770              BX       lr
;;;203    {
;;;204      /* NOTE : This function Should not be modified, when the callback is needed,
;;;205                the HAL_SRAM_MspInit could be implemented in the user file
;;;206       */ 
;;;207    }
;;;208    
                          ENDP

                  HAL_SRAM_Init PROC
;;;142      */
;;;143    HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
000002  b570              PUSH     {r4-r6,lr}
;;;144    { 
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;145      /* Check the SRAM handle parameter */
;;;146      if(hsram == NULL)
00000a  2c00              CMP      r4,#0
00000c  d003              BEQ      |L1.22|
;;;147      {
;;;148         return HAL_ERROR;
;;;149      }
;;;150      
;;;151      if(hsram->State == HAL_SRAM_STATE_RESET)
00000e  f894003d          LDRB     r0,[r4,#0x3d]
000012  b110              CBZ      r0,|L1.26|
000014  e007              B        |L1.38|
                  |L1.22|
000016  2001              MOVS     r0,#1                 ;148
;;;152      {  
;;;153        /* Allocate lock resource and initialize it */
;;;154        hsram->Lock = HAL_UNLOCKED;
;;;155        /* Initialize the low level hardware (MSP) */
;;;156        HAL_SRAM_MspInit(hsram);
;;;157      }
;;;158      
;;;159      /* Initialize SRAM control Interface */
;;;160      FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
;;;161    
;;;162      /* Initialize SRAM timing Interface */
;;;163      FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
;;;164    
;;;165      /* Initialize SRAM extended mode timing Interface */
;;;166      FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
;;;167      
;;;168      /* Enable the NORSRAM device */
;;;169      __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
;;;170      
;;;171      return HAL_OK;
;;;172    }
000018  bd70              POP      {r4-r6,pc}
                  |L1.26|
00001a  2000              MOVS     r0,#0                 ;154
00001c  f884003c          STRB     r0,[r4,#0x3c]         ;154
000020  4620              MOV      r0,r4                 ;156
000022  f7fffffe          BL       HAL_SRAM_MspInit
                  |L1.38|
000026  f1040108          ADD      r1,r4,#8              ;160
00002a  6820              LDR      r0,[r4,#0]            ;160
00002c  f7fffffe          BL       FSMC_NORSRAM_Init
000030  4631              MOV      r1,r6                 ;163
000032  68a2              LDR      r2,[r4,#8]            ;163
000034  6820              LDR      r0,[r4,#0]            ;163
000036  f7fffffe          BL       FSMC_NORSRAM_Timing_Init
00003a  4629              MOV      r1,r5                 ;166
00003c  6b23              LDR      r3,[r4,#0x30]         ;166
00003e  68a2              LDR      r2,[r4,#8]            ;166
000040  6860              LDR      r0,[r4,#4]            ;166
000042  f7fffffe          BL       FSMC_NORSRAM_Extended_Timing_Init
000046  68a1              LDR      r1,[r4,#8]            ;169
000048  6820              LDR      r0,[r4,#0]            ;169
00004a  f8502021          LDR      r2,[r0,r1,LSL #2]     ;169
00004e  f0420201          ORR      r2,r2,#1              ;169
000052  f8402021          STR      r2,[r0,r1,LSL #2]     ;169
000056  2000              MOVS     r0,#0                 ;171
000058  bd70              POP      {r4-r6,pc}
;;;173    
                          ENDP

                  HAL_SRAM_MspDeInit PROC
;;;214      */
;;;215    __weak void HAL_SRAM_MspDeInit(SRAM_HandleTypeDef *hsram)
00005a  4770              BX       lr
;;;216    {
;;;217      /* NOTE : This function Should not be modified, when the callback is needed,
;;;218                the HAL_SRAM_MspDeInit could be implemented in the user file
;;;219       */ 
;;;220    }
;;;221    
                          ENDP

                  HAL_SRAM_DeInit PROC
;;;179      */
;;;180    HAL_StatusTypeDef  HAL_SRAM_DeInit(SRAM_HandleTypeDef *hsram)
00005c  b510              PUSH     {r4,lr}
;;;181    { 
00005e  4604              MOV      r4,r0
;;;182      /* De-Initialize the low level hardware (MSP) */
;;;183      HAL_SRAM_MspDeInit(hsram);
000060  4620              MOV      r0,r4
000062  f7fffffe          BL       HAL_SRAM_MspDeInit
;;;184       
;;;185      /* Configure the SRAM registers with their reset values */
;;;186      FMC_NORSRAM_DeInit(hsram->Instance, hsram->Extended, hsram->Init.NSBank);
000066  68a2              LDR      r2,[r4,#8]
000068  6861              LDR      r1,[r4,#4]
00006a  6820              LDR      r0,[r4,#0]
00006c  f7fffffe          BL       FSMC_NORSRAM_DeInit
;;;187    
;;;188      hsram->State = HAL_SRAM_STATE_RESET;
000070  2000              MOVS     r0,#0
000072  f884003d          STRB     r0,[r4,#0x3d]
;;;189      
;;;190      /* Release Lock */
;;;191      __HAL_UNLOCK(hsram);
000076  f884003c          STRB     r0,[r4,#0x3c]
;;;192    
;;;193      return HAL_OK;
;;;194    }
00007a  bd10              POP      {r4,pc}
;;;195    
                          ENDP

                  HAL_SRAM_DMA_XferCpltCallback PROC
;;;227      */
;;;228    __weak void HAL_SRAM_DMA_XferCpltCallback(DMA_HandleTypeDef *hdma)
00007c  4770              BX       lr
;;;229    {
;;;230      /* NOTE : This function Should not be modified, when the callback is needed,
;;;231                the HAL_SRAM_DMA_XferCpltCallback could be implemented in the user file
;;;232       */ 
;;;233    }
;;;234    
                          ENDP

                  HAL_SRAM_DMA_XferErrorCallback PROC
;;;240      */
;;;241    __weak void HAL_SRAM_DMA_XferErrorCallback(DMA_HandleTypeDef *hdma)
00007e  4770              BX       lr
;;;242    {
;;;243      /* NOTE : This function Should not be modified, when the callback is needed,
;;;244                the HAL_SRAM_DMA_XferErrorCallback could be implemented in the user file
;;;245       */ 
;;;246    }
;;;247    
                          ENDP

                  HAL_SRAM_Read_8b PROC
;;;274      */
;;;275    HAL_StatusTypeDef HAL_SRAM_Read_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pDstBuffer, uint32_t BufferSize)
000080  b410              PUSH     {r4}
;;;276    {
;;;277      __IO uint8_t * pSramAddress = (uint8_t *)pAddress;
;;;278      
;;;279      /* Process Locked */
;;;280      __HAL_LOCK(hsram);
000082  f890c03c          LDRB     r12,[r0,#0x3c]
000086  f1bc0f01          CMP      r12,#1
00008a  d016              BEQ      |L1.186|
00008c  f04f0c01          MOV      r12,#1
000090  f880c03c          STRB     r12,[r0,#0x3c]
;;;281      
;;;282      /* Update the SRAM controller state */
;;;283      hsram->State = HAL_SRAM_STATE_BUSY;  
000094  2402              MOVS     r4,#2
000096  f880403d          STRB     r4,[r0,#0x3d]
00009a  b133              CBZ      r3,|L1.170|
                  |L1.156|
;;;284      
;;;285      /* Read data from memory */
;;;286      for(; BufferSize != 0; BufferSize--)
;;;287      {
;;;288        *pDstBuffer = *(__IO uint8_t *)pSramAddress;
00009c  780c              LDRB     r4,[r1,#0]
00009e  7014              STRB     r4,[r2,#0]
;;;289        pDstBuffer++;
0000a0  1c52              ADDS     r2,r2,#1
;;;290        pSramAddress++;
0000a2  1c49              ADDS     r1,r1,#1
0000a4  1e5b              SUBS     r3,r3,#1              ;286
0000a6  2b00              CMP      r3,#0                 ;286
0000a8  d1f8              BNE      |L1.156|
                  |L1.170|
;;;291      }
;;;292      
;;;293      /* Update the SRAM controller state */
;;;294      hsram->State = HAL_SRAM_STATE_READY;    
0000aa  f880c03d          STRB     r12,[r0,#0x3d]
;;;295    
;;;296      /* Process unlocked */
;;;297      __HAL_UNLOCK(hsram); 
0000ae  2100              MOVS     r1,#0
0000b0  f880103c          STRB     r1,[r0,#0x3c]
;;;298        
;;;299      return HAL_OK;   
;;;300    }
0000b4  bc10              POP      {r4}
0000b6  2000              MOVS     r0,#0                 ;299
0000b8  4770              BX       lr
                  |L1.186|
0000ba  bc10              POP      {r4}
0000bc  2002              MOVS     r0,#2                 ;280
0000be  4770              BX       lr
;;;301    
                          ENDP

                  HAL_SRAM_Write_8b PROC
;;;310      */
;;;311    HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer, uint32_t BufferSize)
0000c0  b410              PUSH     {r4}
;;;312    {
;;;313      __IO uint8_t * pSramAddress = (uint8_t *)pAddress;
;;;314      
;;;315      /* Check the SRAM controller state */
;;;316      if(hsram->State == HAL_SRAM_STATE_PROTECTED)
0000c2  f890c03d          LDRB     r12,[r0,#0x3d]
0000c6  f1bc0f04          CMP      r12,#4
0000ca  d01b              BEQ      |L1.260|
;;;317      {
;;;318        return  HAL_ERROR; 
;;;319      }
;;;320      
;;;321      /* Process Locked */
;;;322      __HAL_LOCK(hsram);
0000cc  f890c03c          LDRB     r12,[r0,#0x3c]
0000d0  f1bc0f01          CMP      r12,#1
0000d4  d019              BEQ      |L1.266|
0000d6  f04f0c01          MOV      r12,#1
0000da  f880c03c          STRB     r12,[r0,#0x3c]
;;;323      
;;;324      /* Update the SRAM controller state */
;;;325      hsram->State = HAL_SRAM_STATE_BUSY; 
0000de  2402              MOVS     r4,#2
0000e0  f880403d          STRB     r4,[r0,#0x3d]
0000e4  b133              CBZ      r3,|L1.244|
                  |L1.230|
;;;326    
;;;327      /* Write data to memory */
;;;328      for(; BufferSize != 0; BufferSize--)
;;;329      {
;;;330        *(__IO uint8_t *)pSramAddress = *pSrcBuffer; 
0000e6  7814              LDRB     r4,[r2,#0]
0000e8  700c              STRB     r4,[r1,#0]
;;;331        pSrcBuffer++;
0000ea  1c52              ADDS     r2,r2,#1
;;;332        pSramAddress++;    
0000ec  1c49              ADDS     r1,r1,#1
0000ee  1e5b              SUBS     r3,r3,#1              ;328
0000f0  2b00              CMP      r3,#0                 ;328
0000f2  d1f8              BNE      |L1.230|
                  |L1.244|
;;;333      }    
;;;334    
;;;335      /* Update the SRAM controller state */
;;;336      hsram->State = HAL_SRAM_STATE_READY; 
0000f4  f880c03d          STRB     r12,[r0,#0x3d]
;;;337      
;;;338      /* Process unlocked */
;;;339      __HAL_UNLOCK(hsram);
0000f8  2100              MOVS     r1,#0
0000fa  f880103c          STRB     r1,[r0,#0x3c]
;;;340        
;;;341      return HAL_OK;   
;;;342    }
0000fe  bc10              POP      {r4}
000100  2000              MOVS     r0,#0                 ;341
000102  4770              BX       lr
                  |L1.260|
000104  bc10              POP      {r4}
000106  2001              MOVS     r0,#1                 ;318
000108  4770              BX       lr
                  |L1.266|
00010a  bc10              POP      {r4}
00010c  2002              MOVS     r0,#2                 ;322
00010e  4770              BX       lr
;;;343    
                          ENDP

                  HAL_SRAM_Read_16b PROC
;;;352      */
;;;353    HAL_StatusTypeDef HAL_SRAM_Read_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pDstBuffer, uint32_t BufferSize)
000110  b410              PUSH     {r4}
;;;354    {
;;;355      __IO uint16_t * pSramAddress = (uint16_t *)pAddress;
;;;356      
;;;357      /* Process Locked */
;;;358      __HAL_LOCK(hsram);
000112  f890c03c          LDRB     r12,[r0,#0x3c]
000116  f1bc0f01          CMP      r12,#1
00011a  d016              BEQ      |L1.330|
00011c  f04f0c01          MOV      r12,#1
000120  f880c03c          STRB     r12,[r0,#0x3c]
;;;359      
;;;360      /* Update the SRAM controller state */
;;;361      hsram->State = HAL_SRAM_STATE_BUSY;  
000124  2402              MOVS     r4,#2
000126  f880403d          STRB     r4,[r0,#0x3d]
00012a  b133              CBZ      r3,|L1.314|
                  |L1.300|
;;;362      
;;;363      /* Read data from memory */
;;;364      for(; BufferSize != 0; BufferSize--)
;;;365      {
;;;366        *pDstBuffer = *(__IO uint16_t *)pSramAddress;
00012c  880c              LDRH     r4,[r1,#0]
00012e  8014              STRH     r4,[r2,#0]
;;;367        pDstBuffer++;
000130  1c92              ADDS     r2,r2,#2
;;;368        pSramAddress++;
000132  1c89              ADDS     r1,r1,#2
000134  1e5b              SUBS     r3,r3,#1              ;364
000136  2b00              CMP      r3,#0                 ;364
000138  d1f8              BNE      |L1.300|
                  |L1.314|
;;;369      }
;;;370      
;;;371      /* Update the SRAM controller state */
;;;372      hsram->State = HAL_SRAM_STATE_READY;    
00013a  f880c03d          STRB     r12,[r0,#0x3d]
;;;373    
;;;374      /* Process unlocked */
;;;375      __HAL_UNLOCK(hsram); 
00013e  2100              MOVS     r1,#0
000140  f880103c          STRB     r1,[r0,#0x3c]
;;;376        
;;;377      return HAL_OK;  
;;;378    }
000144  bc10              POP      {r4}
000146  2000              MOVS     r0,#0                 ;377
000148  4770              BX       lr
                  |L1.330|
00014a  bc10              POP      {r4}
00014c  2002              MOVS     r0,#2                 ;358
00014e  4770              BX       lr
;;;379    
                          ENDP

                  HAL_SRAM_Write_16b PROC
;;;388      */
;;;389    HAL_StatusTypeDef HAL_SRAM_Write_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pSrcBuffer, uint32_t BufferSize)
000150  b410              PUSH     {r4}
;;;390    {
;;;391      __IO uint16_t * pSramAddress = (uint16_t *)pAddress; 
;;;392      
;;;393      /* Check the SRAM controller state */
;;;394      if(hsram->State == HAL_SRAM_STATE_PROTECTED)
000152  f890c03d          LDRB     r12,[r0,#0x3d]
000156  f1bc0f04          CMP      r12,#4
00015a  d01b              BEQ      |L1.404|
;;;395      {
;;;396        return  HAL_ERROR; 
;;;397      }
;;;398      
;;;399      /* Process Locked */
;;;400      __HAL_LOCK(hsram);
00015c  f890c03c          LDRB     r12,[r0,#0x3c]
000160  f1bc0f01          CMP      r12,#1
000164  d019              BEQ      |L1.410|
000166  f04f0c01          MOV      r12,#1
00016a  f880c03c          STRB     r12,[r0,#0x3c]
;;;401      
;;;402      /* Update the SRAM controller state */
;;;403      hsram->State = HAL_SRAM_STATE_BUSY; 
00016e  2402              MOVS     r4,#2
000170  f880403d          STRB     r4,[r0,#0x3d]
000174  b133              CBZ      r3,|L1.388|
                  |L1.374|
;;;404    
;;;405      /* Write data to memory */
;;;406      for(; BufferSize != 0; BufferSize--)
;;;407      {
;;;408        *(__IO uint16_t *)pSramAddress = *pSrcBuffer; 
000176  8814              LDRH     r4,[r2,#0]
000178  800c              STRH     r4,[r1,#0]
;;;409        pSrcBuffer++;
00017a  1c92              ADDS     r2,r2,#2
;;;410        pSramAddress++;    
00017c  1c89              ADDS     r1,r1,#2
00017e  1e5b              SUBS     r3,r3,#1              ;406
000180  2b00              CMP      r3,#0                 ;406
000182  d1f8              BNE      |L1.374|
                  |L1.388|
;;;411      }    
;;;412    
;;;413      /* Update the SRAM controller state */
;;;414      hsram->State = HAL_SRAM_STATE_READY; 
000184  f880c03d          STRB     r12,[r0,#0x3d]
;;;415      
;;;416      /* Process unlocked */
;;;417      __HAL_UNLOCK(hsram);
000188  2100              MOVS     r1,#0
00018a  f880103c          STRB     r1,[r0,#0x3c]
;;;418        
;;;419      return HAL_OK;  
;;;420    }
00018e  bc10              POP      {r4}
000190  2000              MOVS     r0,#0                 ;419
000192  4770              BX       lr
                  |L1.404|
000194  bc10              POP      {r4}
000196  2001              MOVS     r0,#1                 ;396
000198  4770              BX       lr
                  |L1.410|
00019a  bc10              POP      {r4}
00019c  2002              MOVS     r0,#2                 ;400
00019e  4770              BX       lr
;;;421    
                          ENDP

                  HAL_SRAM_Read_32b PROC
;;;430      */
;;;431    HAL_StatusTypeDef HAL_SRAM_Read_32b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
0001a0  b410              PUSH     {r4}
;;;432    {
;;;433      /* Process Locked */
;;;434      __HAL_LOCK(hsram);
0001a2  f890c03c          LDRB     r12,[r0,#0x3c]
0001a6  f1bc0f01          CMP      r12,#1
0001aa  d016              BEQ      |L1.474|
0001ac  f04f0c01          MOV      r12,#1
0001b0  f880c03c          STRB     r12,[r0,#0x3c]
;;;435      
;;;436      /* Update the SRAM controller state */
;;;437      hsram->State = HAL_SRAM_STATE_BUSY;  
0001b4  2402              MOVS     r4,#2
0001b6  f880403d          STRB     r4,[r0,#0x3d]
0001ba  b133              CBZ      r3,|L1.458|
                  |L1.444|
;;;438      
;;;439      /* Read data from memory */
;;;440      for(; BufferSize != 0; BufferSize--)
;;;441      {
;;;442        *pDstBuffer = *(__IO uint32_t *)pAddress;
0001bc  680c              LDR      r4,[r1,#0]
0001be  6014              STR      r4,[r2,#0]
;;;443        pDstBuffer++;
0001c0  1d12              ADDS     r2,r2,#4
;;;444        pAddress++;
0001c2  1d09              ADDS     r1,r1,#4
0001c4  1e5b              SUBS     r3,r3,#1              ;440
0001c6  2b00              CMP      r3,#0                 ;440
0001c8  d1f8              BNE      |L1.444|
                  |L1.458|
;;;445      }
;;;446      
;;;447      /* Update the SRAM controller state */
;;;448      hsram->State = HAL_SRAM_STATE_READY;    
0001ca  f880c03d          STRB     r12,[r0,#0x3d]
;;;449    
;;;450      /* Process unlocked */
;;;451      __HAL_UNLOCK(hsram); 
0001ce  2100              MOVS     r1,#0
0001d0  f880103c          STRB     r1,[r0,#0x3c]
;;;452        
;;;453      return HAL_OK;  
;;;454    }
0001d4  bc10              POP      {r4}
0001d6  2000              MOVS     r0,#0                 ;453
0001d8  4770              BX       lr
                  |L1.474|
0001da  bc10              POP      {r4}
0001dc  2002              MOVS     r0,#2                 ;434
0001de  4770              BX       lr
;;;455    
                          ENDP

                  HAL_SRAM_Write_32b PROC
;;;464      */
;;;465    HAL_StatusTypeDef HAL_SRAM_Write_32b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
0001e0  b410              PUSH     {r4}
;;;466    {
;;;467      /* Check the SRAM controller state */
;;;468      if(hsram->State == HAL_SRAM_STATE_PROTECTED)
0001e2  f890c03d          LDRB     r12,[r0,#0x3d]
0001e6  f1bc0f04          CMP      r12,#4
0001ea  d01b              BEQ      |L1.548|
;;;469      {
;;;470        return  HAL_ERROR; 
;;;471      }
;;;472      
;;;473      /* Process Locked */
;;;474      __HAL_LOCK(hsram);
0001ec  f890c03c          LDRB     r12,[r0,#0x3c]
0001f0  f1bc0f01          CMP      r12,#1
0001f4  d019              BEQ      |L1.554|
0001f6  f04f0c01          MOV      r12,#1
0001fa  f880c03c          STRB     r12,[r0,#0x3c]
;;;475      
;;;476      /* Update the SRAM controller state */
;;;477      hsram->State = HAL_SRAM_STATE_BUSY; 
0001fe  2402              MOVS     r4,#2
000200  f880403d          STRB     r4,[r0,#0x3d]
000204  b133              CBZ      r3,|L1.532|
                  |L1.518|
;;;478    
;;;479      /* Write data to memory */
;;;480      for(; BufferSize != 0; BufferSize--)
;;;481      {
;;;482        *(__IO uint32_t *)pAddress = *pSrcBuffer; 
000206  6814              LDR      r4,[r2,#0]
000208  600c              STR      r4,[r1,#0]
;;;483        pSrcBuffer++;
00020a  1d12              ADDS     r2,r2,#4
;;;484        pAddress++;    
00020c  1d09              ADDS     r1,r1,#4
00020e  1e5b              SUBS     r3,r3,#1              ;480
000210  2b00              CMP      r3,#0                 ;480
000212  d1f8              BNE      |L1.518|
                  |L1.532|
;;;485      }    
;;;486    
;;;487      /* Update the SRAM controller state */
;;;488      hsram->State = HAL_SRAM_STATE_READY; 
000214  f880c03d          STRB     r12,[r0,#0x3d]
;;;489      
;;;490      /* Process unlocked */
;;;491      __HAL_UNLOCK(hsram);
000218  2100              MOVS     r1,#0
00021a  f880103c          STRB     r1,[r0,#0x3c]
;;;492        
;;;493      return HAL_OK;   
;;;494    }
00021e  bc10              POP      {r4}
000220  2000              MOVS     r0,#0                 ;493
000222  4770              BX       lr
                  |L1.548|
000224  bc10              POP      {r4}
000226  2001              MOVS     r0,#1                 ;470
000228  4770              BX       lr
                  |L1.554|
00022a  bc10              POP      {r4}
00022c  2002              MOVS     r0,#2                 ;474
00022e  4770              BX       lr
;;;495    
                          ENDP

                  HAL_SRAM_Read_DMA PROC
;;;504      */
;;;505    HAL_StatusTypeDef HAL_SRAM_Read_DMA(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
000230  b570              PUSH     {r4-r6,lr}
;;;506    {
000232  4604              MOV      r4,r0
;;;507      /* Process Locked */
;;;508      __HAL_LOCK(hsram);  
000234  f894003c          LDRB     r0,[r4,#0x3c]
000238  2801              CMP      r0,#1
00023a  d018              BEQ      |L1.622|
00023c  2501              MOVS     r5,#1
00023e  f884503c          STRB     r5,[r4,#0x3c]
;;;509      
;;;510      /* Update the SRAM controller state */
;;;511      hsram->State = HAL_SRAM_STATE_BUSY;   
000242  2002              MOVS     r0,#2
000244  f884003d          STRB     r0,[r4,#0x3d]
;;;512      
;;;513      /* Configure DMA user callbacks */
;;;514      hsram->hdma->XferCpltCallback  = HAL_SRAM_DMA_XferCpltCallback;
000248  f8d4c040          LDR      r12,[r4,#0x40]
00024c  4834              LDR      r0,|L1.800|
00024e  f8cc003c          STR      r0,[r12,#0x3c]
;;;515      hsram->hdma->XferErrorCallback = HAL_SRAM_DMA_XferErrorCallback;
000252  f8d4c040          LDR      r12,[r4,#0x40]
000256  4833              LDR      r0,|L1.804|
000258  f8cc0048          STR      r0,[r12,#0x48]
;;;516    
;;;517      /* Enable the DMA Stream */
;;;518      HAL_DMA_Start_IT(hsram->hdma, (uint32_t)pAddress, (uint32_t)pDstBuffer, (uint32_t)BufferSize);
00025c  6c20              LDR      r0,[r4,#0x40]
00025e  f7fffffe          BL       HAL_DMA_Start_IT
;;;519      
;;;520      /* Update the SRAM controller state */
;;;521      hsram->State = HAL_SRAM_STATE_READY; 
000262  f884503d          STRB     r5,[r4,#0x3d]
;;;522      
;;;523      /* Process unlocked */
;;;524      __HAL_UNLOCK(hsram);  
000266  2000              MOVS     r0,#0
000268  f884003c          STRB     r0,[r4,#0x3c]
;;;525      
;;;526      return HAL_OK; 
;;;527    }
00026c  bd70              POP      {r4-r6,pc}
                  |L1.622|
00026e  2002              MOVS     r0,#2                 ;508
000270  bd70              POP      {r4-r6,pc}
;;;528    
                          ENDP

                  HAL_SRAM_Write_DMA PROC
;;;537      */
;;;538    HAL_StatusTypeDef HAL_SRAM_Write_DMA(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
000272  b570              PUSH     {r4-r6,lr}
;;;539    {
000274  4604              MOV      r4,r0
000276  4694              MOV      r12,r2
;;;540      /* Check the SRAM controller state */
;;;541      if(hsram->State == HAL_SRAM_STATE_PROTECTED)
000278  f894003d          LDRB     r0,[r4,#0x3d]
00027c  2804              CMP      r0,#4
00027e  d01a              BEQ      |L1.694|
;;;542      {
;;;543        return  HAL_ERROR; 
;;;544      }
;;;545      
;;;546      /* Process Locked */
;;;547      __HAL_LOCK(hsram);
000280  f894003c          LDRB     r0,[r4,#0x3c]
000284  2801              CMP      r0,#1
000286  d018              BEQ      |L1.698|
000288  2501              MOVS     r5,#1
00028a  f884503c          STRB     r5,[r4,#0x3c]
;;;548      
;;;549      /* Update the SRAM controller state */
;;;550      hsram->State = HAL_SRAM_STATE_BUSY; 
00028e  2002              MOVS     r0,#2
000290  f884003d          STRB     r0,[r4,#0x3d]
;;;551      
;;;552      /* Configure DMA user callbacks */
;;;553      hsram->hdma->XferCpltCallback  = HAL_SRAM_DMA_XferCpltCallback;
000294  6c22              LDR      r2,[r4,#0x40]
000296  4822              LDR      r0,|L1.800|
000298  63d0              STR      r0,[r2,#0x3c]
;;;554      hsram->hdma->XferErrorCallback = HAL_SRAM_DMA_XferErrorCallback;
00029a  6c22              LDR      r2,[r4,#0x40]
00029c  4821              LDR      r0,|L1.804|
00029e  6490              STR      r0,[r2,#0x48]
;;;555    
;;;556      /* Enable the DMA Stream */
;;;557      HAL_DMA_Start_IT(hsram->hdma, (uint32_t)pSrcBuffer, (uint32_t)pAddress, (uint32_t)BufferSize);
0002a0  460a              MOV      r2,r1
0002a2  4661              MOV      r1,r12
0002a4  6c20              LDR      r0,[r4,#0x40]
0002a6  f7fffffe          BL       HAL_DMA_Start_IT
;;;558      
;;;559      /* Update the SRAM controller state */
;;;560      hsram->State = HAL_SRAM_STATE_READY;  
0002aa  f884503d          STRB     r5,[r4,#0x3d]
;;;561      
;;;562      /* Process unlocked */
;;;563      __HAL_UNLOCK(hsram);  
0002ae  2000              MOVS     r0,#0
0002b0  f884003c          STRB     r0,[r4,#0x3c]
;;;564      
;;;565      return HAL_OK;
;;;566    }
0002b4  bd70              POP      {r4-r6,pc}
                  |L1.694|
0002b6  2001              MOVS     r0,#1                 ;543
0002b8  bd70              POP      {r4-r6,pc}
                  |L1.698|
0002ba  2002              MOVS     r0,#2                 ;547
0002bc  bd70              POP      {r4-r6,pc}
;;;567    
                          ENDP

                  HAL_SRAM_WriteOperation_Enable PROC
;;;592      */
;;;593    HAL_StatusTypeDef HAL_SRAM_WriteOperation_Enable(SRAM_HandleTypeDef *hsram)
0002be  b570              PUSH     {r4-r6,lr}
;;;594    {
0002c0  4604              MOV      r4,r0
;;;595      /* Process Locked */
;;;596      __HAL_LOCK(hsram);
0002c2  f894003c          LDRB     r0,[r4,#0x3c]
0002c6  2801              CMP      r0,#1
0002c8  d00c              BEQ      |L1.740|
0002ca  2501              MOVS     r5,#1
0002cc  f884503c          STRB     r5,[r4,#0x3c]
;;;597    
;;;598      /* Enable write operation */
;;;599      FMC_NORSRAM_WriteOperation_Enable(hsram->Instance, hsram->Init.NSBank); 
0002d0  68a1              LDR      r1,[r4,#8]
0002d2  6820              LDR      r0,[r4,#0]
0002d4  f7fffffe          BL       FSMC_NORSRAM_WriteOperation_Enable
;;;600      
;;;601      /* Update the SRAM controller state */
;;;602      hsram->State = HAL_SRAM_STATE_READY;
0002d8  f884503d          STRB     r5,[r4,#0x3d]
;;;603      
;;;604      /* Process unlocked */
;;;605      __HAL_UNLOCK(hsram); 
0002dc  2000              MOVS     r0,#0
0002de  f884003c          STRB     r0,[r4,#0x3c]
;;;606      
;;;607      return HAL_OK;  
;;;608    }
0002e2  bd70              POP      {r4-r6,pc}
                  |L1.740|
0002e4  2002              MOVS     r0,#2                 ;596
0002e6  bd70              POP      {r4-r6,pc}
;;;609    
                          ENDP

                  HAL_SRAM_WriteOperation_Disable PROC
;;;615      */
;;;616    HAL_StatusTypeDef HAL_SRAM_WriteOperation_Disable(SRAM_HandleTypeDef *hsram)
0002e8  b510              PUSH     {r4,lr}
;;;617    {
0002ea  4604              MOV      r4,r0
;;;618      /* Process Locked */
;;;619      __HAL_LOCK(hsram);
0002ec  f894003c          LDRB     r0,[r4,#0x3c]
0002f0  2801              CMP      r0,#1
0002f2  d010              BEQ      |L1.790|
0002f4  2001              MOVS     r0,#1
0002f6  f884003c          STRB     r0,[r4,#0x3c]
;;;620    
;;;621      /* Update the SRAM controller state */
;;;622      hsram->State = HAL_SRAM_STATE_BUSY;
0002fa  2002              MOVS     r0,#2
0002fc  f884003d          STRB     r0,[r4,#0x3d]
;;;623        
;;;624      /* Disable write operation */
;;;625      FMC_NORSRAM_WriteOperation_Disable(hsram->Instance, hsram->Init.NSBank); 
000300  68a1              LDR      r1,[r4,#8]
000302  6820              LDR      r0,[r4,#0]
000304  f7fffffe          BL       FSMC_NORSRAM_WriteOperation_Disable
;;;626      
;;;627      /* Update the SRAM controller state */
;;;628      hsram->State = HAL_SRAM_STATE_PROTECTED;
000308  2004              MOVS     r0,#4
00030a  f884003d          STRB     r0,[r4,#0x3d]
;;;629      
;;;630      /* Process unlocked */
;;;631      __HAL_UNLOCK(hsram); 
00030e  2000              MOVS     r0,#0
000310  f884003c          STRB     r0,[r4,#0x3c]
;;;632      
;;;633      return HAL_OK;  
;;;634    }
000314  bd10              POP      {r4,pc}
                  |L1.790|
000316  2002              MOVS     r0,#2                 ;619
000318  bd10              POP      {r4,pc}
;;;635    
                          ENDP

                  HAL_SRAM_GetState PROC
;;;660      */
;;;661    HAL_SRAM_StateTypeDef HAL_SRAM_GetState(SRAM_HandleTypeDef *hsram)
00031a  f890003d          LDRB     r0,[r0,#0x3d]
;;;662    {
;;;663      return hsram->State;
;;;664    }
00031e  4770              BX       lr
;;;665    /**
                          ENDP

                  |L1.800|
                          DCD      HAL_SRAM_DMA_XferCpltCallback
                  |L1.804|
                          DCD      HAL_SRAM_DMA_XferErrorCallback

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "drivers\\src\\stm32f4xx_hal_sram.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_hal_sram_c_27568b0d___ZN42_INTERNAL_20_stm32f4xx_hal_sram_c_27568b0d7__REV16Ej|
#line 138 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.3.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___20_stm32f4xx_hal_sram_c_27568b0d___ZN42_INTERNAL_20_stm32f4xx_hal_sram_c_27568b0d7__REV16Ej| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_hal_sram_c_27568b0d___ZN42_INTERNAL_20_stm32f4xx_hal_sram_c_27568b0d7__REVSHEi|
#line 153
|__asm___20_stm32f4xx_hal_sram_c_27568b0d___ZN42_INTERNAL_20_stm32f4xx_hal_sram_c_27568b0d7__REVSHEi| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_hal_sram_c_27568b0d___ZN42_INTERNAL_20_stm32f4xx_hal_sram_c_27568b0d5__RRXEj|
#line 328
|__asm___20_stm32f4xx_hal_sram_c_27568b0d___ZN42_INTERNAL_20_stm32f4xx_hal_sram_c_27568b0d5__RRXEj| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
