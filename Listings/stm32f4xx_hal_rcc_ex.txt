; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\objects\stm32f4xx_hal_rcc_ex.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f4xx_hal_rcc_ex.d --cpu=Cortex-M4.fp --apcs=interwork -O1 -Otime --diag_suppress=9931 -I.\device\GUI\inc -I.\device\hardware\inc -I.\device\init\inc -I.\misc\inc -I.\user\inc -I..\tester_1.03 -I.\memory\inc -I.\drivers\inc -IE:\KeilProj\tester_1_03\Embed\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F417xx -DSTM32F417xx -DColorDepthBpp16 -Dtftili9486 -DSOFTWARE_GL -DGUI_ALLIGN_LAYSIZE_TO_POW2 --omf_browse=.\objects\stm32f4xx_hal_rcc_ex.crf drivers\src\stm32f4xx_hal_rcc_ex.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_PeriphCLKConfig PROC
;;;971      */
;;;972    HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;973    {
000004  4604              MOV      r4,r0
;;;974      uint32_t tickstart = 0;
;;;975      uint32_t tmpreg1 = 0;
;;;976        
;;;977      /* Check the parameters */
;;;978      assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
;;;979      
;;;980      /*---------------------------- I2S configuration ---------------------------*/
;;;981      if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
000006  f04f0700          MOV      r7,#0
00000a  7820              LDRB     r0,[r4,#0]
;;;982      {
;;;983        /* check for Parameters */
;;;984        assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
;;;985        assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
;;;986    #if defined(STM32F411xE)    
;;;987        assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
;;;988    #endif /* STM32F411xE */
;;;989        /* Disable the PLLI2S */
;;;990        __HAL_RCC_PLLI2S_DISABLE();
;;;991        /* Get tick */
;;;992        tickstart = HAL_GetTick();
;;;993        /* Wait till PLLI2S is disabled */
;;;994        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
;;;995        {
;;;996          if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
;;;997          {
;;;998            /* return in case of Timeout detected */
;;;999            return HAL_TIMEOUT;
;;;1000         } 
;;;1001       }
;;;1002   
;;;1003   #if defined(STM32F411xE)
;;;1004       /* Configure the PLLI2S division factors */
;;;1005       /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLI2SM) */
;;;1006       /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */    
;;;1007       __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
;;;1008   #else
;;;1009       /* Configure the PLLI2S division factors */
;;;1010       /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLM) */
;;;1011       /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
;;;1012       __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
;;;1013   #endif /* STM32F411xE */
;;;1014       
;;;1015       /* Enable the PLLI2S */
;;;1016       __HAL_RCC_PLLI2S_ENABLE();
00000c  f04f0801          MOV      r8,#1
000010  f0100f01          TST      r0,#1                 ;981
000014  d03f              BEQ      |L1.150|
000016  f8df91a0          LDR      r9,|L1.440|
00001a  f8c97068          STR      r7,[r9,#0x68]         ;990
00001e  f7fffffe          BL       HAL_GetTick
000022  4606              MOV      r6,r0                 ;992
000024  4d65              LDR      r5,|L1.444|
000026  6828              LDR      r0,[r5,#0]            ;994
000028  f0106f00          TST      r0,#0x8000000         ;994
00002c  d00b              BEQ      |L1.70|
                  |L1.46|
00002e  f7fffffe          BL       HAL_GetTick
000032  1b80              SUBS     r0,r0,r6              ;996
000034  2864              CMP      r0,#0x64              ;996
000036  d902              BLS      |L1.62|
000038  2003              MOVS     r0,#3                 ;999
;;;1017       /* Get tick */
;;;1018       tickstart = HAL_GetTick();
;;;1019       /* Wait till PLLI2S is ready */
;;;1020       while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
;;;1021       {
;;;1022         if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
;;;1023         {
;;;1024           /* return in case of Timeout detected */
;;;1025           return HAL_TIMEOUT;
;;;1026         }
;;;1027       }
;;;1028     }
;;;1029     
;;;1030     /*---------------------------- RTC configuration ---------------------------*/
;;;1031     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
;;;1032     {
;;;1033       /* Enable Power Clock*/
;;;1034       __HAL_RCC_PWR_CLK_ENABLE();
;;;1035       
;;;1036       /* Enable write access to Backup domain */
;;;1037       PWR->CR |= PWR_CR_DBP;
;;;1038   
;;;1039       /* Get tick */
;;;1040       tickstart = HAL_GetTick();
;;;1041   
;;;1042       while((PWR->CR & PWR_CR_DBP) == RESET)
;;;1043       {
;;;1044         if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
;;;1045         {
;;;1046           return HAL_TIMEOUT;
;;;1047         }      
;;;1048       }
;;;1049           
;;;1050       /* Reset the Backup domain only if the RTC Clock source selection is modified */ 
;;;1051       if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
;;;1052       {
;;;1053         /* Store the content of BDCR register before the reset of Backup Domain */
;;;1054         tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
;;;1055         /* RTC Clock selection can be changed only if the Backup Domain is reset */
;;;1056         __HAL_RCC_BACKUPRESET_FORCE();
;;;1057         __HAL_RCC_BACKUPRESET_RELEASE();
;;;1058         /* Restore the Content of BDCR register */
;;;1059         RCC->BDCR = tmpreg1;
;;;1060       }
;;;1061         
;;;1062       /* If LSE is selected as RTC clock source, wait for LSE reactivation */
;;;1063       if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
;;;1064       {
;;;1065         /* Get tick */
;;;1066         tickstart = HAL_GetTick();
;;;1067   
;;;1068         /* Wait till LSE is ready */  
;;;1069         while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
;;;1070         {
;;;1071           if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;1072           {
;;;1073             return HAL_TIMEOUT;
;;;1074           }
;;;1075         }  
;;;1076       }
;;;1077       __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
;;;1078     }
;;;1079     
;;;1080     return HAL_OK;
;;;1081   }
00003a  e8bd83f8          POP      {r3-r9,pc}
                  |L1.62|
00003e  6828              LDR      r0,[r5,#0]            ;994
000040  f0106f00          TST      r0,#0x8000000         ;994
000044  d1f3              BNE      |L1.46|
                  |L1.70|
000046  f64771c0          MOV      r1,#0x7fc0            ;1012
00004a  fa91f1a1          RBIT     r1,r1                 ;1012
00004e  6860              LDR      r0,[r4,#4]            ;1012
000050  fab1f181          CLZ      r1,r1                 ;1012
000054  4088              LSLS     r0,r0,r1              ;1012
000056  f04f42e0          MOV      r2,#0x70000000        ;1012
00005a  fa92f2a2          RBIT     r2,r2                 ;1012
00005e  68a1              LDR      r1,[r4,#8]            ;1012
000060  fab2f282          CLZ      r2,r2                 ;1012
000064  4091              LSLS     r1,r1,r2              ;1012
000066  4308              ORRS     r0,r0,r1              ;1012
000068  4955              LDR      r1,|L1.448|
00006a  6008              STR      r0,[r1,#0]            ;1012
00006c  f8c98068          STR      r8,[r9,#0x68]         ;1016
000070  f7fffffe          BL       HAL_GetTick
000074  4606              MOV      r6,r0                 ;1018
000076  6828              LDR      r0,[r5,#0]            ;1020
000078  f0106f00          TST      r0,#0x8000000         ;1020
00007c  d10b              BNE      |L1.150|
                  |L1.126|
00007e  f7fffffe          BL       HAL_GetTick
000082  1b80              SUBS     r0,r0,r6              ;1022
000084  2864              CMP      r0,#0x64              ;1022
000086  d902              BLS      |L1.142|
000088  2003              MOVS     r0,#3                 ;1025
00008a  e8bd83f8          POP      {r3-r9,pc}
                  |L1.142|
00008e  6828              LDR      r0,[r5,#0]            ;1020
000090  f0106f00          TST      r0,#0x8000000         ;1020
000094  d0f3              BEQ      |L1.126|
                  |L1.150|
000096  7820              LDRB     r0,[r4,#0]            ;1031
000098  f0100f02          TST      r0,#2                 ;1031
00009c  d05b              BEQ      |L1.342|
00009e  4849              LDR      r0,|L1.452|
0000a0  6801              LDR      r1,[r0,#0]            ;1034
0000a2  f0415180          ORR      r1,r1,#0x10000000     ;1034
0000a6  6001              STR      r1,[r0,#0]            ;1034
0000a8  6800              LDR      r0,[r0,#0]            ;1034
0000aa  f0005080          AND      r0,r0,#0x10000000     ;1034
0000ae  9000              STR      r0,[sp,#0]            ;1034
0000b0  4d45              LDR      r5,|L1.456|
0000b2  6828              LDR      r0,[r5,#0]            ;1037
0000b4  f4407080          ORR      r0,r0,#0x100          ;1037
0000b8  6028              STR      r0,[r5,#0]            ;1037
0000ba  f7fffffe          BL       HAL_GetTick
0000be  4606              MOV      r6,r0                 ;1040
0000c0  6828              LDR      r0,[r5,#0]            ;1042
0000c2  f4107f80          TST      r0,#0x100             ;1042
0000c6  d10b              BNE      |L1.224|
                  |L1.200|
0000c8  f7fffffe          BL       HAL_GetTick
0000cc  1b80              SUBS     r0,r0,r6              ;1044
0000ce  2864              CMP      r0,#0x64              ;1044
0000d0  d902              BLS      |L1.216|
0000d2  2003              MOVS     r0,#3                 ;1046
0000d4  e8bd83f8          POP      {r3-r9,pc}
                  |L1.216|
0000d8  6828              LDR      r0,[r5,#0]            ;1042
0000da  f4107f80          TST      r0,#0x100             ;1042
0000de  d0f3              BEQ      |L1.200|
                  |L1.224|
0000e0  4d3a              LDR      r5,|L1.460|
0000e2  6828              LDR      r0,[r5,#0]            ;1051
0000e4  89a1              LDRH     r1,[r4,#0xc]          ;1051
0000e6  f4007040          AND      r0,r0,#0x300          ;1051
0000ea  f4017140          AND      r1,r1,#0x300          ;1051
0000ee  4288              CMP      r0,r1                 ;1051
0000f0  d007              BEQ      |L1.258|
0000f2  6828              LDR      r0,[r5,#0]            ;1054
0000f4  f4207040          BIC      r0,r0,#0x300          ;1054
0000f8  4935              LDR      r1,|L1.464|
0000fa  f8c18000          STR      r8,[r1,#0]            ;1056
0000fe  600f              STR      r7,[r1,#0]            ;1057
000100  6028              STR      r0,[r5,#0]            ;1059
                  |L1.258|
000102  68e0              LDR      r0,[r4,#0xc]          ;1063
000104  f5b07f80          CMP      r0,#0x100             ;1063
000108  d114              BNE      |L1.308|
00010a  f7fffffe          BL       HAL_GetTick
00010e  4606              MOV      r6,r0                 ;1066
000110  6828              LDR      r0,[r5,#0]            ;1069
000112  f0100f02          TST      r0,#2                 ;1069
000116  d10d              BNE      |L1.308|
000118  f2413788          MOV      r7,#0x1388            ;1071
                  |L1.284|
00011c  f7fffffe          BL       HAL_GetTick
000120  1b80              SUBS     r0,r0,r6              ;1071
000122  42b8              CMP      r0,r7                 ;1071
000124  d902              BLS      |L1.300|
000126  2003              MOVS     r0,#3                 ;1073
000128  e8bd83f8          POP      {r3-r9,pc}
                  |L1.300|
00012c  6828              LDR      r0,[r5,#0]            ;1069
00012e  f0100f02          TST      r0,#2                 ;1069
000132  d0f3              BEQ      |L1.284|
                  |L1.308|
000134  68e0              LDR      r0,[r4,#0xc]          ;1077
000136  f44f7140          MOV      r1,#0x300             ;1077
00013a  ea310200          BICS     r2,r1,r0              ;1077
00013e  4925              LDR      r1,|L1.468|
000140  d00c              BEQ      |L1.348|
000142  6808              LDR      r0,[r1,#0]            ;1077
000144  f42010f8          BIC      r0,r0,#0x1f0000       ;1077
000148  6008              STR      r0,[r1,#0]            ;1077
                  |L1.330|
00014a  6828              LDR      r0,[r5,#0]            ;1077
00014c  89a1              LDRH     r1,[r4,#0xc]          ;1077
00014e  f3c1010b          UBFX     r1,r1,#0,#12          ;1077
000152  4308              ORRS     r0,r0,r1              ;1077
000154  6028              STR      r0,[r5,#0]            ;1077
                  |L1.342|
000156  2000              MOVS     r0,#0                 ;1080
000158  e8bd83f8          POP      {r3-r9,pc}
                  |L1.348|
00015c  680a              LDR      r2,[r1,#0]            ;1077
00015e  f4207040          BIC      r0,r0,#0x300          ;1077
000162  f42212f8          BIC      r2,r2,#0x1f0000       ;1077
000166  f0204070          BIC      r0,r0,#0xf0000000     ;1077
00016a  4310              ORRS     r0,r0,r2              ;1077
00016c  6008              STR      r0,[r1,#0]            ;1077
00016e  e7ec              B        |L1.330|
;;;1082   
                          ENDP

                  HAL_RCCEx_GetPeriphCLKConfig PROC
;;;1089     */
;;;1090   void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
000170  2103              MOVS     r1,#3
;;;1091   {
;;;1092     uint32_t tempreg;
;;;1093     
;;;1094     /* Set all possible values for the extended clock type parameter------------*/
;;;1095     PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
000172  6001              STR      r1,[r0,#0]
;;;1096     
;;;1097     /* Get the PLLI2S Clock configuration -----------------------------------------------*/
;;;1098     PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
000174  4a12              LDR      r2,|L1.448|
000176  6813              LDR      r3,[r2,#0]
000178  f64771c0          MOV      r1,#0x7fc0
00017c  400b              ANDS     r3,r3,r1
00017e  fa91f1a1          RBIT     r1,r1
000182  fab1f181          CLZ      r1,r1
000186  fa23f101          LSR      r1,r3,r1
00018a  6041              STR      r1,[r0,#4]
;;;1099     PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
00018c  6811              LDR      r1,[r2,#0]
00018e  f04f42e0          MOV      r2,#0x70000000
000192  fa92f2a2          RBIT     r2,r2
000196  f00141e0          AND      r1,r1,#0x70000000
00019a  fab2f282          CLZ      r2,r2
00019e  40d1              LSRS     r1,r1,r2
0001a0  6081              STR      r1,[r0,#8]
;;;1100   #if defined(STM32F411xE)
;;;1101     PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
;;;1102   #endif /* STM32F411xE */  
;;;1103     /* Get the RTC Clock configuration -----------------------------------------------*/
;;;1104     tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
0001a2  490c              LDR      r1,|L1.468|
0001a4  6809              LDR      r1,[r1,#0]
0001a6  f40111f8          AND      r1,r1,#0x1f0000
;;;1105     PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
0001aa  4a08              LDR      r2,|L1.460|
0001ac  6812              LDR      r2,[r2,#0]
0001ae  f4027240          AND      r2,r2,#0x300
0001b2  4311              ORRS     r1,r1,r2
0001b4  60c1              STR      r1,[r0,#0xc]
;;;1106     
;;;1107   }
0001b6  4770              BX       lr
;;;1108   #endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx || STM32F401xC || STM32F401xE || STM32F411xE */
                          ENDP

                  |L1.440|
                          DCD      0x42470000
                  |L1.444|
                          DCD      0x40023800
                  |L1.448|
                          DCD      0x40023884
                  |L1.452|
                          DCD      0x40023840
                  |L1.456|
                          DCD      0x40007000
                  |L1.460|
                          DCD      0x40023870
                  |L1.464|
                          DCD      0x42470e40
                  |L1.468|
                          DCD      0x40023808

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "drivers\\src\\stm32f4xx_hal_rcc_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_rcc_ex_c_bed13b44___Z7__REV16j|
#line 138 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.3.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___22_stm32f4xx_hal_rcc_ex_c_bed13b44___Z7__REV16j| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_rcc_ex_c_bed13b44___Z7__REVSHi|
#line 153
|__asm___22_stm32f4xx_hal_rcc_ex_c_bed13b44___Z7__REVSHi| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_rcc_ex_c_bed13b44___Z5__RRXj|
#line 328
|__asm___22_stm32f4xx_hal_rcc_ex_c_bed13b44___Z5__RRXj| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
