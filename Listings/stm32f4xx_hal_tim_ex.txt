; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\objects\stm32f4xx_hal_tim_ex.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f4xx_hal_tim_ex.d --cpu=Cortex-M4.fp --apcs=interwork -O1 -Otime --diag_suppress=9931 -I.\device\GUI\inc -I.\device\hardware\inc -I.\device\init\inc -I.\misc\inc -I.\user\inc -I..\tester_1.03 -I.\memory\inc -I.\drivers\inc -ID:\myKeil\tester_1.03\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F417xx -DSTM32F417xx -DColorDepthBpp16 -Dtftili9486 -DSOFTWARE_GL -DGUI_ALLIGN_LAYSIZE_TO_POW2 --omf_browse=.\objects\stm32f4xx_hal_tim_ex.crf drivers\src\stm32f4xx_hal_tim_ex.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_HallSensor_MspInit PROC
;;;259      */
;;;260    __weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;261    {
;;;262      /* NOTE : This function Should not be modified, when the callback is needed,
;;;263                the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
;;;264       */
;;;265    }
;;;266    
                          ENDP

                  HAL_TIMEx_HallSensor_Init PROC
;;;158      */
;;;159    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef* sConfig)
000002  b530              PUSH     {r4,r5,lr}
;;;160    {
000004  b087              SUB      sp,sp,#0x1c
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
;;;161      TIM_OC_InitTypeDef OC_Config;
;;;162        
;;;163      /* Check the TIM handle allocation */
;;;164      if(htim == NULL)
00000a  2c00              CMP      r4,#0
00000c  d050              BEQ      |L1.176|
;;;165      {
;;;166        return HAL_ERROR;
;;;167      }
;;;168      
;;;169      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;170      assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
;;;171      assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
;;;172      assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
;;;173      assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
;;;174      assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
;;;175    
;;;176      /* Set the TIM state */
;;;177      htim->State= HAL_TIM_STATE_BUSY;
00000e  2002              MOVS     r0,#2
000010  f8840039          STRB     r0,[r4,#0x39]
;;;178      
;;;179      /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;180      HAL_TIMEx_HallSensor_MspInit(htim);
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       HAL_TIMEx_HallSensor_MspInit
;;;181      
;;;182      /* Configure the Time base in the Encoder Mode */
;;;183      TIM_Base_SetConfig(htim->Instance, &htim->Init);
00001a  1d21              ADDS     r1,r4,#4
00001c  6820              LDR      r0,[r4,#0]
00001e  f7fffffe          BL       TIM_Base_SetConfig
;;;184      
;;;185      /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
;;;186      TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
000022  68ab              LDR      r3,[r5,#8]
000024  6829              LDR      r1,[r5,#0]
000026  2203              MOVS     r2,#3
000028  6820              LDR      r0,[r4,#0]
00002a  f7fffffe          BL       TIM_TI1_SetConfig
;;;187      
;;;188      /* Reset the IC1PSC Bits */
;;;189      htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
00002e  6820              LDR      r0,[r4,#0]
000030  6981              LDR      r1,[r0,#0x18]
000032  f021010c          BIC      r1,r1,#0xc
000036  6181              STR      r1,[r0,#0x18]
;;;190      /* Set the IC1PSC value */
;;;191      htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
000038  6820              LDR      r0,[r4,#0]
00003a  6981              LDR      r1,[r0,#0x18]
00003c  686a              LDR      r2,[r5,#4]
00003e  4311              ORRS     r1,r1,r2
000040  6181              STR      r1,[r0,#0x18]
;;;192      
;;;193      /* Enable the Hall sensor interface (XOR function of the three inputs) */
;;;194      htim->Instance->CR2 |= TIM_CR2_TI1S;
000042  6820              LDR      r0,[r4,#0]
000044  6841              LDR      r1,[r0,#4]
000046  f0410180          ORR      r1,r1,#0x80
00004a  6041              STR      r1,[r0,#4]
;;;195      
;;;196      /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
;;;197      htim->Instance->SMCR &= ~TIM_SMCR_TS;
00004c  6820              LDR      r0,[r4,#0]
00004e  6881              LDR      r1,[r0,#8]
000050  f0210170          BIC      r1,r1,#0x70
000054  6081              STR      r1,[r0,#8]
;;;198      htim->Instance->SMCR |= TIM_TS_TI1F_ED;
000056  6820              LDR      r0,[r4,#0]
000058  6881              LDR      r1,[r0,#8]
00005a  f0410140          ORR      r1,r1,#0x40
00005e  6081              STR      r1,[r0,#8]
;;;199      
;;;200      /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */  
;;;201      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
000060  6820              LDR      r0,[r4,#0]
000062  6881              LDR      r1,[r0,#8]
000064  f0210107          BIC      r1,r1,#7
000068  6081              STR      r1,[r0,#8]
;;;202      htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
00006a  6820              LDR      r0,[r4,#0]
00006c  6881              LDR      r1,[r0,#8]
00006e  f0410104          ORR      r1,r1,#4
000072  6081              STR      r1,[r0,#8]
;;;203      
;;;204      /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
;;;205      OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
000074  2000              MOVS     r0,#0
000076  9004              STR      r0,[sp,#0x10]
;;;206      OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
000078  9005              STR      r0,[sp,#0x14]
;;;207      OC_Config.OCMode = TIM_OCMODE_PWM2;
00007a  2170              MOVS     r1,#0x70
00007c  9100              STR      r1,[sp,#0]
;;;208      OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
00007e  9006              STR      r0,[sp,#0x18]
;;;209      OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
000080  9003              STR      r0,[sp,#0xc]
;;;210      OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
000082  9002              STR      r0,[sp,#8]
;;;211      OC_Config.Pulse = sConfig->Commutation_Delay; 
000084  68e8              LDR      r0,[r5,#0xc]
000086  9001              STR      r0,[sp,#4]
;;;212        
;;;213      TIM_OC2_SetConfig(htim->Instance, &OC_Config);
000088  4669              MOV      r1,sp
00008a  6820              LDR      r0,[r4,#0]
00008c  f7fffffe          BL       TIM_OC2_SetConfig
;;;214      
;;;215      /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
;;;216        register to 101 */
;;;217      htim->Instance->CR2 &= ~TIM_CR2_MMS;
000090  6820              LDR      r0,[r4,#0]
000092  6841              LDR      r1,[r0,#4]
000094  f0210170          BIC      r1,r1,#0x70
000098  6041              STR      r1,[r0,#4]
;;;218      htim->Instance->CR2 |= TIM_TRGO_OC2REF; 
00009a  6820              LDR      r0,[r4,#0]
00009c  6841              LDR      r1,[r0,#4]
00009e  f0410150          ORR      r1,r1,#0x50
0000a2  6041              STR      r1,[r0,#4]
;;;219      
;;;220      /* Initialize the TIM state*/
;;;221      htim->State= HAL_TIM_STATE_READY;
0000a4  2001              MOVS     r0,#1
0000a6  f8840039          STRB     r0,[r4,#0x39]
;;;222    
;;;223      return HAL_OK;
;;;224    }
0000aa  b007              ADD      sp,sp,#0x1c
0000ac  2000              MOVS     r0,#0                 ;223
0000ae  bd30              POP      {r4,r5,pc}
                  |L1.176|
0000b0  b007              ADD      sp,sp,#0x1c
0000b2  2001              MOVS     r0,#1                 ;166
0000b4  bd30              POP      {r4,r5,pc}
;;;225    
                          ENDP

                  HAL_TIMEx_HallSensor_MspDeInit PROC
;;;272      */
;;;273    __weak void HAL_TIMEx_HallSensor_MspDeInit(TIM_HandleTypeDef *htim)
0000b6  4770              BX       lr
;;;274    {
;;;275      /* NOTE : This function Should not be modified, when the callback is needed,
;;;276                the HAL_TIMEx_HallSensor_MspDeInit could be implemented in the user file
;;;277       */
;;;278    }
;;;279    
                          ENDP

                  HAL_TIMEx_HallSensor_DeInit PROC
;;;231      */
;;;232    HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim)
0000b8  b510              PUSH     {r4,lr}
;;;233    {
0000ba  4604              MOV      r4,r0
;;;234      /* Check the parameters */
;;;235      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;236    
;;;237      htim->State = HAL_TIM_STATE_BUSY;
0000bc  2002              MOVS     r0,#2
0000be  f8840039          STRB     r0,[r4,#0x39]
;;;238      
;;;239      /* Disable the TIM Peripheral Clock */
;;;240      __HAL_TIM_DISABLE(htim);
0000c2  6820              LDR      r0,[r4,#0]
0000c4  6a01              LDR      r1,[r0,#0x20]
0000c6  f2411211          MOV      r2,#0x1111
0000ca  4211              TST      r1,r2
0000cc  d107              BNE      |L1.222|
0000ce  6a01              LDR      r1,[r0,#0x20]
0000d0  1092              ASRS     r2,r2,#2
0000d2  4211              TST      r1,r2
0000d4  d103              BNE      |L1.222|
0000d6  6801              LDR      r1,[r0,#0]
0000d8  f0210101          BIC      r1,r1,#1
0000dc  6001              STR      r1,[r0,#0]
                  |L1.222|
;;;241        
;;;242      /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
;;;243      HAL_TIMEx_HallSensor_MspDeInit(htim);
0000de  4620              MOV      r0,r4
0000e0  f7fffffe          BL       HAL_TIMEx_HallSensor_MspDeInit
;;;244        
;;;245      /* Change TIM state */  
;;;246      htim->State = HAL_TIM_STATE_RESET; 
0000e4  2000              MOVS     r0,#0
0000e6  f8840039          STRB     r0,[r4,#0x39]
;;;247    
;;;248      /* Release Lock */
;;;249      __HAL_UNLOCK(htim);
0000ea  f8840038          STRB     r0,[r4,#0x38]
;;;250    
;;;251      return HAL_OK;
;;;252    }
0000ee  bd10              POP      {r4,pc}
;;;253    
                          ENDP

                  HAL_TIMEx_HallSensor_Start PROC
;;;285      */
;;;286    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
0000f0  b510              PUSH     {r4,lr}
;;;287    {
0000f2  4604              MOV      r4,r0
;;;288      /* Check the parameters */
;;;289      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;290      
;;;291      /* Enable the Input Capture channels 1
;;;292        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;293      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
0000f4  2201              MOVS     r2,#1
0000f6  2100              MOVS     r1,#0
0000f8  6820              LDR      r0,[r4,#0]
0000fa  f7fffffe          BL       TIM_CCxChannelCmd
;;;294      
;;;295      /* Enable the Peripheral */
;;;296      __HAL_TIM_ENABLE(htim);
0000fe  6820              LDR      r0,[r4,#0]
000100  6801              LDR      r1,[r0,#0]
000102  f0410101          ORR      r1,r1,#1
000106  6001              STR      r1,[r0,#0]
;;;297      
;;;298      /* Return function status */
;;;299      return HAL_OK;
000108  2000              MOVS     r0,#0
;;;300    }
00010a  bd10              POP      {r4,pc}
;;;301    
                          ENDP

                  HAL_TIMEx_HallSensor_Stop PROC
;;;307      */
;;;308    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
00010c  b510              PUSH     {r4,lr}
;;;309    {
00010e  4604              MOV      r4,r0
;;;310      /* Check the parameters */
;;;311      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;312      
;;;313      /* Disable the Input Capture channels 1, 2 and 3
;;;314        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;315      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
000110  2200              MOVS     r2,#0
000112  4611              MOV      r1,r2
000114  6820              LDR      r0,[r4,#0]
000116  f7fffffe          BL       TIM_CCxChannelCmd
;;;316    
;;;317      /* Disable the Peripheral */
;;;318      __HAL_TIM_DISABLE(htim);
00011a  6820              LDR      r0,[r4,#0]
00011c  6a01              LDR      r1,[r0,#0x20]
00011e  f2411211          MOV      r2,#0x1111
000122  4211              TST      r1,r2
000124  d107              BNE      |L1.310|
000126  6a01              LDR      r1,[r0,#0x20]
000128  1092              ASRS     r2,r2,#2
00012a  4211              TST      r1,r2
00012c  d103              BNE      |L1.310|
00012e  6801              LDR      r1,[r0,#0]
000130  f0210101          BIC      r1,r1,#1
000134  6001              STR      r1,[r0,#0]
                  |L1.310|
;;;319      
;;;320      /* Return function status */
;;;321      return HAL_OK;
000136  2000              MOVS     r0,#0
;;;322    }
000138  bd10              POP      {r4,pc}
;;;323    
                          ENDP

                  HAL_TIMEx_HallSensor_Start_IT PROC
;;;329      */
;;;330    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
00013a  b510              PUSH     {r4,lr}
;;;331    { 
00013c  4604              MOV      r4,r0
;;;332      /* Check the parameters */
;;;333      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;334      
;;;335      /* Enable the capture compare Interrupts 1 event */
;;;336      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
00013e  6820              LDR      r0,[r4,#0]
000140  68c1              LDR      r1,[r0,#0xc]
000142  f0410102          ORR      r1,r1,#2
000146  60c1              STR      r1,[r0,#0xc]
;;;337      
;;;338      /* Enable the Input Capture channels 1
;;;339        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;340      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);  
000148  2201              MOVS     r2,#1
00014a  2100              MOVS     r1,#0
00014c  6820              LDR      r0,[r4,#0]
00014e  f7fffffe          BL       TIM_CCxChannelCmd
;;;341      
;;;342      /* Enable the Peripheral */
;;;343      __HAL_TIM_ENABLE(htim);
000152  6820              LDR      r0,[r4,#0]
000154  6801              LDR      r1,[r0,#0]
000156  f0410101          ORR      r1,r1,#1
00015a  6001              STR      r1,[r0,#0]
;;;344      
;;;345      /* Return function status */
;;;346      return HAL_OK;
00015c  2000              MOVS     r0,#0
;;;347    }
00015e  bd10              POP      {r4,pc}
;;;348    
                          ENDP

                  HAL_TIMEx_HallSensor_Stop_IT PROC
;;;354      */
;;;355    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_IT(TIM_HandleTypeDef *htim)
000160  b510              PUSH     {r4,lr}
;;;356    {
000162  4604              MOV      r4,r0
;;;357      /* Check the parameters */
;;;358      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;359      
;;;360      /* Disable the Input Capture channels 1
;;;361        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;362      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
000164  2200              MOVS     r2,#0
000166  4611              MOV      r1,r2
000168  6820              LDR      r0,[r4,#0]
00016a  f7fffffe          BL       TIM_CCxChannelCmd
;;;363      
;;;364      /* Disable the capture compare Interrupts event */
;;;365      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
00016e  6820              LDR      r0,[r4,#0]
000170  68c1              LDR      r1,[r0,#0xc]
000172  f0210102          BIC      r1,r1,#2
000176  60c1              STR      r1,[r0,#0xc]
;;;366      
;;;367      /* Disable the Peripheral */
;;;368      __HAL_TIM_DISABLE(htim);
000178  6820              LDR      r0,[r4,#0]
00017a  6a01              LDR      r1,[r0,#0x20]
00017c  f2411211          MOV      r2,#0x1111
000180  4211              TST      r1,r2
000182  d107              BNE      |L1.404|
000184  6a01              LDR      r1,[r0,#0x20]
000186  1092              ASRS     r2,r2,#2
000188  4211              TST      r1,r2
00018a  d103              BNE      |L1.404|
00018c  6801              LDR      r1,[r0,#0]
00018e  f0210101          BIC      r1,r1,#1
000192  6001              STR      r1,[r0,#0]
                  |L1.404|
;;;369      
;;;370      /* Return function status */
;;;371      return HAL_OK;
000194  2000              MOVS     r0,#0
;;;372    }
000196  bd10              POP      {r4,pc}
;;;373    
                          ENDP

                  HAL_TIMEx_HallSensor_Start_DMA PROC
;;;381      */
;;;382    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
000198  b570              PUSH     {r4-r6,lr}
;;;383    {
00019a  4604              MOV      r4,r0
00019c  460d              MOV      r5,r1
00019e  4616              MOV      r6,r2
;;;384      /* Check the parameters */
;;;385      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;386      
;;;387       if((htim->State == HAL_TIM_STATE_BUSY))
0001a0  f8940039          LDRB     r0,[r4,#0x39]
0001a4  2802              CMP      r0,#2
0001a6  d004              BEQ      |L1.434|
;;;388      {
;;;389         return HAL_BUSY;
;;;390      }
;;;391      else if((htim->State == HAL_TIM_STATE_READY))
0001a8  f8940039          LDRB     r0,[r4,#0x39]
0001ac  2801              CMP      r0,#1
0001ae  d002              BEQ      |L1.438|
0001b0  e008              B        |L1.452|
                  |L1.434|
0001b2  2002              MOVS     r0,#2                 ;389
;;;392      {
;;;393        if(((uint32_t)pData == 0 ) && (Length > 0)) 
;;;394        {
;;;395          return HAL_ERROR;                                    
;;;396        }
;;;397        else
;;;398        {
;;;399          htim->State = HAL_TIM_STATE_BUSY;
;;;400        }
;;;401      }
;;;402      /* Enable the Input Capture channels 1
;;;403        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;404      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
;;;405      
;;;406      /* Set the DMA Input Capture 1 Callback */
;;;407      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;     
;;;408      /* Set the DMA error callback */
;;;409      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;410      
;;;411      /* Enable the DMA Stream for Capture 1*/
;;;412      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);    
;;;413      
;;;414      /* Enable the capture compare 1 Interrupt */
;;;415      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;416     
;;;417      /* Enable the Peripheral */
;;;418      __HAL_TIM_ENABLE(htim);
;;;419      
;;;420      /* Return function status */
;;;421      return HAL_OK;
;;;422    }
0001b4  bd70              POP      {r4-r6,pc}
                  |L1.438|
0001b6  b915              CBNZ     r5,|L1.446|
0001b8  b10e              CBZ      r6,|L1.446|
0001ba  2001              MOVS     r0,#1                 ;395
0001bc  bd70              POP      {r4-r6,pc}
                  |L1.446|
0001be  2002              MOVS     r0,#2                 ;399
0001c0  f8840039          STRB     r0,[r4,#0x39]         ;399
                  |L1.452|
0001c4  2201              MOVS     r2,#1                 ;404
0001c6  2100              MOVS     r1,#0                 ;404
0001c8  6820              LDR      r0,[r4,#0]            ;404
0001ca  f7fffffe          BL       TIM_CCxChannelCmd
0001ce  6a21              LDR      r1,[r4,#0x20]         ;407
0001d0  48f6              LDR      r0,|L1.1452|
0001d2  63c8              STR      r0,[r1,#0x3c]         ;407
0001d4  6a21              LDR      r1,[r4,#0x20]         ;409
0001d6  48f6              LDR      r0,|L1.1456|
0001d8  6488              STR      r0,[r1,#0x48]         ;409
0001da  6820              LDR      r0,[r4,#0]            ;412
0001dc  4633              MOV      r3,r6                 ;412
0001de  f1000134          ADD      r1,r0,#0x34           ;412
0001e2  462a              MOV      r2,r5                 ;412
0001e4  6a20              LDR      r0,[r4,#0x20]         ;412
0001e6  f7fffffe          BL       HAL_DMA_Start_IT
0001ea  6820              LDR      r0,[r4,#0]            ;415
0001ec  68c1              LDR      r1,[r0,#0xc]          ;415
0001ee  f4417100          ORR      r1,r1,#0x200          ;415
0001f2  60c1              STR      r1,[r0,#0xc]          ;415
0001f4  6820              LDR      r0,[r4,#0]            ;418
0001f6  6801              LDR      r1,[r0,#0]            ;418
0001f8  f0410101          ORR      r1,r1,#1              ;418
0001fc  6001              STR      r1,[r0,#0]            ;418
0001fe  2000              MOVS     r0,#0                 ;421
000200  bd70              POP      {r4-r6,pc}
;;;423    
                          ENDP

                  HAL_TIMEx_HallSensor_Stop_DMA PROC
;;;429      */
;;;430    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_DMA(TIM_HandleTypeDef *htim)
000202  b510              PUSH     {r4,lr}
;;;431    {
000204  4604              MOV      r4,r0
;;;432      /* Check the parameters */
;;;433      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;434      
;;;435      /* Disable the Input Capture channels 1
;;;436        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;437      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
000206  2200              MOVS     r2,#0
000208  4611              MOV      r1,r2
00020a  6820              LDR      r0,[r4,#0]
00020c  f7fffffe          BL       TIM_CCxChannelCmd
;;;438     
;;;439      
;;;440      /* Disable the capture compare Interrupts 1 event */
;;;441      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000210  6820              LDR      r0,[r4,#0]
000212  68c1              LDR      r1,[r0,#0xc]
000214  f4217100          BIC      r1,r1,#0x200
000218  60c1              STR      r1,[r0,#0xc]
;;;442     
;;;443      /* Disable the Peripheral */
;;;444      __HAL_TIM_DISABLE(htim);
00021a  6820              LDR      r0,[r4,#0]
00021c  6a01              LDR      r1,[r0,#0x20]
00021e  f2411211          MOV      r2,#0x1111
000222  4211              TST      r1,r2
000224  d107              BNE      |L1.566|
000226  6a01              LDR      r1,[r0,#0x20]
000228  1092              ASRS     r2,r2,#2
00022a  4211              TST      r1,r2
00022c  d103              BNE      |L1.566|
00022e  6801              LDR      r1,[r0,#0]
000230  f0210101          BIC      r1,r1,#1
000234  6001              STR      r1,[r0,#0]
                  |L1.566|
;;;445      
;;;446      /* Return function status */
;;;447      return HAL_OK;
000236  2000              MOVS     r0,#0
;;;448    }
000238  bd10              POP      {r4,pc}
;;;449    /**
                          ENDP

                  _Z18TIM_CCxNChannelCmdP11TIM_TypeDefjj PROC ; TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
;;;1834     */
;;;1835   static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
00023a  2304              MOVS     r3,#4
;;;1836   {
;;;1837     uint32_t tmp = 0;
;;;1838   
;;;1839     /* Check the parameters */
;;;1840     assert_param(IS_TIM_CC4_INSTANCE(TIMx));
;;;1841     assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));
;;;1842   
;;;1843     tmp = TIM_CCER_CC1NE << Channel;
00023c  408b              LSLS     r3,r3,r1
;;;1844   
;;;1845     /* Reset the CCxNE Bit */
;;;1846     TIMx->CCER &= ~tmp;
00023e  f8d0c020          LDR      r12,[r0,#0x20]
000242  ea2c0303          BIC      r3,r12,r3
000246  6203              STR      r3,[r0,#0x20]
;;;1847   
;;;1848     /* Set or reset the CCxNE Bit */ 
;;;1849     TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
000248  6a03              LDR      r3,[r0,#0x20]
00024a  fa02f101          LSL      r1,r2,r1
00024e  4319              ORRS     r1,r1,r3
000250  6201              STR      r1,[r0,#0x20]
;;;1850   }
000252  4770              BX       lr
;;;1851   
                          ENDP

                  HAL_TIMEx_OCN_Start PROC
;;;485      */
;;;486    HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
000254  b510              PUSH     {r4,lr}
;;;487    {
000256  4604              MOV      r4,r0
;;;488      /* Check the parameters */
;;;489      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;490      
;;;491         /* Enable the Capture compare channel N */
;;;492         TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
000258  2204              MOVS     r2,#4
00025a  6820              LDR      r0,[r4,#0]
00025c  f7fffffe          BL       _Z18TIM_CCxNChannelCmdP11TIM_TypeDefjj ; TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
;;;493        
;;;494      /* Enable the Main Output */
;;;495        __HAL_TIM_MOE_ENABLE(htim);
000260  6820              LDR      r0,[r4,#0]
000262  6c41              LDR      r1,[r0,#0x44]
000264  f4414100          ORR      r1,r1,#0x8000
000268  6441              STR      r1,[r0,#0x44]
;;;496    
;;;497      /* Enable the Peripheral */
;;;498      __HAL_TIM_ENABLE(htim);
00026a  6820              LDR      r0,[r4,#0]
00026c  6801              LDR      r1,[r0,#0]
00026e  f0410101          ORR      r1,r1,#1
000272  6001              STR      r1,[r0,#0]
;;;499      
;;;500      /* Return function status */
;;;501      return HAL_OK;
000274  2000              MOVS     r0,#0
;;;502    } 
000276  bd10              POP      {r4,pc}
;;;503    
                          ENDP

                  HAL_TIMEx_OCN_Stop PROC
;;;516      */
;;;517    HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000278  b510              PUSH     {r4,lr}
;;;518    { 
00027a  4604              MOV      r4,r0
;;;519      /* Check the parameters */
;;;520      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;521      
;;;522        /* Disable the Capture compare channel N */
;;;523      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
00027c  2200              MOVS     r2,#0
00027e  6820              LDR      r0,[r4,#0]
000280  f7fffffe          BL       _Z18TIM_CCxNChannelCmdP11TIM_TypeDefjj ; TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
;;;524        
;;;525      /* Disable the Main Output */
;;;526        __HAL_TIM_MOE_DISABLE(htim);
000284  6821              LDR      r1,[r4,#0]
000286  6a08              LDR      r0,[r1,#0x20]
000288  f2411211          MOV      r2,#0x1111
00028c  4210              TST      r0,r2
00028e  f2404344          MOV      r3,#0x444
000292  d106              BNE      |L1.674|
000294  6a08              LDR      r0,[r1,#0x20]
000296  4218              TST      r0,r3
000298  d103              BNE      |L1.674|
00029a  6c48              LDR      r0,[r1,#0x44]
00029c  f4204000          BIC      r0,r0,#0x8000
0002a0  6448              STR      r0,[r1,#0x44]
                  |L1.674|
;;;527    
;;;528      /* Disable the Peripheral */
;;;529      __HAL_TIM_DISABLE(htim);
0002a2  6820              LDR      r0,[r4,#0]
0002a4  6a01              LDR      r1,[r0,#0x20]
0002a6  4211              TST      r1,r2
0002a8  d106              BNE      |L1.696|
0002aa  6a01              LDR      r1,[r0,#0x20]
0002ac  4219              TST      r1,r3
0002ae  d103              BNE      |L1.696|
0002b0  6801              LDR      r1,[r0,#0]
0002b2  f0210101          BIC      r1,r1,#1
0002b6  6001              STR      r1,[r0,#0]
                  |L1.696|
;;;530      
;;;531      /* Return function status */
;;;532      return HAL_OK;
0002b8  2000              MOVS     r0,#0
;;;533    } 
0002ba  bd10              POP      {r4,pc}
;;;534    
                          ENDP

                  HAL_TIMEx_OCN_Start_IT PROC
;;;547      */
;;;548    HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
0002bc  b510              PUSH     {r4,lr}
;;;549    {
0002be  4604              MOV      r4,r0
;;;550      /* Check the parameters */
;;;551      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;552      
;;;553      switch (Channel)
0002c0  2900              CMP      r1,#0
;;;554      {
;;;555        case TIM_CHANNEL_1:
;;;556        {       
;;;557          /* Enable the TIM Output Compare interrupt */
;;;558          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
0002c2  6822              LDR      r2,[r4,#0]
0002c4  d006              BEQ      |L1.724|
0002c6  2904              CMP      r1,#4                 ;553
0002c8  d009              BEQ      |L1.734|
0002ca  2908              CMP      r1,#8                 ;553
0002cc  d00c              BEQ      |L1.744|
0002ce  290c              CMP      r1,#0xc               ;553
0002d0  d113              BNE      |L1.762|
0002d2  e00e              B        |L1.754|
                  |L1.724|
0002d4  68d0              LDR      r0,[r2,#0xc]
0002d6  f0400002          ORR      r0,r0,#2
0002da  60d0              STR      r0,[r2,#0xc]
;;;559        }
;;;560        break;
0002dc  e00d              B        |L1.762|
                  |L1.734|
;;;561        
;;;562        case TIM_CHANNEL_2:
;;;563        {
;;;564          /* Enable the TIM Output Compare interrupt */
;;;565          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
0002de  68d0              LDR      r0,[r2,#0xc]
0002e0  f0400004          ORR      r0,r0,#4
0002e4  60d0              STR      r0,[r2,#0xc]
;;;566        }
;;;567        break;
0002e6  e008              B        |L1.762|
                  |L1.744|
;;;568        
;;;569        case TIM_CHANNEL_3:
;;;570        {
;;;571          /* Enable the TIM Output Compare interrupt */
;;;572          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
0002e8  68d0              LDR      r0,[r2,#0xc]
0002ea  f0400008          ORR      r0,r0,#8
0002ee  60d0              STR      r0,[r2,#0xc]
;;;573        }
;;;574        break;
0002f0  e003              B        |L1.762|
                  |L1.754|
;;;575        
;;;576        case TIM_CHANNEL_4:
;;;577        {
;;;578          /* Enable the TIM Output Compare interrupt */
;;;579          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
0002f2  68d0              LDR      r0,[r2,#0xc]
0002f4  f0400010          ORR      r0,r0,#0x10
0002f8  60d0              STR      r0,[r2,#0xc]
                  |L1.762|
;;;580        }
;;;581        break;
;;;582        
;;;583        default:
;;;584        break;
;;;585      } 
;;;586      
;;;587      /* Enable the TIM Break interrupt */
;;;588      __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
0002fa  6820              LDR      r0,[r4,#0]
0002fc  68c2              LDR      r2,[r0,#0xc]
0002fe  f0420280          ORR      r2,r2,#0x80
000302  60c2              STR      r2,[r0,#0xc]
;;;589      
;;;590      /* Enable the Capture compare channel N */
;;;591      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
000304  2204              MOVS     r2,#4
000306  6820              LDR      r0,[r4,#0]
000308  f7fffffe          BL       _Z18TIM_CCxNChannelCmdP11TIM_TypeDefjj ; TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
;;;592      
;;;593      /* Enable the Main Output */
;;;594      __HAL_TIM_MOE_ENABLE(htim);
00030c  6820              LDR      r0,[r4,#0]
00030e  6c41              LDR      r1,[r0,#0x44]
000310  f4414100          ORR      r1,r1,#0x8000
000314  6441              STR      r1,[r0,#0x44]
;;;595      
;;;596      /* Enable the Peripheral */
;;;597      __HAL_TIM_ENABLE(htim);
000316  6820              LDR      r0,[r4,#0]
000318  6801              LDR      r1,[r0,#0]
00031a  f0410101          ORR      r1,r1,#1
00031e  6001              STR      r1,[r0,#0]
;;;598      
;;;599      /* Return function status */
;;;600      return HAL_OK;
000320  2000              MOVS     r0,#0
;;;601    } 
000322  bd10              POP      {r4,pc}
;;;602    
                          ENDP

                  HAL_TIMEx_OCN_Stop_IT PROC
;;;615      */
;;;616    HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000324  b510              PUSH     {r4,lr}
;;;617    {
000326  4604              MOV      r4,r0
;;;618      /* Check the parameters */
;;;619      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;620      
;;;621      switch (Channel)
000328  2900              CMP      r1,#0
;;;622      {
;;;623        case TIM_CHANNEL_1:
;;;624        {       
;;;625          /* Disable the TIM Output Compare interrupt */
;;;626          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
00032a  6822              LDR      r2,[r4,#0]
00032c  d006              BEQ      |L1.828|
00032e  2904              CMP      r1,#4                 ;621
000330  d009              BEQ      |L1.838|
000332  2908              CMP      r1,#8                 ;621
000334  d00c              BEQ      |L1.848|
000336  290c              CMP      r1,#0xc               ;621
000338  d113              BNE      |L1.866|
00033a  e00e              B        |L1.858|
                  |L1.828|
00033c  68d0              LDR      r0,[r2,#0xc]
00033e  f0200002          BIC      r0,r0,#2
000342  60d0              STR      r0,[r2,#0xc]
;;;627        }
;;;628        break;
000344  e00d              B        |L1.866|
                  |L1.838|
;;;629        
;;;630        case TIM_CHANNEL_2:
;;;631        {
;;;632          /* Disable the TIM Output Compare interrupt */
;;;633          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000346  68d0              LDR      r0,[r2,#0xc]
000348  f0200004          BIC      r0,r0,#4
00034c  60d0              STR      r0,[r2,#0xc]
;;;634        }
;;;635        break;
00034e  e008              B        |L1.866|
                  |L1.848|
;;;636        
;;;637        case TIM_CHANNEL_3:
;;;638        {
;;;639          /* Disable the TIM Output Compare interrupt */
;;;640          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
000350  68d0              LDR      r0,[r2,#0xc]
000352  f0200008          BIC      r0,r0,#8
000356  60d0              STR      r0,[r2,#0xc]
;;;641        }
;;;642        break;
000358  e003              B        |L1.866|
                  |L1.858|
;;;643        
;;;644        case TIM_CHANNEL_4:
;;;645        {
;;;646          /* Disable the TIM Output Compare interrupt */
;;;647          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
00035a  68d0              LDR      r0,[r2,#0xc]
00035c  f0200010          BIC      r0,r0,#0x10
000360  60d0              STR      r0,[r2,#0xc]
                  |L1.866|
;;;648        }
;;;649        break;
;;;650        
;;;651        default:
;;;652        break; 
;;;653      }
;;;654      
;;;655      /* Disable the Capture compare channel N */
;;;656      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000362  2200              MOVS     r2,#0
000364  6820              LDR      r0,[r4,#0]
000366  f7fffffe          BL       _Z18TIM_CCxNChannelCmdP11TIM_TypeDefjj ; TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
;;;657    
;;;658      /* Disable the TIM Break interrupt (only if no more channel is active) */
;;;659      if((READ_REG(htim->Instance->CCER) & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
00036a  6820              LDR      r0,[r4,#0]
00036c  6a01              LDR      r1,[r0,#0x20]
00036e  f2404244          MOV      r2,#0x444
000372  4211              TST      r1,r2
000374  d103              BNE      |L1.894|
;;;660      {
;;;661        __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
000376  68c1              LDR      r1,[r0,#0xc]
000378  f0210180          BIC      r1,r1,#0x80
00037c  60c1              STR      r1,[r0,#0xc]
                  |L1.894|
;;;662      }
;;;663      
;;;664      /* Disable the Main Output */
;;;665      __HAL_TIM_MOE_DISABLE(htim);
00037e  6820              LDR      r0,[r4,#0]
000380  6a03              LDR      r3,[r0,#0x20]
000382  f2411111          MOV      r1,#0x1111
000386  420b              TST      r3,r1
000388  d106              BNE      |L1.920|
00038a  6a03              LDR      r3,[r0,#0x20]
00038c  4213              TST      r3,r2
00038e  d103              BNE      |L1.920|
000390  6c43              LDR      r3,[r0,#0x44]
000392  f4234300          BIC      r3,r3,#0x8000
000396  6443              STR      r3,[r0,#0x44]
                  |L1.920|
;;;666      
;;;667      /* Disable the Peripheral */
;;;668      __HAL_TIM_DISABLE(htim);
000398  6820              LDR      r0,[r4,#0]
00039a  6a03              LDR      r3,[r0,#0x20]
00039c  420b              TST      r3,r1
00039e  d106              BNE      |L1.942|
0003a0  6a01              LDR      r1,[r0,#0x20]
0003a2  4211              TST      r1,r2
0003a4  d103              BNE      |L1.942|
0003a6  6801              LDR      r1,[r0,#0]
0003a8  f0210101          BIC      r1,r1,#1
0003ac  6001              STR      r1,[r0,#0]
                  |L1.942|
;;;669      
;;;670      /* Return function status */
;;;671      return HAL_OK;
0003ae  2000              MOVS     r0,#0
;;;672    } 
0003b0  bd10              POP      {r4,pc}
;;;673    
                          ENDP

                  HAL_TIMEx_OCN_Start_DMA PROC
;;;688      */
;;;689    HAL_StatusTypeDef HAL_TIMEx_OCN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
0003b2  b570              PUSH     {r4-r6,lr}
;;;690    {
0003b4  4604              MOV      r4,r0
0003b6  460d              MOV      r5,r1
0003b8  4694              MOV      r12,r2
;;;691      /* Check the parameters */
;;;692      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;693      
;;;694      if((htim->State == HAL_TIM_STATE_BUSY))
0003ba  f8940039          LDRB     r0,[r4,#0x39]
0003be  2802              CMP      r0,#2
0003c0  d004              BEQ      |L1.972|
;;;695      {
;;;696         return HAL_BUSY;
;;;697      }
;;;698      else if((htim->State == HAL_TIM_STATE_READY))
0003c2  f8940039          LDRB     r0,[r4,#0x39]
0003c6  2801              CMP      r0,#1
0003c8  d002              BEQ      |L1.976|
0003ca  e00a              B        |L1.994|
                  |L1.972|
0003cc  2002              MOVS     r0,#2                 ;696
;;;699      {
;;;700        if(((uint32_t)pData == 0 ) && (Length > 0)) 
;;;701        {
;;;702          return HAL_ERROR;                                    
;;;703        }
;;;704        else
;;;705        {
;;;706          htim->State = HAL_TIM_STATE_BUSY;
;;;707        }
;;;708      }    
;;;709      switch (Channel)
;;;710      {
;;;711        case TIM_CHANNEL_1:
;;;712        {      
;;;713          /* Set the DMA Period elapsed callback */
;;;714          htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;715         
;;;716          /* Set the DMA error callback */
;;;717          htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;718          
;;;719          /* Enable the DMA Stream */
;;;720          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
;;;721          
;;;722          /* Enable the TIM Output Compare DMA request */
;;;723          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;724        }
;;;725        break;
;;;726        
;;;727        case TIM_CHANNEL_2:
;;;728        {
;;;729          /* Set the DMA Period elapsed callback */
;;;730          htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;731         
;;;732          /* Set the DMA error callback */
;;;733          htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
;;;734          
;;;735          /* Enable the DMA Stream */
;;;736          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
;;;737          
;;;738          /* Enable the TIM Output Compare DMA request */
;;;739          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;740        }
;;;741        break;
;;;742        
;;;743        case TIM_CHANNEL_3:
;;;744    {
;;;745          /* Set the DMA Period elapsed callback */
;;;746          htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;747         
;;;748          /* Set the DMA error callback */
;;;749          htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
;;;750          
;;;751          /* Enable the DMA Stream */
;;;752          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
;;;753          
;;;754          /* Enable the TIM Output Compare DMA request */
;;;755          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
;;;756        }
;;;757        break;
;;;758        
;;;759        case TIM_CHANNEL_4:
;;;760        {
;;;761         /* Set the DMA Period elapsed callback */
;;;762          htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;763         
;;;764          /* Set the DMA error callback */
;;;765          htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
;;;766          
;;;767          /* Enable the DMA Stream */
;;;768          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
;;;769          
;;;770          /* Enable the TIM Output Compare DMA request */
;;;771          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
;;;772        }
;;;773        break;
;;;774        
;;;775        default:
;;;776        break;
;;;777      }
;;;778    
;;;779      /* Enable the Capture compare channel N */
;;;780      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;781      
;;;782      /* Enable the Main Output */
;;;783      __HAL_TIM_MOE_ENABLE(htim);
;;;784      
;;;785      /* Enable the Peripheral */
;;;786      __HAL_TIM_ENABLE(htim); 
;;;787      
;;;788      /* Return function status */
;;;789      return HAL_OK;
;;;790    }
0003ce  bd70              POP      {r4-r6,pc}
                  |L1.976|
0003d0  f1bc0f00          CMP      r12,#0                ;700
0003d4  d102              BNE      |L1.988|
0003d6  b10b              CBZ      r3,|L1.988|
0003d8  2001              MOVS     r0,#1                 ;702
0003da  bd70              POP      {r4-r6,pc}
                  |L1.988|
0003dc  2002              MOVS     r0,#2                 ;706
0003de  f8840039          STRB     r0,[r4,#0x39]         ;706
                  |L1.994|
0003e2  4874              LDR      r0,|L1.1460|
0003e4  4972              LDR      r1,|L1.1456|
0003e6  b135              CBZ      r5,|L1.1014|
0003e8  2d04              CMP      r5,#4                 ;709
0003ea  d015              BEQ      |L1.1048|
0003ec  2d08              CMP      r5,#8                 ;709
0003ee  d024              BEQ      |L1.1082|
0003f0  2d0c              CMP      r5,#0xc               ;709
0003f2  d143              BNE      |L1.1148|
0003f4  e032              B        |L1.1116|
                  |L1.1014|
0003f6  6a22              LDR      r2,[r4,#0x20]         ;714
0003f8  63d0              STR      r0,[r2,#0x3c]         ;714
0003fa  6a20              LDR      r0,[r4,#0x20]         ;717
0003fc  6481              STR      r1,[r0,#0x48]         ;717
0003fe  6820              LDR      r0,[r4,#0]            ;720
000400  4661              MOV      r1,r12                ;720
000402  f1000234          ADD      r2,r0,#0x34           ;720
000406  6a20              LDR      r0,[r4,#0x20]         ;720
000408  f7fffffe          BL       HAL_DMA_Start_IT
00040c  6820              LDR      r0,[r4,#0]            ;723
00040e  68c1              LDR      r1,[r0,#0xc]          ;723
000410  f4417100          ORR      r1,r1,#0x200          ;723
000414  60c1              STR      r1,[r0,#0xc]          ;723
000416  e031              B        |L1.1148|
                  |L1.1048|
000418  6a62              LDR      r2,[r4,#0x24]         ;730
00041a  63d0              STR      r0,[r2,#0x3c]         ;730
00041c  6a60              LDR      r0,[r4,#0x24]         ;733
00041e  6481              STR      r1,[r0,#0x48]         ;733
000420  6820              LDR      r0,[r4,#0]            ;736
000422  4661              MOV      r1,r12                ;736
000424  f1000238          ADD      r2,r0,#0x38           ;736
000428  6a60              LDR      r0,[r4,#0x24]         ;736
00042a  f7fffffe          BL       HAL_DMA_Start_IT
00042e  6820              LDR      r0,[r4,#0]            ;739
000430  68c1              LDR      r1,[r0,#0xc]          ;739
000432  f4416180          ORR      r1,r1,#0x400          ;739
000436  60c1              STR      r1,[r0,#0xc]          ;739
000438  e020              B        |L1.1148|
                  |L1.1082|
00043a  6aa2              LDR      r2,[r4,#0x28]         ;746
00043c  63d0              STR      r0,[r2,#0x3c]         ;746
00043e  6aa0              LDR      r0,[r4,#0x28]         ;749
000440  6481              STR      r1,[r0,#0x48]         ;749
000442  6820              LDR      r0,[r4,#0]            ;752
000444  4661              MOV      r1,r12                ;752
000446  f100023c          ADD      r2,r0,#0x3c           ;752
00044a  6aa0              LDR      r0,[r4,#0x28]         ;752
00044c  f7fffffe          BL       HAL_DMA_Start_IT
000450  6820              LDR      r0,[r4,#0]            ;755
000452  68c1              LDR      r1,[r0,#0xc]          ;755
000454  f4416100          ORR      r1,r1,#0x800          ;755
000458  60c1              STR      r1,[r0,#0xc]          ;755
00045a  e00f              B        |L1.1148|
                  |L1.1116|
00045c  6ae2              LDR      r2,[r4,#0x2c]         ;762
00045e  63d0              STR      r0,[r2,#0x3c]         ;762
000460  6ae0              LDR      r0,[r4,#0x2c]         ;765
000462  6481              STR      r1,[r0,#0x48]         ;765
000464  6820              LDR      r0,[r4,#0]            ;768
000466  4661              MOV      r1,r12                ;768
000468  f1000240          ADD      r2,r0,#0x40           ;768
00046c  6ae0              LDR      r0,[r4,#0x2c]         ;768
00046e  f7fffffe          BL       HAL_DMA_Start_IT
000472  6820              LDR      r0,[r4,#0]            ;771
000474  68c1              LDR      r1,[r0,#0xc]          ;771
000476  f4415180          ORR      r1,r1,#0x1000         ;771
00047a  60c1              STR      r1,[r0,#0xc]          ;771
                  |L1.1148|
00047c  2204              MOVS     r2,#4                 ;780
00047e  4629              MOV      r1,r5                 ;780
000480  6820              LDR      r0,[r4,#0]            ;780
000482  f7fffffe          BL       _Z18TIM_CCxNChannelCmdP11TIM_TypeDefjj ; TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
000486  6820              LDR      r0,[r4,#0]            ;783
000488  6c41              LDR      r1,[r0,#0x44]         ;783
00048a  f4414100          ORR      r1,r1,#0x8000         ;783
00048e  6441              STR      r1,[r0,#0x44]         ;783
000490  6820              LDR      r0,[r4,#0]            ;786
000492  6801              LDR      r1,[r0,#0]            ;786
000494  f0410101          ORR      r1,r1,#1              ;786
000498  6001              STR      r1,[r0,#0]            ;786
00049a  2000              MOVS     r0,#0                 ;789
00049c  bd70              POP      {r4-r6,pc}
;;;791    
                          ENDP

                  HAL_TIMEx_OCN_Stop_DMA PROC
;;;804      */
;;;805    HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
00049e  b510              PUSH     {r4,lr}
;;;806    {
0004a0  4604              MOV      r4,r0
;;;807      /* Check the parameters */
;;;808      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;809      
;;;810      switch (Channel)
0004a2  2900              CMP      r1,#0
;;;811      {
;;;812        case TIM_CHANNEL_1:
;;;813        {       
;;;814          /* Disable the TIM Output Compare DMA request */
;;;815          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
0004a4  6822              LDR      r2,[r4,#0]
0004a6  d006              BEQ      |L1.1206|
0004a8  2904              CMP      r1,#4                 ;810
0004aa  d009              BEQ      |L1.1216|
0004ac  2908              CMP      r1,#8                 ;810
0004ae  d00c              BEQ      |L1.1226|
0004b0  290c              CMP      r1,#0xc               ;810
0004b2  d113              BNE      |L1.1244|
0004b4  e00e              B        |L1.1236|
                  |L1.1206|
0004b6  68d0              LDR      r0,[r2,#0xc]
0004b8  f4207000          BIC      r0,r0,#0x200
0004bc  60d0              STR      r0,[r2,#0xc]
;;;816        }
;;;817        break;
0004be  e00d              B        |L1.1244|
                  |L1.1216|
;;;818        
;;;819        case TIM_CHANNEL_2:
;;;820        {
;;;821          /* Disable the TIM Output Compare DMA request */
;;;822          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
0004c0  68d0              LDR      r0,[r2,#0xc]
0004c2  f4206080          BIC      r0,r0,#0x400
0004c6  60d0              STR      r0,[r2,#0xc]
;;;823        }
;;;824        break;
0004c8  e008              B        |L1.1244|
                  |L1.1226|
;;;825        
;;;826        case TIM_CHANNEL_3:
;;;827        {
;;;828          /* Disable the TIM Output Compare DMA request */
;;;829          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
0004ca  68d0              LDR      r0,[r2,#0xc]
0004cc  f4206000          BIC      r0,r0,#0x800
0004d0  60d0              STR      r0,[r2,#0xc]
;;;830        }
;;;831        break;
0004d2  e003              B        |L1.1244|
                  |L1.1236|
;;;832        
;;;833        case TIM_CHANNEL_4:
;;;834        {
;;;835          /* Disable the TIM Output Compare interrupt */
;;;836          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
0004d4  68d0              LDR      r0,[r2,#0xc]
0004d6  f4205080          BIC      r0,r0,#0x1000
0004da  60d0              STR      r0,[r2,#0xc]
                  |L1.1244|
;;;837        }
;;;838        break;
;;;839        
;;;840        default:
;;;841        break;
;;;842      } 
;;;843      
;;;844      /* Disable the Capture compare channel N */
;;;845      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
0004dc  2200              MOVS     r2,#0
0004de  6820              LDR      r0,[r4,#0]
0004e0  f7fffffe          BL       _Z18TIM_CCxNChannelCmdP11TIM_TypeDefjj ; TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
;;;846      
;;;847      /* Disable the Main Output */
;;;848      __HAL_TIM_MOE_DISABLE(htim);
0004e4  6820              LDR      r0,[r4,#0]
0004e6  6a02              LDR      r2,[r0,#0x20]
0004e8  f2411111          MOV      r1,#0x1111
0004ec  420a              TST      r2,r1
0004ee  f2404244          MOV      r2,#0x444
0004f2  d106              BNE      |L1.1282|
0004f4  6a03              LDR      r3,[r0,#0x20]
0004f6  4213              TST      r3,r2
0004f8  d103              BNE      |L1.1282|
0004fa  6c43              LDR      r3,[r0,#0x44]
0004fc  f4234300          BIC      r3,r3,#0x8000
000500  6443              STR      r3,[r0,#0x44]
                  |L1.1282|
;;;849      
;;;850      /* Disable the Peripheral */
;;;851      __HAL_TIM_DISABLE(htim);
000502  6820              LDR      r0,[r4,#0]
000504  6a03              LDR      r3,[r0,#0x20]
000506  420b              TST      r3,r1
000508  d106              BNE      |L1.1304|
00050a  6a01              LDR      r1,[r0,#0x20]
00050c  4211              TST      r1,r2
00050e  d103              BNE      |L1.1304|
000510  6801              LDR      r1,[r0,#0]
000512  f0210101          BIC      r1,r1,#1
000516  6001              STR      r1,[r0,#0]
                  |L1.1304|
;;;852      
;;;853      /* Change the htim state */
;;;854      htim->State = HAL_TIM_STATE_READY;
000518  2001              MOVS     r0,#1
00051a  f8840039          STRB     r0,[r4,#0x39]
;;;855      
;;;856      /* Return function status */
;;;857      return HAL_OK;
00051e  2000              MOVS     r0,#0
;;;858    }
000520  bd10              POP      {r4,pc}
;;;859    /**
                          ENDP

                  HAL_TIMEx_PWMN_Start PROC
;;;904      */
;;;905    HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
000522  b510              PUSH     {r4,lr}
;;;906    {
000524  4604              MOV      r4,r0
;;;907      /* Check the parameters */
;;;908      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;909      
;;;910      /* Enable the complementary PWM output  */
;;;911      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
000526  2204              MOVS     r2,#4
000528  6820              LDR      r0,[r4,#0]
00052a  f7fffffe          BL       _Z18TIM_CCxNChannelCmdP11TIM_TypeDefjj ; TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
;;;912      
;;;913      /* Enable the Main Output */
;;;914      __HAL_TIM_MOE_ENABLE(htim);
00052e  6820              LDR      r0,[r4,#0]
000530  6c41              LDR      r1,[r0,#0x44]
000532  f4414100          ORR      r1,r1,#0x8000
000536  6441              STR      r1,[r0,#0x44]
;;;915      
;;;916      /* Enable the Peripheral */
;;;917      __HAL_TIM_ENABLE(htim);
000538  6820              LDR      r0,[r4,#0]
00053a  6801              LDR      r1,[r0,#0]
00053c  f0410101          ORR      r1,r1,#1
000540  6001              STR      r1,[r0,#0]
;;;918      
;;;919      /* Return function status */
;;;920      return HAL_OK;
000542  2000              MOVS     r0,#0
;;;921    } 
000544  bd10              POP      {r4,pc}
;;;922    
                          ENDP

                  HAL_TIMEx_PWMN_Stop PROC
;;;934      */
;;;935    HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000546  b510              PUSH     {r4,lr}
;;;936    { 
000548  4604              MOV      r4,r0
;;;937      /* Check the parameters */
;;;938      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;939      
;;;940      /* Disable the complementary PWM output  */
;;;941      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);  
00054a  2200              MOVS     r2,#0
00054c  6820              LDR      r0,[r4,#0]
00054e  f7fffffe          BL       _Z18TIM_CCxNChannelCmdP11TIM_TypeDefjj ; TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
;;;942      
;;;943      /* Disable the Main Output */
;;;944      __HAL_TIM_MOE_DISABLE(htim);
000552  6821              LDR      r1,[r4,#0]
000554  6a08              LDR      r0,[r1,#0x20]
000556  f2411211          MOV      r2,#0x1111
00055a  4210              TST      r0,r2
00055c  f2404344          MOV      r3,#0x444
000560  d106              BNE      |L1.1392|
000562  6a08              LDR      r0,[r1,#0x20]
000564  4218              TST      r0,r3
000566  d103              BNE      |L1.1392|
000568  6c48              LDR      r0,[r1,#0x44]
00056a  f4204000          BIC      r0,r0,#0x8000
00056e  6448              STR      r0,[r1,#0x44]
                  |L1.1392|
;;;945      
;;;946      /* Disable the Peripheral */
;;;947      __HAL_TIM_DISABLE(htim);
000570  6820              LDR      r0,[r4,#0]
000572  6a01              LDR      r1,[r0,#0x20]
000574  4211              TST      r1,r2
000576  d106              BNE      |L1.1414|
000578  6a01              LDR      r1,[r0,#0x20]
00057a  4219              TST      r1,r3
00057c  d103              BNE      |L1.1414|
00057e  6801              LDR      r1,[r0,#0]
000580  f0210101          BIC      r1,r1,#1
000584  6001              STR      r1,[r0,#0]
                  |L1.1414|
;;;948      
;;;949      /* Return function status */
;;;950      return HAL_OK;
000586  2000              MOVS     r0,#0
;;;951    } 
000588  bd10              POP      {r4,pc}
;;;952    
                          ENDP

                  HAL_TIMEx_PWMN_Start_IT PROC
;;;965      */
;;;966    HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
00058a  b510              PUSH     {r4,lr}
;;;967    {
00058c  4604              MOV      r4,r0
;;;968      /* Check the parameters */
;;;969      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;970      
;;;971      switch (Channel)
00058e  2900              CMP      r1,#0
;;;972      {
;;;973        case TIM_CHANNEL_1:
;;;974        {       
;;;975          /* Enable the TIM Capture/Compare 1 interrupt */
;;;976          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000590  6822              LDR      r2,[r4,#0]
000592  d006              BEQ      |L1.1442|
000594  2904              CMP      r1,#4                 ;971
000596  d00f              BEQ      |L1.1464|
000598  2908              CMP      r1,#8                 ;971
00059a  d012              BEQ      |L1.1474|
00059c  290c              CMP      r1,#0xc               ;971
00059e  d119              BNE      |L1.1492|
0005a0  e014              B        |L1.1484|
                  |L1.1442|
0005a2  68d0              LDR      r0,[r2,#0xc]
0005a4  f0400002          ORR      r0,r0,#2
0005a8  60d0              STR      r0,[r2,#0xc]
;;;977        }
;;;978        break;
0005aa  e013              B        |L1.1492|
                  |L1.1452|
                          DCD      TIM_DMACaptureCplt
                  |L1.1456|
                          DCD      TIM_DMAError
                  |L1.1460|
                          DCD      TIM_DMADelayPulseCplt
                  |L1.1464|
;;;979        
;;;980        case TIM_CHANNEL_2:
;;;981        {
;;;982          /* Enable the TIM Capture/Compare 2 interrupt */
;;;983          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
0005b8  68d0              LDR      r0,[r2,#0xc]
0005ba  f0400004          ORR      r0,r0,#4
0005be  60d0              STR      r0,[r2,#0xc]
;;;984        }
;;;985        break;
0005c0  e008              B        |L1.1492|
                  |L1.1474|
;;;986        
;;;987        case TIM_CHANNEL_3:
;;;988        {
;;;989          /* Enable the TIM Capture/Compare 3 interrupt */
;;;990          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
0005c2  68d0              LDR      r0,[r2,#0xc]
0005c4  f0400008          ORR      r0,r0,#8
0005c8  60d0              STR      r0,[r2,#0xc]
;;;991        }
;;;992        break;
0005ca  e003              B        |L1.1492|
                  |L1.1484|
;;;993        
;;;994        case TIM_CHANNEL_4:
;;;995        {
;;;996          /* Enable the TIM Capture/Compare 4 interrupt */
;;;997          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
0005cc  68d0              LDR      r0,[r2,#0xc]
0005ce  f0400010          ORR      r0,r0,#0x10
0005d2  60d0              STR      r0,[r2,#0xc]
                  |L1.1492|
;;;998        }
;;;999        break;
;;;1000       
;;;1001       default:
;;;1002       break;
;;;1003     } 
;;;1004     
;;;1005     /* Enable the TIM Break interrupt */
;;;1006     __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
0005d4  6820              LDR      r0,[r4,#0]
0005d6  68c2              LDR      r2,[r0,#0xc]
0005d8  f0420280          ORR      r2,r2,#0x80
0005dc  60c2              STR      r2,[r0,#0xc]
;;;1007     
;;;1008     /* Enable the complementary PWM output  */
;;;1009     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
0005de  2204              MOVS     r2,#4
0005e0  6820              LDR      r0,[r4,#0]
0005e2  f7fffffe          BL       _Z18TIM_CCxNChannelCmdP11TIM_TypeDefjj ; TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
;;;1010     
;;;1011     /* Enable the Main Output */
;;;1012     __HAL_TIM_MOE_ENABLE(htim);
0005e6  6820              LDR      r0,[r4,#0]
0005e8  6c41              LDR      r1,[r0,#0x44]
0005ea  f4414100          ORR      r1,r1,#0x8000
0005ee  6441              STR      r1,[r0,#0x44]
;;;1013     
;;;1014     /* Enable the Peripheral */
;;;1015     __HAL_TIM_ENABLE(htim);
0005f0  6820              LDR      r0,[r4,#0]
0005f2  6801              LDR      r1,[r0,#0]
0005f4  f0410101          ORR      r1,r1,#1
0005f8  6001              STR      r1,[r0,#0]
;;;1016     
;;;1017     /* Return function status */
;;;1018     return HAL_OK;
0005fa  2000              MOVS     r0,#0
;;;1019   } 
0005fc  bd10              POP      {r4,pc}
;;;1020   
                          ENDP

                  HAL_TIMEx_PWMN_Stop_IT PROC
;;;1033     */
;;;1034   HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
0005fe  b510              PUSH     {r4,lr}
;;;1035   {
000600  4604              MOV      r4,r0
;;;1036     /* Check the parameters */
;;;1037     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;1038   
;;;1039     switch (Channel)
000602  2900              CMP      r1,#0
;;;1040     {
;;;1041       case TIM_CHANNEL_1:
;;;1042       {       
;;;1043         /* Disable the TIM Capture/Compare 1 interrupt */
;;;1044         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000604  6822              LDR      r2,[r4,#0]
000606  d006              BEQ      |L1.1558|
000608  2904              CMP      r1,#4                 ;1039
00060a  d009              BEQ      |L1.1568|
00060c  2908              CMP      r1,#8                 ;1039
00060e  d00c              BEQ      |L1.1578|
000610  290c              CMP      r1,#0xc               ;1039
000612  d113              BNE      |L1.1596|
000614  e00e              B        |L1.1588|
                  |L1.1558|
000616  68d0              LDR      r0,[r2,#0xc]
000618  f0200002          BIC      r0,r0,#2
00061c  60d0              STR      r0,[r2,#0xc]
;;;1045       }
;;;1046       break;
00061e  e00d              B        |L1.1596|
                  |L1.1568|
;;;1047       
;;;1048       case TIM_CHANNEL_2:
;;;1049       {
;;;1050         /* Disable the TIM Capture/Compare 2 interrupt */
;;;1051         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000620  68d0              LDR      r0,[r2,#0xc]
000622  f0200004          BIC      r0,r0,#4
000626  60d0              STR      r0,[r2,#0xc]
;;;1052       }
;;;1053       break;
000628  e008              B        |L1.1596|
                  |L1.1578|
;;;1054       
;;;1055       case TIM_CHANNEL_3:
;;;1056       {
;;;1057         /* Disable the TIM Capture/Compare 3 interrupt */
;;;1058         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
00062a  68d0              LDR      r0,[r2,#0xc]
00062c  f0200008          BIC      r0,r0,#8
000630  60d0              STR      r0,[r2,#0xc]
;;;1059       }
;;;1060       break;
000632  e003              B        |L1.1596|
                  |L1.1588|
;;;1061       
;;;1062       case TIM_CHANNEL_4:
;;;1063       {
;;;1064         /* Disable the TIM Capture/Compare 3 interrupt */
;;;1065         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
000634  68d0              LDR      r0,[r2,#0xc]
000636  f0200010          BIC      r0,r0,#0x10
00063a  60d0              STR      r0,[r2,#0xc]
                  |L1.1596|
;;;1066       }
;;;1067       break;
;;;1068       
;;;1069       default:
;;;1070       break; 
;;;1071     }
;;;1072     
;;;1073     /* Disable the complementary PWM output  */
;;;1074     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
00063c  2200              MOVS     r2,#0
00063e  6820              LDR      r0,[r4,#0]
000640  f7fffffe          BL       _Z18TIM_CCxNChannelCmdP11TIM_TypeDefjj ; TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
;;;1075     
;;;1076     /* Disable the TIM Break interrupt (only if no more channel is active) */
;;;1077     if((READ_REG(htim->Instance->CCER) & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
000644  6820              LDR      r0,[r4,#0]
000646  6a01              LDR      r1,[r0,#0x20]
000648  f2404244          MOV      r2,#0x444
00064c  4211              TST      r1,r2
00064e  d103              BNE      |L1.1624|
;;;1078     {
;;;1079       __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
000650  68c1              LDR      r1,[r0,#0xc]
000652  f0210180          BIC      r1,r1,#0x80
000656  60c1              STR      r1,[r0,#0xc]
                  |L1.1624|
;;;1080     }
;;;1081     
;;;1082     /* Disable the Main Output */
;;;1083     __HAL_TIM_MOE_DISABLE(htim);
000658  6820              LDR      r0,[r4,#0]
00065a  6a03              LDR      r3,[r0,#0x20]
00065c  f2411111          MOV      r1,#0x1111
000660  420b              TST      r3,r1
000662  d106              BNE      |L1.1650|
000664  6a03              LDR      r3,[r0,#0x20]
000666  4213              TST      r3,r2
000668  d103              BNE      |L1.1650|
00066a  6c43              LDR      r3,[r0,#0x44]
00066c  f4234300          BIC      r3,r3,#0x8000
000670  6443              STR      r3,[r0,#0x44]
                  |L1.1650|
;;;1084     
;;;1085     /* Disable the Peripheral */
;;;1086     __HAL_TIM_DISABLE(htim);
000672  6820              LDR      r0,[r4,#0]
000674  6a03              LDR      r3,[r0,#0x20]
000676  420b              TST      r3,r1
000678  d106              BNE      |L1.1672|
00067a  6a01              LDR      r1,[r0,#0x20]
00067c  4211              TST      r1,r2
00067e  d103              BNE      |L1.1672|
000680  6801              LDR      r1,[r0,#0]
000682  f0210101          BIC      r1,r1,#1
000686  6001              STR      r1,[r0,#0]
                  |L1.1672|
;;;1087     
;;;1088     /* Return function status */
;;;1089     return HAL_OK;
000688  2000              MOVS     r0,#0
;;;1090   } 
00068a  bd10              POP      {r4,pc}
;;;1091   
                          ENDP

                  HAL_TIMEx_PWMN_Start_DMA PROC
;;;1106     */
;;;1107   HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
00068c  b570              PUSH     {r4-r6,lr}
;;;1108   {
00068e  4604              MOV      r4,r0
000690  460d              MOV      r5,r1
000692  4694              MOV      r12,r2
;;;1109     /* Check the parameters */
;;;1110     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;1111     
;;;1112     if((htim->State == HAL_TIM_STATE_BUSY))
000694  f8940039          LDRB     r0,[r4,#0x39]
000698  2802              CMP      r0,#2
00069a  d004              BEQ      |L1.1702|
;;;1113     {
;;;1114        return HAL_BUSY;
;;;1115     }
;;;1116     else if((htim->State == HAL_TIM_STATE_READY))
00069c  f8940039          LDRB     r0,[r4,#0x39]
0006a0  2801              CMP      r0,#1
0006a2  d002              BEQ      |L1.1706|
0006a4  e00a              B        |L1.1724|
                  |L1.1702|
0006a6  2002              MOVS     r0,#2                 ;1114
;;;1117     {
;;;1118       if(((uint32_t)pData == 0 ) && (Length > 0)) 
;;;1119       {
;;;1120         return HAL_ERROR;                                    
;;;1121       }
;;;1122       else
;;;1123       {
;;;1124         htim->State = HAL_TIM_STATE_BUSY;
;;;1125       }
;;;1126     }    
;;;1127     switch (Channel)
;;;1128     {
;;;1129       case TIM_CHANNEL_1:
;;;1130       {      
;;;1131         /* Set the DMA Period elapsed callback */
;;;1132         htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1133        
;;;1134         /* Set the DMA error callback */
;;;1135         htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;1136         
;;;1137         /* Enable the DMA Stream */
;;;1138         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
;;;1139         
;;;1140         /* Enable the TIM Capture/Compare 1 DMA request */
;;;1141         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;1142       }
;;;1143       break;
;;;1144       
;;;1145       case TIM_CHANNEL_2:
;;;1146       {
;;;1147         /* Set the DMA Period elapsed callback */
;;;1148         htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1149        
;;;1150         /* Set the DMA error callback */
;;;1151         htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
;;;1152         
;;;1153         /* Enable the DMA Stream */
;;;1154         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
;;;1155         
;;;1156         /* Enable the TIM Capture/Compare 2 DMA request */
;;;1157         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;1158       }
;;;1159       break;
;;;1160       
;;;1161       case TIM_CHANNEL_3:
;;;1162       {
;;;1163         /* Set the DMA Period elapsed callback */
;;;1164         htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1165        
;;;1166         /* Set the DMA error callback */
;;;1167         htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
;;;1168         
;;;1169         /* Enable the DMA Stream */
;;;1170         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
;;;1171         
;;;1172         /* Enable the TIM Capture/Compare 3 DMA request */
;;;1173         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
;;;1174       }
;;;1175       break;
;;;1176       
;;;1177       case TIM_CHANNEL_4:
;;;1178       {
;;;1179        /* Set the DMA Period elapsed callback */
;;;1180         htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1181        
;;;1182         /* Set the DMA error callback */
;;;1183         htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
;;;1184         
;;;1185         /* Enable the DMA Stream */
;;;1186         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
;;;1187         
;;;1188         /* Enable the TIM Capture/Compare 4 DMA request */
;;;1189         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
;;;1190       }
;;;1191       break;
;;;1192       
;;;1193       default:
;;;1194       break;
;;;1195     }
;;;1196   
;;;1197     /* Enable the complementary PWM output  */
;;;1198        TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;1199       
;;;1200     /* Enable the Main Output */
;;;1201       __HAL_TIM_MOE_ENABLE(htim);
;;;1202     
;;;1203     /* Enable the Peripheral */
;;;1204     __HAL_TIM_ENABLE(htim); 
;;;1205     
;;;1206     /* Return function status */
;;;1207     return HAL_OK;
;;;1208   }
0006a8  bd70              POP      {r4-r6,pc}
                  |L1.1706|
0006aa  f1bc0f00          CMP      r12,#0                ;1118
0006ae  d102              BNE      |L1.1718|
0006b0  b10b              CBZ      r3,|L1.1718|
0006b2  2001              MOVS     r0,#1                 ;1120
0006b4  bd70              POP      {r4-r6,pc}
                  |L1.1718|
0006b6  2002              MOVS     r0,#2                 ;1124
0006b8  f8840039          STRB     r0,[r4,#0x39]         ;1124
                  |L1.1724|
0006bc  48f7              LDR      r0,|L1.2716|
0006be  49f8              LDR      r1,|L1.2720|
0006c0  b135              CBZ      r5,|L1.1744|
0006c2  2d04              CMP      r5,#4                 ;1127
0006c4  d015              BEQ      |L1.1778|
0006c6  2d08              CMP      r5,#8                 ;1127
0006c8  d024              BEQ      |L1.1812|
0006ca  2d0c              CMP      r5,#0xc               ;1127
0006cc  d143              BNE      |L1.1878|
0006ce  e032              B        |L1.1846|
                  |L1.1744|
0006d0  6a22              LDR      r2,[r4,#0x20]         ;1132
0006d2  63d0              STR      r0,[r2,#0x3c]         ;1132
0006d4  6a20              LDR      r0,[r4,#0x20]         ;1135
0006d6  6481              STR      r1,[r0,#0x48]         ;1135
0006d8  6820              LDR      r0,[r4,#0]            ;1138
0006da  4661              MOV      r1,r12                ;1138
0006dc  f1000234          ADD      r2,r0,#0x34           ;1138
0006e0  6a20              LDR      r0,[r4,#0x20]         ;1138
0006e2  f7fffffe          BL       HAL_DMA_Start_IT
0006e6  6820              LDR      r0,[r4,#0]            ;1141
0006e8  68c1              LDR      r1,[r0,#0xc]          ;1141
0006ea  f4417100          ORR      r1,r1,#0x200          ;1141
0006ee  60c1              STR      r1,[r0,#0xc]          ;1141
0006f0  e031              B        |L1.1878|
                  |L1.1778|
0006f2  6a62              LDR      r2,[r4,#0x24]         ;1148
0006f4  63d0              STR      r0,[r2,#0x3c]         ;1148
0006f6  6a60              LDR      r0,[r4,#0x24]         ;1151
0006f8  6481              STR      r1,[r0,#0x48]         ;1151
0006fa  6820              LDR      r0,[r4,#0]            ;1154
0006fc  4661              MOV      r1,r12                ;1154
0006fe  f1000238          ADD      r2,r0,#0x38           ;1154
000702  6a60              LDR      r0,[r4,#0x24]         ;1154
000704  f7fffffe          BL       HAL_DMA_Start_IT
000708  6820              LDR      r0,[r4,#0]            ;1157
00070a  68c1              LDR      r1,[r0,#0xc]          ;1157
00070c  f4416180          ORR      r1,r1,#0x400          ;1157
000710  60c1              STR      r1,[r0,#0xc]          ;1157
000712  e020              B        |L1.1878|
                  |L1.1812|
000714  6aa2              LDR      r2,[r4,#0x28]         ;1164
000716  63d0              STR      r0,[r2,#0x3c]         ;1164
000718  6aa0              LDR      r0,[r4,#0x28]         ;1167
00071a  6481              STR      r1,[r0,#0x48]         ;1167
00071c  6820              LDR      r0,[r4,#0]            ;1170
00071e  4661              MOV      r1,r12                ;1170
000720  f100023c          ADD      r2,r0,#0x3c           ;1170
000724  6aa0              LDR      r0,[r4,#0x28]         ;1170
000726  f7fffffe          BL       HAL_DMA_Start_IT
00072a  6820              LDR      r0,[r4,#0]            ;1173
00072c  68c1              LDR      r1,[r0,#0xc]          ;1173
00072e  f4416100          ORR      r1,r1,#0x800          ;1173
000732  60c1              STR      r1,[r0,#0xc]          ;1173
000734  e00f              B        |L1.1878|
                  |L1.1846|
000736  6ae2              LDR      r2,[r4,#0x2c]         ;1180
000738  63d0              STR      r0,[r2,#0x3c]         ;1180
00073a  6ae0              LDR      r0,[r4,#0x2c]         ;1183
00073c  6481              STR      r1,[r0,#0x48]         ;1183
00073e  6820              LDR      r0,[r4,#0]            ;1186
000740  4661              MOV      r1,r12                ;1186
000742  f1000240          ADD      r2,r0,#0x40           ;1186
000746  6ae0              LDR      r0,[r4,#0x2c]         ;1186
000748  f7fffffe          BL       HAL_DMA_Start_IT
00074c  6820              LDR      r0,[r4,#0]            ;1189
00074e  68c1              LDR      r1,[r0,#0xc]          ;1189
000750  f4415180          ORR      r1,r1,#0x1000         ;1189
000754  60c1              STR      r1,[r0,#0xc]          ;1189
                  |L1.1878|
000756  2204              MOVS     r2,#4                 ;1198
000758  4629              MOV      r1,r5                 ;1198
00075a  6820              LDR      r0,[r4,#0]            ;1198
00075c  f7fffffe          BL       _Z18TIM_CCxNChannelCmdP11TIM_TypeDefjj ; TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
000760  6820              LDR      r0,[r4,#0]            ;1201
000762  6c41              LDR      r1,[r0,#0x44]         ;1201
000764  f4414100          ORR      r1,r1,#0x8000         ;1201
000768  6441              STR      r1,[r0,#0x44]         ;1201
00076a  6820              LDR      r0,[r4,#0]            ;1204
00076c  6801              LDR      r1,[r0,#0]            ;1204
00076e  f0410101          ORR      r1,r1,#1              ;1204
000772  6001              STR      r1,[r0,#0]            ;1204
000774  2000              MOVS     r0,#0                 ;1207
000776  bd70              POP      {r4-r6,pc}
;;;1209   
                          ENDP

                  HAL_TIMEx_PWMN_Stop_DMA PROC
;;;1222     */
;;;1223   HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000778  b510              PUSH     {r4,lr}
;;;1224   {
00077a  4604              MOV      r4,r0
;;;1225     /* Check the parameters */
;;;1226     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;1227     
;;;1228     switch (Channel)
00077c  2900              CMP      r1,#0
;;;1229     {
;;;1230       case TIM_CHANNEL_1:
;;;1231       {       
;;;1232         /* Disable the TIM Capture/Compare 1 DMA request */
;;;1233         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
00077e  6822              LDR      r2,[r4,#0]
000780  d006              BEQ      |L1.1936|
000782  2904              CMP      r1,#4                 ;1228
000784  d009              BEQ      |L1.1946|
000786  2908              CMP      r1,#8                 ;1228
000788  d00c              BEQ      |L1.1956|
00078a  290c              CMP      r1,#0xc               ;1228
00078c  d113              BNE      |L1.1974|
00078e  e00e              B        |L1.1966|
                  |L1.1936|
000790  68d0              LDR      r0,[r2,#0xc]
000792  f4207000          BIC      r0,r0,#0x200
000796  60d0              STR      r0,[r2,#0xc]
;;;1234       }
;;;1235       break;
000798  e00d              B        |L1.1974|
                  |L1.1946|
;;;1236       
;;;1237       case TIM_CHANNEL_2:
;;;1238       {
;;;1239         /* Disable the TIM Capture/Compare 2 DMA request */
;;;1240         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
00079a  68d0              LDR      r0,[r2,#0xc]
00079c  f4206080          BIC      r0,r0,#0x400
0007a0  60d0              STR      r0,[r2,#0xc]
;;;1241       }
;;;1242       break;
0007a2  e008              B        |L1.1974|
                  |L1.1956|
;;;1243       
;;;1244       case TIM_CHANNEL_3:
;;;1245       {
;;;1246         /* Disable the TIM Capture/Compare 3 DMA request */
;;;1247         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
0007a4  68d0              LDR      r0,[r2,#0xc]
0007a6  f4206000          BIC      r0,r0,#0x800
0007aa  60d0              STR      r0,[r2,#0xc]
;;;1248       }
;;;1249       break;
0007ac  e003              B        |L1.1974|
                  |L1.1966|
;;;1250       
;;;1251       case TIM_CHANNEL_4:
;;;1252       {
;;;1253         /* Disable the TIM Capture/Compare 4 DMA request */
;;;1254         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
0007ae  68d0              LDR      r0,[r2,#0xc]
0007b0  f4205080          BIC      r0,r0,#0x1000
0007b4  60d0              STR      r0,[r2,#0xc]
                  |L1.1974|
;;;1255       }
;;;1256       break;
;;;1257       
;;;1258       default:
;;;1259       break;
;;;1260     } 
;;;1261     
;;;1262     /* Disable the complementary PWM output */
;;;1263       TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
0007b6  2200              MOVS     r2,#0
0007b8  6820              LDR      r0,[r4,#0]
0007ba  f7fffffe          BL       _Z18TIM_CCxNChannelCmdP11TIM_TypeDefjj ; TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
;;;1264        
;;;1265     /* Disable the Main Output */
;;;1266       __HAL_TIM_MOE_DISABLE(htim);
0007be  6820              LDR      r0,[r4,#0]
0007c0  6a02              LDR      r2,[r0,#0x20]
0007c2  f2411111          MOV      r1,#0x1111
0007c6  420a              TST      r2,r1
0007c8  f2404244          MOV      r2,#0x444
0007cc  d106              BNE      |L1.2012|
0007ce  6a03              LDR      r3,[r0,#0x20]
0007d0  4213              TST      r3,r2
0007d2  d103              BNE      |L1.2012|
0007d4  6c43              LDR      r3,[r0,#0x44]
0007d6  f4234300          BIC      r3,r3,#0x8000
0007da  6443              STR      r3,[r0,#0x44]
                  |L1.2012|
;;;1267   
;;;1268     /* Disable the Peripheral */
;;;1269     __HAL_TIM_DISABLE(htim);
0007dc  6820              LDR      r0,[r4,#0]
0007de  6a03              LDR      r3,[r0,#0x20]
0007e0  420b              TST      r3,r1
0007e2  d106              BNE      |L1.2034|
0007e4  6a01              LDR      r1,[r0,#0x20]
0007e6  4211              TST      r1,r2
0007e8  d103              BNE      |L1.2034|
0007ea  6801              LDR      r1,[r0,#0]
0007ec  f0210101          BIC      r1,r1,#1
0007f0  6001              STR      r1,[r0,#0]
                  |L1.2034|
;;;1270     
;;;1271     /* Change the htim state */
;;;1272     htim->State = HAL_TIM_STATE_READY;
0007f2  2001              MOVS     r0,#1
0007f4  f8840039          STRB     r0,[r4,#0x39]
;;;1273     
;;;1274     /* Return function status */
;;;1275     return HAL_OK;
0007f8  2000              MOVS     r0,#0
;;;1276   }
0007fa  bd10              POP      {r4,pc}
;;;1277   
                          ENDP

                  HAL_TIMEx_OnePulseN_Start PROC
;;;1310     */
;;;1311   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
0007fc  b510              PUSH     {r4,lr}
;;;1312     {
0007fe  4604              MOV      r4,r0
;;;1313     /* Check the parameters */
;;;1314     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 
;;;1315     
;;;1316     /* Enable the complementary One Pulse output */
;;;1317     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE); 
000800  2204              MOVS     r2,#4
000802  6820              LDR      r0,[r4,#0]
000804  f7fffffe          BL       _Z18TIM_CCxNChannelCmdP11TIM_TypeDefjj ; TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
;;;1318     
;;;1319     /* Enable the Main Output */
;;;1320     __HAL_TIM_MOE_ENABLE(htim);
000808  6820              LDR      r0,[r4,#0]
00080a  6c41              LDR      r1,[r0,#0x44]
00080c  f4414100          ORR      r1,r1,#0x8000
000810  6441              STR      r1,[r0,#0x44]
;;;1321     
;;;1322     /* Return function status */
;;;1323     return HAL_OK;
000812  2000              MOVS     r0,#0
;;;1324   }
000814  bd10              POP      {r4,pc}
;;;1325   
                          ENDP

                  HAL_TIMEx_OnePulseN_Stop PROC
;;;1336     */
;;;1337   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000816  b510              PUSH     {r4,lr}
;;;1338   {
000818  4604              MOV      r4,r0
;;;1339   
;;;1340     /* Check the parameters */
;;;1341     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 
;;;1342   
;;;1343     /* Disable the complementary One Pulse output */
;;;1344       TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
00081a  2200              MOVS     r2,#0
00081c  6820              LDR      r0,[r4,#0]
00081e  f7fffffe          BL       _Z18TIM_CCxNChannelCmdP11TIM_TypeDefjj ; TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
;;;1345     
;;;1346     /* Disable the Main Output */
;;;1347       __HAL_TIM_MOE_DISABLE(htim);
000822  6821              LDR      r1,[r4,#0]
000824  6a08              LDR      r0,[r1,#0x20]
000826  f2411211          MOV      r2,#0x1111
00082a  4210              TST      r0,r2
00082c  f2404344          MOV      r3,#0x444
000830  d106              BNE      |L1.2112|
000832  6a08              LDR      r0,[r1,#0x20]
000834  4218              TST      r0,r3
000836  d103              BNE      |L1.2112|
000838  6c48              LDR      r0,[r1,#0x44]
00083a  f4204000          BIC      r0,r0,#0x8000
00083e  6448              STR      r0,[r1,#0x44]
                  |L1.2112|
;;;1348     
;;;1349     /* Disable the Peripheral */
;;;1350     __HAL_TIM_DISABLE(htim); 
000840  6820              LDR      r0,[r4,#0]
000842  6a01              LDR      r1,[r0,#0x20]
000844  4211              TST      r1,r2
000846  d106              BNE      |L1.2134|
000848  6a01              LDR      r1,[r0,#0x20]
00084a  4219              TST      r1,r3
00084c  d103              BNE      |L1.2134|
00084e  6801              LDR      r1,[r0,#0]
000850  f0210101          BIC      r1,r1,#1
000854  6001              STR      r1,[r0,#0]
                  |L1.2134|
;;;1351      
;;;1352     /* Return function status */
;;;1353     return HAL_OK;
000856  2000              MOVS     r0,#0
;;;1354   }
000858  bd10              POP      {r4,pc}
;;;1355   
                          ENDP

                  HAL_TIMEx_OnePulseN_Start_IT PROC
;;;1366     */
;;;1367   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
00085a  b510              PUSH     {r4,lr}
;;;1368   {
00085c  4604              MOV      r4,r0
;;;1369     /* Check the parameters */
;;;1370     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 
;;;1371   
;;;1372     /* Enable the TIM Capture/Compare 1 interrupt */
;;;1373     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
00085e  6820              LDR      r0,[r4,#0]
000860  68c2              LDR      r2,[r0,#0xc]
000862  f0420202          ORR      r2,r2,#2
000866  60c2              STR      r2,[r0,#0xc]
;;;1374     
;;;1375     /* Enable the TIM Capture/Compare 2 interrupt */
;;;1376     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
000868  6820              LDR      r0,[r4,#0]
00086a  68c2              LDR      r2,[r0,#0xc]
00086c  f0420204          ORR      r2,r2,#4
000870  60c2              STR      r2,[r0,#0xc]
;;;1377     
;;;1378     /* Enable the complementary One Pulse output */
;;;1379     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE); 
000872  2204              MOVS     r2,#4
000874  6820              LDR      r0,[r4,#0]
000876  f7fffffe          BL       _Z18TIM_CCxNChannelCmdP11TIM_TypeDefjj ; TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
;;;1380     
;;;1381     /* Enable the Main Output */
;;;1382     __HAL_TIM_MOE_ENABLE(htim);
00087a  6820              LDR      r0,[r4,#0]
00087c  6c41              LDR      r1,[r0,#0x44]
00087e  f4414100          ORR      r1,r1,#0x8000
000882  6441              STR      r1,[r0,#0x44]
;;;1383     
;;;1384     /* Return function status */
;;;1385     return HAL_OK;
000884  2000              MOVS     r0,#0
;;;1386     } 
000886  bd10              POP      {r4,pc}
;;;1387     
                          ENDP

                  HAL_TIMEx_OnePulseN_Stop_IT PROC
;;;1398     */
;;;1399   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000888  b510              PUSH     {r4,lr}
;;;1400   {
00088a  4604              MOV      r4,r0
;;;1401     /* Check the parameters */
;;;1402     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 
;;;1403   
;;;1404     /* Disable the TIM Capture/Compare 1 interrupt */
;;;1405     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
00088c  6820              LDR      r0,[r4,#0]
00088e  68c2              LDR      r2,[r0,#0xc]
000890  f0220202          BIC      r2,r2,#2
000894  60c2              STR      r2,[r0,#0xc]
;;;1406     
;;;1407     /* Disable the TIM Capture/Compare 2 interrupt */
;;;1408     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000896  6820              LDR      r0,[r4,#0]
000898  68c2              LDR      r2,[r0,#0xc]
00089a  f0220204          BIC      r2,r2,#4
00089e  60c2              STR      r2,[r0,#0xc]
;;;1409     
;;;1410     /* Disable the complementary One Pulse output */
;;;1411     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
0008a0  2200              MOVS     r2,#0
0008a2  6820              LDR      r0,[r4,#0]
0008a4  f7fffffe          BL       _Z18TIM_CCxNChannelCmdP11TIM_TypeDefjj ; TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
;;;1412     
;;;1413     /* Disable the Main Output */
;;;1414     __HAL_TIM_MOE_DISABLE(htim);
0008a8  6820              LDR      r0,[r4,#0]
0008aa  6a02              LDR      r2,[r0,#0x20]
0008ac  f2411111          MOV      r1,#0x1111
0008b0  420a              TST      r2,r1
0008b2  f2404244          MOV      r2,#0x444
0008b6  d106              BNE      |L1.2246|
0008b8  6a03              LDR      r3,[r0,#0x20]
0008ba  4213              TST      r3,r2
0008bc  d103              BNE      |L1.2246|
0008be  6c43              LDR      r3,[r0,#0x44]
0008c0  f4234300          BIC      r3,r3,#0x8000
0008c4  6443              STR      r3,[r0,#0x44]
                  |L1.2246|
;;;1415     
;;;1416     /* Disable the Peripheral */
;;;1417      __HAL_TIM_DISABLE(htim);  
0008c6  6820              LDR      r0,[r4,#0]
0008c8  6a03              LDR      r3,[r0,#0x20]
0008ca  420b              TST      r3,r1
0008cc  d106              BNE      |L1.2268|
0008ce  6a01              LDR      r1,[r0,#0x20]
0008d0  4211              TST      r1,r2
0008d2  d103              BNE      |L1.2268|
0008d4  6801              LDR      r1,[r0,#0]
0008d6  f0210101          BIC      r1,r1,#1
0008da  6001              STR      r1,[r0,#0]
                  |L1.2268|
;;;1418     
;;;1419     /* Return function status */
;;;1420     return HAL_OK;
0008dc  2000              MOVS     r0,#0
;;;1421   }
0008de  bd10              POP      {r4,pc}
;;;1422   /**
                          ENDP

                  HAL_TIMEx_ConfigCommutationEvent PROC
;;;1467     */
;;;1468   HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
0008e0  f8903038          LDRB     r3,[r0,#0x38]
;;;1469   {
;;;1470     /* Check the parameters */
;;;1471     assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
;;;1472     assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
;;;1473     
;;;1474     __HAL_LOCK(htim);
0008e4  2b01              CMP      r3,#1
0008e6  d00a              BEQ      |L1.2302|
0008e8  2301              MOVS     r3,#1
0008ea  f8803038          STRB     r3,[r0,#0x38]
0008ee  b141              CBZ      r1,|L1.2306|
;;;1475     
;;;1476     if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
0008f0  2910              CMP      r1,#0x10
0008f2  d006              BEQ      |L1.2306|
;;;1477         (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
0008f4  2920              CMP      r1,#0x20
0008f6  d004              BEQ      |L1.2306|
0008f8  2930              CMP      r1,#0x30
0008fa  d002              BEQ      |L1.2306|
0008fc  e00e              B        |L1.2332|
                  |L1.2302|
0008fe  2002              MOVS     r0,#2                 ;1474
;;;1478     {    
;;;1479       /* Select the Input trigger */
;;;1480       htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;1481       htim->Instance->SMCR |= InputTrigger;
;;;1482     }
;;;1483       
;;;1484     /* Select the Capture Compare preload feature */
;;;1485     htim->Instance->CR2 |= TIM_CR2_CCPC;
;;;1486     /* Select the Commutation event source */
;;;1487     htim->Instance->CR2 &= ~TIM_CR2_CCUS;
;;;1488     htim->Instance->CR2 |= CommutationSource;
;;;1489       
;;;1490     __HAL_UNLOCK(htim);
;;;1491     
;;;1492     return HAL_OK;
;;;1493   }
000900  4770              BX       lr
                  |L1.2306|
000902  6803              LDR      r3,[r0,#0]            ;1480
000904  f8d3c008          LDR      r12,[r3,#8]           ;1480
000908  f02c0c70          BIC      r12,r12,#0x70         ;1480
00090c  f8c3c008          STR      r12,[r3,#8]           ;1480
000910  6803              LDR      r3,[r0,#0]            ;1481
000912  f8d3c008          LDR      r12,[r3,#8]           ;1481
000916  ea4c0101          ORR      r1,r12,r1             ;1481
00091a  6099              STR      r1,[r3,#8]            ;1481
                  |L1.2332|
00091c  6801              LDR      r1,[r0,#0]            ;1485
00091e  684b              LDR      r3,[r1,#4]            ;1485
000920  f0430301          ORR      r3,r3,#1              ;1485
000924  604b              STR      r3,[r1,#4]            ;1485
000926  6801              LDR      r1,[r0,#0]            ;1487
000928  684b              LDR      r3,[r1,#4]            ;1487
00092a  f0230304          BIC      r3,r3,#4              ;1487
00092e  604b              STR      r3,[r1,#4]            ;1487
000930  6801              LDR      r1,[r0,#0]            ;1488
000932  684b              LDR      r3,[r1,#4]            ;1488
000934  431a              ORRS     r2,r2,r3              ;1488
000936  604a              STR      r2,[r1,#4]            ;1488
000938  2100              MOVS     r1,#0                 ;1490
00093a  f8801038          STRB     r1,[r0,#0x38]         ;1490
00093e  2000              MOVS     r0,#0                 ;1492
000940  4770              BX       lr
;;;1494   
                          ENDP

                  HAL_TIMEx_ConfigCommutationEvent_IT PROC
;;;1517     */
;;;1518   HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
000942  f8903038          LDRB     r3,[r0,#0x38]
;;;1519   {
;;;1520     /* Check the parameters */
;;;1521     assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
;;;1522     assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
;;;1523     
;;;1524     __HAL_LOCK(htim);
000946  2b01              CMP      r3,#1
000948  d00a              BEQ      |L1.2400|
00094a  2301              MOVS     r3,#1
00094c  f8803038          STRB     r3,[r0,#0x38]
000950  b141              CBZ      r1,|L1.2404|
;;;1525     
;;;1526     if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
000952  2910              CMP      r1,#0x10
000954  d006              BEQ      |L1.2404|
;;;1527         (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
000956  2920              CMP      r1,#0x20
000958  d004              BEQ      |L1.2404|
00095a  2930              CMP      r1,#0x30
00095c  d002              BEQ      |L1.2404|
00095e  e00e              B        |L1.2430|
                  |L1.2400|
000960  2002              MOVS     r0,#2                 ;1524
;;;1528     {    
;;;1529       /* Select the Input trigger */
;;;1530       htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;1531       htim->Instance->SMCR |= InputTrigger;
;;;1532     }
;;;1533     
;;;1534     /* Select the Capture Compare preload feature */
;;;1535     htim->Instance->CR2 |= TIM_CR2_CCPC;
;;;1536     /* Select the Commutation event source */
;;;1537     htim->Instance->CR2 &= ~TIM_CR2_CCUS;
;;;1538     htim->Instance->CR2 |= CommutationSource;
;;;1539       
;;;1540     /* Enable the Commutation Interrupt Request */
;;;1541     __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
;;;1542   
;;;1543     __HAL_UNLOCK(htim);
;;;1544     
;;;1545     return HAL_OK;
;;;1546   }
000962  4770              BX       lr
                  |L1.2404|
000964  6803              LDR      r3,[r0,#0]            ;1530
000966  f8d3c008          LDR      r12,[r3,#8]           ;1530
00096a  f02c0c70          BIC      r12,r12,#0x70         ;1530
00096e  f8c3c008          STR      r12,[r3,#8]           ;1530
000972  6803              LDR      r3,[r0,#0]            ;1531
000974  f8d3c008          LDR      r12,[r3,#8]           ;1531
000978  ea4c0101          ORR      r1,r12,r1             ;1531
00097c  6099              STR      r1,[r3,#8]            ;1531
                  |L1.2430|
00097e  6801              LDR      r1,[r0,#0]            ;1535
000980  684b              LDR      r3,[r1,#4]            ;1535
000982  f0430301          ORR      r3,r3,#1              ;1535
000986  604b              STR      r3,[r1,#4]            ;1535
000988  6801              LDR      r1,[r0,#0]            ;1537
00098a  684b              LDR      r3,[r1,#4]            ;1537
00098c  f0230304          BIC      r3,r3,#4              ;1537
000990  604b              STR      r3,[r1,#4]            ;1537
000992  6801              LDR      r1,[r0,#0]            ;1538
000994  684b              LDR      r3,[r1,#4]            ;1538
000996  431a              ORRS     r2,r2,r3              ;1538
000998  604a              STR      r2,[r1,#4]            ;1538
00099a  6801              LDR      r1,[r0,#0]            ;1541
00099c  68ca              LDR      r2,[r1,#0xc]          ;1541
00099e  f0420220          ORR      r2,r2,#0x20           ;1541
0009a2  60ca              STR      r2,[r1,#0xc]          ;1541
0009a4  2100              MOVS     r1,#0                 ;1543
0009a6  f8801038          STRB     r1,[r0,#0x38]         ;1543
0009aa  2000              MOVS     r0,#0                 ;1545
0009ac  4770              BX       lr
;;;1547   
                          ENDP

                  HAL_TIMEx_CommutationCallback PROC
;;;1751     */
;;;1752   __weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
0009ae  4770              BX       lr
;;;1753   {
;;;1754     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1755               the HAL_TIMEx_CommutationCallback could be implemented in the user file
;;;1756      */
;;;1757   }
;;;1758   
                          ENDP

                  TIMEx_DMACommutationCplt PROC
;;;1810     */
;;;1811   void TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma)
0009b0  b510              PUSH     {r4,lr}
;;;1812   {
;;;1813     TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
0009b2  6b80              LDR      r0,[r0,#0x38]
;;;1814     
;;;1815     htim->State= HAL_TIM_STATE_READY;
0009b4  2101              MOVS     r1,#1
0009b6  f8801039          STRB     r1,[r0,#0x39]
;;;1816       
;;;1817     HAL_TIMEx_CommutationCallback(htim); 
0009ba  f7fffffe          BL       HAL_TIMEx_CommutationCallback
;;;1818   }
0009be  bd10              POP      {r4,pc}
;;;1819   /**
                          ENDP

                  HAL_TIMEx_ConfigCommutationEvent_DMA PROC
;;;1571     */
;;;1572   HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_DMA(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
0009c0  f8903038          LDRB     r3,[r0,#0x38]
;;;1573   {
;;;1574     /* Check the parameters */
;;;1575     assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
;;;1576     assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
;;;1577     
;;;1578     __HAL_LOCK(htim);
0009c4  2b01              CMP      r3,#1
0009c6  d00a              BEQ      |L1.2526|
0009c8  2301              MOVS     r3,#1
0009ca  f8803038          STRB     r3,[r0,#0x38]
0009ce  b141              CBZ      r1,|L1.2530|
;;;1579     
;;;1580     if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
0009d0  2910              CMP      r1,#0x10
0009d2  d006              BEQ      |L1.2530|
;;;1581         (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
0009d4  2920              CMP      r1,#0x20
0009d6  d004              BEQ      |L1.2530|
0009d8  2930              CMP      r1,#0x30
0009da  d002              BEQ      |L1.2530|
0009dc  e00e              B        |L1.2556|
                  |L1.2526|
0009de  2002              MOVS     r0,#2                 ;1578
;;;1582     {    
;;;1583       /* Select the Input trigger */
;;;1584       htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;1585       htim->Instance->SMCR |= InputTrigger;
;;;1586     }
;;;1587     
;;;1588     /* Select the Capture Compare preload feature */
;;;1589     htim->Instance->CR2 |= TIM_CR2_CCPC;
;;;1590     /* Select the Commutation event source */
;;;1591     htim->Instance->CR2 &= ~TIM_CR2_CCUS;
;;;1592     htim->Instance->CR2 |= CommutationSource;
;;;1593     
;;;1594     /* Enable the Commutation DMA Request */
;;;1595     /* Set the DMA Commutation Callback */
;;;1596     htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;     
;;;1597     /* Set the DMA error callback */
;;;1598     htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
;;;1599     
;;;1600     /* Enable the Commutation DMA Request */
;;;1601     __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
;;;1602   
;;;1603     __HAL_UNLOCK(htim);
;;;1604     
;;;1605     return HAL_OK;
;;;1606   }
0009e0  4770              BX       lr
                  |L1.2530|
0009e2  6803              LDR      r3,[r0,#0]            ;1584
0009e4  f8d3c008          LDR      r12,[r3,#8]           ;1584
0009e8  f02c0c70          BIC      r12,r12,#0x70         ;1584
0009ec  f8c3c008          STR      r12,[r3,#8]           ;1584
0009f0  6803              LDR      r3,[r0,#0]            ;1585
0009f2  f8d3c008          LDR      r12,[r3,#8]           ;1585
0009f6  ea4c0101          ORR      r1,r12,r1             ;1585
0009fa  6099              STR      r1,[r3,#8]            ;1585
                  |L1.2556|
0009fc  6801              LDR      r1,[r0,#0]            ;1589
0009fe  684b              LDR      r3,[r1,#4]            ;1589
000a00  f0430301          ORR      r3,r3,#1              ;1589
000a04  604b              STR      r3,[r1,#4]            ;1589
000a06  6801              LDR      r1,[r0,#0]            ;1591
000a08  684b              LDR      r3,[r1,#4]            ;1591
000a0a  f0230304          BIC      r3,r3,#4              ;1591
000a0e  604b              STR      r3,[r1,#4]            ;1591
000a10  6801              LDR      r1,[r0,#0]            ;1592
000a12  684b              LDR      r3,[r1,#4]            ;1592
000a14  431a              ORRS     r2,r2,r3              ;1592
000a16  604a              STR      r2,[r1,#4]            ;1592
000a18  f2af016b          ADR      r1,TIMEx_DMACommutationCplt + 1
000a1c  6b02              LDR      r2,[r0,#0x30]         ;1596
000a1e  63d1              STR      r1,[r2,#0x3c]         ;1596
000a20  6b02              LDR      r2,[r0,#0x30]         ;1598
000a22  491f              LDR      r1,|L1.2720|
000a24  6491              STR      r1,[r2,#0x48]         ;1598
000a26  6801              LDR      r1,[r0,#0]            ;1601
000a28  68ca              LDR      r2,[r1,#0xc]          ;1601
000a2a  f4425200          ORR      r2,r2,#0x2000         ;1601
000a2e  60ca              STR      r2,[r1,#0xc]          ;1601
000a30  2100              MOVS     r1,#0                 ;1603
000a32  f8801038          STRB     r1,[r0,#0x38]         ;1603
000a36  2000              MOVS     r0,#0                 ;1605
000a38  4770              BX       lr
;;;1607   
                          ENDP

                  HAL_TIMEx_MasterConfigSynchronization PROC
;;;1616     */
;;;1617   HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
000a3a  b410              PUSH     {r4}
;;;1618   {
;;;1619     /* Check the parameters */
;;;1620     assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
;;;1621     assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
;;;1622     assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
;;;1623     
;;;1624     __HAL_LOCK(htim);
000a3c  f8902038          LDRB     r2,[r0,#0x38]
000a40  2a01              CMP      r2,#1
000a42  d02f              BEQ      |L1.2724|
000a44  2301              MOVS     r3,#1
000a46  f8803038          STRB     r3,[r0,#0x38]
;;;1625     
;;;1626     htim->State = HAL_TIM_STATE_BUSY;
000a4a  2202              MOVS     r2,#2
000a4c  f8802039          STRB     r2,[r0,#0x39]
;;;1627   
;;;1628     /* Reset the MMS Bits */
;;;1629     htim->Instance->CR2 &= ~TIM_CR2_MMS;
000a50  6802              LDR      r2,[r0,#0]
000a52  f8d2c004          LDR      r12,[r2,#4]
000a56  f02c0c70          BIC      r12,r12,#0x70
000a5a  f8c2c004          STR      r12,[r2,#4]
;;;1630     /* Select the TRGO source */
;;;1631     htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
000a5e  6802              LDR      r2,[r0,#0]
000a60  f8d2c004          LDR      r12,[r2,#4]
000a64  680c              LDR      r4,[r1,#0]
000a66  ea4c0c04          ORR      r12,r12,r4
000a6a  f8c2c004          STR      r12,[r2,#4]
;;;1632   
;;;1633     /* Reset the MSM Bit */
;;;1634     htim->Instance->SMCR &= ~TIM_SMCR_MSM;
000a6e  6802              LDR      r2,[r0,#0]
000a70  f8d2c008          LDR      r12,[r2,#8]
000a74  f02c0c80          BIC      r12,r12,#0x80
000a78  f8c2c008          STR      r12,[r2,#8]
;;;1635     /* Set or Reset the MSM Bit */
;;;1636     htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
000a7c  6802              LDR      r2,[r0,#0]
000a7e  f8d2c008          LDR      r12,[r2,#8]
000a82  6849              LDR      r1,[r1,#4]
000a84  ea4c0101          ORR      r1,r12,r1
000a88  6091              STR      r1,[r2,#8]
;;;1637     
;;;1638     htim->State = HAL_TIM_STATE_READY;
000a8a  f8803039          STRB     r3,[r0,#0x39]
;;;1639     
;;;1640     __HAL_UNLOCK(htim);
000a8e  2100              MOVS     r1,#0
000a90  f8801038          STRB     r1,[r0,#0x38]
;;;1641     
;;;1642     return HAL_OK;
000a94  2000              MOVS     r0,#0
                  |L1.2710|
;;;1643   } 
000a96  bc10              POP      {r4}
000a98  4770              BX       lr
000a9a  0000              DCW      0x0000
                  |L1.2716|
                          DCD      TIM_DMADelayPulseCplt
                  |L1.2720|
                          DCD      TIM_DMAError
                  |L1.2724|
000aa4  2002              MOVS     r0,#2                 ;1624
000aa6  e7f6              B        |L1.2710|
;;;1644                                                        
                          ENDP

                  HAL_TIMEx_ConfigBreakDeadTime PROC
;;;1653     */    
;;;1654   HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim, 
000aa8  b410              PUSH     {r4}
;;;1655                                                 TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
;;;1656   {
;;;1657     /* Check the parameters */
;;;1658     assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
;;;1659     assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
;;;1660     assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
;;;1661     assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
;;;1662     assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
;;;1663     assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
;;;1664     assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
;;;1665     assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
;;;1666     
;;;1667     /* Process Locked */
;;;1668     __HAL_LOCK(htim);
000aaa  f8902038          LDRB     r2,[r0,#0x38]
000aae  2a01              CMP      r2,#1
000ab0  d025              BEQ      |L1.2814|
000ab2  2201              MOVS     r2,#1
000ab4  f8802038          STRB     r2,[r0,#0x38]
;;;1669     
;;;1670     htim->State = HAL_TIM_STATE_BUSY;
000ab8  2302              MOVS     r3,#2
000aba  f8803039          STRB     r3,[r0,#0x39]
;;;1671   
;;;1672     /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
;;;1673        the OSSI State, the dead time value and the Automatic Output Enable Bit */
;;;1674     htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  | 
000abe  f8d1c004          LDR      r12,[r1,#4]
000ac2  680b              LDR      r3,[r1,#0]
000ac4  68cc              LDR      r4,[r1,#0xc]
000ac6  ea43030c          ORR      r3,r3,r12
000aca  f8d1c008          LDR      r12,[r1,#8]
000ace  ea4c0c04          ORR      r12,r12,r4
000ad2  ea43030c          ORR      r3,r3,r12
000ad6  f8d1c010          LDR      r12,[r1,#0x10]
000ada  ea43030c          ORR      r3,r3,r12
000ade  f8d1c014          LDR      r12,[r1,#0x14]
000ae2  6989              LDR      r1,[r1,#0x18]
000ae4  ea43030c          ORR      r3,r3,r12
000ae8  4319              ORRS     r1,r1,r3
000aea  6803              LDR      r3,[r0,#0]
000aec  6459              STR      r1,[r3,#0x44]
;;;1675                                      sBreakDeadTimeConfig->OffStateIDLEMode |
;;;1676                                      sBreakDeadTimeConfig->LockLevel        |
;;;1677                                      sBreakDeadTimeConfig->DeadTime         |
;;;1678                                      sBreakDeadTimeConfig->BreakState       |
;;;1679                                      sBreakDeadTimeConfig->BreakPolarity    |
;;;1680                                      sBreakDeadTimeConfig->AutomaticOutput;
;;;1681     
;;;1682                                      
;;;1683     htim->State = HAL_TIM_STATE_READY;                                 
000aee  f8802039          STRB     r2,[r0,#0x39]
;;;1684     
;;;1685     __HAL_UNLOCK(htim);
000af2  2100              MOVS     r1,#0
000af4  f8801038          STRB     r1,[r0,#0x38]
;;;1686     
;;;1687     return HAL_OK;
;;;1688   }
000af8  bc10              POP      {r4}
000afa  2000              MOVS     r0,#0                 ;1687
000afc  4770              BX       lr
                  |L1.2814|
000afe  bc10              POP      {r4}
000b00  2002              MOVS     r0,#2                 ;1668
000b02  4770              BX       lr
;;;1689   
                          ENDP

                  HAL_TIMEx_RemapConfig PROC
;;;1708     */
;;;1709   HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
000b04  f8902038          LDRB     r2,[r0,#0x38]
;;;1710   {
;;;1711     __HAL_LOCK(htim);
000b08  2a01              CMP      r2,#1
000b0a  d00b              BEQ      |L1.2852|
000b0c  2201              MOVS     r2,#1
000b0e  f8802038          STRB     r2,[r0,#0x38]
;;;1712       
;;;1713     /* Check parameters */
;;;1714     assert_param(IS_TIM_REMAP_INSTANCE(htim->Instance));
;;;1715     assert_param(IS_TIM_REMAP(Remap));
;;;1716     
;;;1717     /* Set the Timer remapping configuration */
;;;1718     htim->Instance->OR = Remap;
000b12  6803              LDR      r3,[r0,#0]
000b14  6519              STR      r1,[r3,#0x50]
;;;1719     
;;;1720     htim->State = HAL_TIM_STATE_READY;
000b16  f8802039          STRB     r2,[r0,#0x39]
;;;1721     
;;;1722     __HAL_UNLOCK(htim);  
000b1a  2100              MOVS     r1,#0
000b1c  f8801038          STRB     r1,[r0,#0x38]
;;;1723     
;;;1724     return HAL_OK;
000b20  2000              MOVS     r0,#0
;;;1725   }
000b22  4770              BX       lr
                  |L1.2852|
000b24  2002              MOVS     r0,#2                 ;1711
000b26  4770              BX       lr
;;;1726   /**
                          ENDP

                  HAL_TIMEx_BreakCallback PROC
;;;1764     */
;;;1765   __weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
000b28  4770              BX       lr
;;;1766   {
;;;1767     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1768               the HAL_TIMEx_BreakCallback could be implemented in the user file
;;;1769      */
;;;1770   }
;;;1771   /**
                          ENDP

                  HAL_TIMEx_HallSensor_GetState PROC
;;;1795     */
;;;1796   HAL_TIM_StateTypeDef HAL_TIMEx_HallSensor_GetState(TIM_HandleTypeDef *htim)
000b2a  f8900039          LDRB     r0,[r0,#0x39]
;;;1797   {
;;;1798     return htim->State;
;;;1799   }
000b2e  4770              BX       lr
;;;1800   
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "drivers\\src\\stm32f4xx_hal_tim_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_tim_ex_c_e8ef3920___Z7__REV16j|
#line 138 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.3.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___22_stm32f4xx_hal_tim_ex_c_e8ef3920___Z7__REV16j| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_tim_ex_c_e8ef3920___Z7__REVSHi|
#line 153
|__asm___22_stm32f4xx_hal_tim_ex_c_e8ef3920___Z7__REVSHi| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_tim_ex_c_e8ef3920___Z5__RRXj|
#line 328
|__asm___22_stm32f4xx_hal_tim_ex_c_e8ef3920___Z5__RRXj| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
