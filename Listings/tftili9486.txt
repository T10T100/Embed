; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\objects\tftili9486.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\tftili9486.d --cpu=Cortex-M4.fp --apcs=interwork -O1 -Otime --diag_suppress=9931 -I.\device\GUI\inc -I.\device\hardware\inc -I.\device\init\inc -I.\misc\inc -I.\user\inc -I..\tester_1.03 -I.\memory\inc -I.\drivers\inc -IE:\KeilProj\tester_1_03\Embed\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F417xx -DSTM32F417xx -DColorDepthBpp16 -Dtftili9486 -DSOFTWARE_GL -DGUI_ALLIGN_LAYSIZE_TO_POW2 --omf_browse=.\objects\tftili9486.crf device\hardware\src\TFTili9486.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Z4Testtt PROC ; Test(unsigned short, unsigned short)
;;;119    
;;;120    bool Test (uint16_t x, uint16_t y)
000000  2000              MOVS     r0,#0
;;;121    {
;;;122    		return false;
;;;123    }
000002  4770              BX       lr
;;;124    LcdDriverDef::LcdDriverDef (
                          ENDP

                  _ZN12LcdDriverDefC2EP12GPIO_TypeDefR14SpiSoftTypeDefj                  ; Alternate entry point ; LcdDriverDef::LcdDriverDef__sub_object(GPIO_TypeDef*, SpiSoftTypeDef&, unsigned)
                  _ZN12LcdDriverDefC1EP12GPIO_TypeDefR14SpiSoftTypeDefj PROC ; LcdDriverDef::LcdDriverDef(GPIO_TypeDef*, SpiSoftTypeDef&, unsigned)
;;;125                                 GPIO_TypeDef *RGB_Port,  \
;;;126                                 SpiSoftTypeDef &SPI_Port,\
;;;127                                 uint32_t color_mask      )
;;;128    {
;;;129      this->RGB_Port = RGB_Port;
;;;130      this->SPI_Port = &SPI_Port;
;;;131      this->Color_Mask = color_mask;
;;;132    }
;;;133    
000004  f8dfc3ec          LDR      r12,|L1.1012|
000008  f8c0c000          STR      r12,[r0,#0]
00000c  6041              STR      r1,[r0,#4]
00000e  6082              STR      r2,[r0,#8]
000010  60c3              STR      r3,[r0,#0xc]
000012  4770              BX       lr
                          ENDP

                  _ZN12LcdDriverDef9BacklightEh PROC ; LcdDriverDef::Backlight(unsigned char)
;;;211    
;;;212    void LcdDriverDef::Backlight(uint8_t level)
000014  6802              LDR      r2,[r0,#0]
;;;213    {
;;;214    	this->BcklApply(level);
000016  6852              LDR      r2,[r2,#4]
000018  4710              BX       r2
;;;215    }
;;;216    
                          ENDP

                  _ZN12LcdDriverDef6DotClkEj PROC ; LcdDriverDef::DotClk(unsigned)
;;;39     }
;;;40     void LcdDriverDef::DotClk (uint32_t cnt)
00001a  1e48              SUBS     r0,r1,#1
;;;41     {
00001c  d306              BCC      |L1.44|
;;;42       while (cnt--) {
;;;43           DEV_Pin_Set(Lcd_Clk_Port, LCD_Clk_Pin);
00001e  2204              MOVS     r2,#4
000020  49f5              LDR      r1,|L1.1016|
;;;44     	    DEV_Pin_Clr(Lcd_Clk_Port, LCD_Clk_Pin); 
000022  0413              LSLS     r3,r2,#16
                  |L1.36|
000024  600a              STR      r2,[r1,#0]            ;43
000026  600b              STR      r3,[r1,#0]
000028  1e40              SUBS     r0,r0,#1              ;42
00002a  d2fb              BCS      |L1.36|
                  |L1.44|
;;;45     	}		
;;;46     }
00002c  4770              BX       lr
;;;47     void  LcdDriverDef::HsClk (void)
                          ENDP

                  _ZN12LcdDriverDef5HsClkEv PROC ; LcdDriverDef::HsClk()
00002e  b510              PUSH     {r4,lr}
;;;48     {
;;;49     	DEV_Pin_Clr(Lcd_Den_Port, LCD_Den_Pin); 
000030  4cf1              LDR      r4,|L1.1016|
000032  f44f1100          MOV      r1,#0x200000
000036  6021              STR      r1,[r4,#0]
;;;50     	DEV_Pin_Clr(Lcd_Hsync_Port, LCD_Hsync_Pin);
000038  1089              ASRS     r1,r1,#2
00003a  6021              STR      r1,[r4,#0]
;;;51       this->DotClk(3);
00003c  2103              MOVS     r1,#3
00003e  f7fffffe          BL       _ZN12LcdDriverDef6DotClkEj ; LcdDriverDef::DotClk(unsigned)
;;;52       DEV_Pin_Set(Lcd_Hsync_Port, LCD_Hsync_Pin);
000042  2008              MOVS     r0,#8
000044  6020              STR      r0,[r4,#0]
;;;53       DEV_Pin_Set(Lcd_Den_Port, LCD_Den_Pin); 
000046  2020              MOVS     r0,#0x20
000048  6020              STR      r0,[r4,#0]
;;;54     }
00004a  bd10              POP      {r4,pc}
;;;55     void LcdDriverDef::VsClk (void)
                          ENDP

                  _ZN12LcdDriverDef5VsClkEv PROC ; LcdDriverDef::VsClk()
00004c  b510              PUSH     {r4,lr}
;;;56     {
;;;57     	DEV_Pin_Clr(Lcd_Vsync_Port, LCD_Vsync_Pin); 
00004e  4cea              LDR      r4,|L1.1016|
000050  f44f1180          MOV      r1,#0x100000
000054  6021              STR      r1,[r4,#0]
;;;58       this->HsClk();
000056  f7fffffe          BL       _ZN12LcdDriverDef5HsClkEv ; LcdDriverDef::HsClk()
;;;59       DEV_Pin_Set(Lcd_Vsync_Port, LCD_Vsync_Pin); 
00005a  2010              MOVS     r0,#0x10
00005c  6020              STR      r0,[r4,#0]
;;;60     }
00005e  bd10              POP      {r4,pc}
;;;61     void LcdDriverDef::PutColor (ColorTypeDef color)
                          ENDP

                  _ZN12LcdDriverDef6DotClkEv PROC ; LcdDriverDef::DotClk()
;;;34     }
;;;35     void LcdDriverDef::DotClk (void)
000060  48e5              LDR      r0,|L1.1016|
;;;36     {
;;;37     	DEV_Pin_Set(Lcd_Clk_Port, LCD_Clk_Pin);
000062  2104              MOVS     r1,#4
000064  6001              STR      r1,[r0,#0]
;;;38     	DEV_Pin_Clr(Lcd_Clk_Port, LCD_Clk_Pin); 
000066  0409              LSLS     r1,r1,#16
000068  6001              STR      r1,[r0,#0]
;;;39     }
00006a  4770              BX       lr
;;;40     void LcdDriverDef::DotClk (uint32_t cnt)
                          ENDP

                  _ZN12LcdDriverDef8PutColorEt PROC ; LcdDriverDef::PutColor(unsigned short)
;;;60     }
;;;61     void LcdDriverDef::PutColor (ColorTypeDef color)
00006c  48e3              LDR      r0,|L1.1020|
;;;62     {
;;;63     	DEV_fPort_Out (Lcd_Rgb_Port, color);
00006e  6001              STR      r1,[r0,#0]
;;;64     }
000070  4770              BX       lr
;;;65     uint32_t LcdDriverDef::Fill (ColorTypeDef __color, uint16_t __x, uint16_t __y)
                          ENDP

                  _ZN12LcdDriverDef4FillEttt PROC ; LcdDriverDef::Fill(unsigned short, unsigned short, unsigned short)
000072  b5f0              PUSH     {r4-r7,lr}
;;;66     {
000074  4606              MOV      r6,r0
000076  4615              MOV      r5,r2
000078  461f              MOV      r7,r3
;;;67       this->PutColor(__color);
00007a  4630              MOV      r0,r6
00007c  f7fffffe          BL       _ZN12LcdDriverDef8PutColorEt ; LcdDriverDef::PutColor(unsigned short)
;;;68       for (int i = __x; i > 0; i--) {
000080  2d00              CMP      r5,#0
000082  dd0e              BLE      |L1.162|
                  |L1.132|
;;;69           for (int t = __y; t > 0; t--) {
000084  463c              MOV      r4,r7
000086  2c00              CMP      r4,#0
000088  dd05              BLE      |L1.150|
                  |L1.138|
;;;70               this->DotClk();								
00008a  4630              MOV      r0,r6
00008c  f7fffffe          BL       _ZN12LcdDriverDef6DotClkEv ; LcdDriverDef::DotClk()
000090  1e64              SUBS     r4,r4,#1              ;69
000092  2c00              CMP      r4,#0                 ;69
000094  dcf9              BGT      |L1.138|
                  |L1.150|
;;;71           }
;;;72           this->HsClk();
000096  4630              MOV      r0,r6
000098  f7fffffe          BL       _ZN12LcdDriverDef5HsClkEv ; LcdDriverDef::HsClk()
00009c  1e6d              SUBS     r5,r5,#1              ;68
00009e  2d00              CMP      r5,#0                 ;68
0000a0  dcf0              BGT      |L1.132|
                  |L1.162|
;;;73       }
;;;74       this->VsClk();
0000a2  4630              MOV      r0,r6
0000a4  f7fffffe          BL       _ZN12LcdDriverDef5VsClkEv ; LcdDriverDef::VsClk()
;;;75       return 0;
0000a8  2000              MOVS     r0,#0
;;;76     }
0000aa  bdf0              POP      {r4-r7,pc}
;;;77      
                          ENDP

                  _ZN12LcdDriverDef4FillERK6tImagejj PROC ; LcdDriverDef::Fill(const tImage&, unsigned, unsigned)
;;;78     uint32_t LcdDriverDef::Fill (const tImage &Image, uint32_t __scaleX, uint32_t __scaleY)
0000ac  e92d4ff0          PUSH     {r4-r11,lr}
;;;79     {
0000b0  4680              MOV      r8,r0
0000b2  460c              MOV      r4,r1
0000b4  4692              MOV      r10,r2
0000b6  461f              MOV      r7,r3
;;;80       uint32_t Hcnt = 0;
0000b8  f04f0b00          MOV      r11,#0
;;;81       uint32_t Hscaled = Image.H * __scaleX;
0000bc  88e0              LDRH     r0,[r4,#6]
0000be  fb00f90a          MUL      r9,r0,r10
;;;82       uint32_t Dcnt = __scaleY; 
;;;83       for (int i = 0; i < Hscaled; i++) {
0000c2  2500              MOVS     r5,#0
0000c4  f1b90f00          CMP      r9,#0
0000c8  d92c              BLS      |L1.292|
;;;84           for (int t = 0; t < Image.W; t++) {
;;;85     				   DEV_fPort_Out (this->RGB_Port, *(Image.Image + Hcnt +  t));
;;;86                while (Dcnt--) {
;;;87                      DEV_Pin_Set(Lcd_Clk_Port, LCD_Clk_Pin);
;;;88     	               DEV_Pin_Clr(Lcd_Clk_Port, LCD_Clk_Pin);   
0000ca  f44f2680          MOV      r6,#0x40000
                  |L1.206|
0000ce  2000              MOVS     r0,#0                 ;84
0000d0  88a1              LDRH     r1,[r4,#4]            ;84
0000d2  2900              CMP      r1,#0                 ;84
0000d4  dd1b              BLE      |L1.270|
0000d6  ea4f034b          LSL      r3,r11,#1             ;85
0000da  4ac7              LDR      r2,|L1.1016|
0000dc  f04f0b04          MOV      r11,#4                ;87
                  |L1.224|
0000e0  f8d4c000          LDR      r12,[r4,#0]           ;85
0000e4  eb030140          ADD      r1,r3,r0,LSL #1       ;85
0000e8  f83c1001          LDRH     r1,[r12,r1]           ;85
0000ec  f8d8c004          LDR      r12,[r8,#4]           ;85
0000f0  f8cc1014          STR      r1,[r12,#0x14]        ;85
0000f4  f1b70c01          SUBS     r12,r7,#1             ;86
0000f8  d305              BCC      |L1.262|
                  |L1.250|
0000fa  f8c2b000          STR      r11,[r2,#0]           ;87
0000fe  6016              STR      r6,[r2,#0]
000100  f1bc0c01          SUBS     r12,r12,#1            ;86
000104  d2f9              BCS      |L1.250|
                  |L1.262|
000106  1c40              ADDS     r0,r0,#1              ;84
000108  88a1              LDRH     r1,[r4,#4]            ;84
00010a  4281              CMP      r1,r0                 ;84
00010c  dce8              BGT      |L1.224|
                  |L1.270|
;;;89                } 
;;;90                Dcnt = __scaleY;
;;;91           }
;;;92           Hcnt = (i / __scaleX) * Image.W;
00010e  fbb5f0fa          UDIV     r0,r5,r10
000112  88a1              LDRH     r1,[r4,#4]
000114  fb00fb01          MUL      r11,r0,r1
;;;93           this->HsClk();
000118  4640              MOV      r0,r8
00011a  f7fffffe          BL       _ZN12LcdDriverDef5HsClkEv ; LcdDriverDef::HsClk()
00011e  1c6d              ADDS     r5,r5,#1              ;83
000120  454d              CMP      r5,r9                 ;83
000122  d3d4              BCC      |L1.206|
                  |L1.292|
;;;94       }
;;;95       this->VsClk();
000124  4640              MOV      r0,r8
000126  f7fffffe          BL       _ZN12LcdDriverDef5VsClkEv ; LcdDriverDef::VsClk()
;;;96       return 0;
00012a  2000              MOVS     r0,#0
;;;97     }
00012c  e8bd8ff0          POP      {r4-r11,pc}
;;;98     uint32_t LcdDriverDef::Fill (Frame2D<gbasic_t> &Frame, b2D rect)
                          ENDP

                  _ZN12LcdDriverDef7WrData8Eh PROC ; LcdDriverDef::WrData8(unsigned char)
;;;14     }
;;;15     uint16_t LcdDriverDef::WrData8 (uint8_t __data)
000130  b510              PUSH     {r4,lr}
;;;16     {
;;;17                this->SPI_Port->Send_9bit_Data (1, __data); 
000132  460a              MOV      r2,r1
000134  6880              LDR      r0,[r0,#8]
000136  2101              MOVS     r1,#1
000138  f7fffffe          BL       _ZN14SpiSoftTypeDef14Send_9bit_DataEbh ; SpiSoftTypeDef::Send_9bit_Data(bool, unsigned char)
;;;18                return 0;
00013c  2000              MOVS     r0,#0
;;;19     }		
00013e  bd10              POP      {r4,pc}
;;;20     uint8_t LcdDriverDef::Rd8 (void)
                          ENDP

                  _ZN12LcdDriverDef6WrCmd8Eh PROC ; LcdDriverDef::WrCmd8(unsigned char)
;;;9      }
;;;10     uint16_t LcdDriverDef::WrCmd8 (uint8_t __data)
000140  b510              PUSH     {r4,lr}
;;;11     {
;;;12                this->SPI_Port->Send_9bit_Data (0, __data); 
000142  460a              MOV      r2,r1
000144  6880              LDR      r0,[r0,#8]
000146  2100              MOVS     r1,#0
000148  f7fffffe          BL       _ZN14SpiSoftTypeDef14Send_9bit_DataEbh ; SpiSoftTypeDef::Send_9bit_Data(bool, unsigned char)
;;;13                return 0;
00014c  2000              MOVS     r0,#0
;;;14     }
00014e  bd10              POP      {r4,pc}
;;;15     uint16_t LcdDriverDef::WrData8 (uint8_t __data)
                          ENDP

                  _ZN12LcdDriverDef6WindowEtttt PROC ; LcdDriverDef::Window(unsigned short, unsigned short, unsigned short, unsigned short)
;;;133    
;;;134    uint16_t LcdDriverDef::Window (uint16_t __X, uint16_t __Y, uint16_t __dW, uint16_t __dH)
000150  b570              PUSH     {r4-r6,lr}
;;;135    	{
000152  b082              SUB      sp,sp,#8
000154  460c              MOV      r4,r1
000156  9906              LDR      r1,[sp,#0x18]
000158  4606              MOV      r6,r0
00015a  461d              MOV      r5,r3
;;;136    		__IntToByte __TransferA, __TransferB;
;;;137    		__TransferA.Int = __Y;
00015c  9201              STR      r2,[sp,#4]
;;;138    		__TransferB.Int = __Y + __dH;
00015e  1850              ADDS     r0,r2,r1
000160  9000              STR      r0,[sp,#0]
;;;139            
;;;140    		this->WrCmd8(LcdCmdCASET);
000162  212a              MOVS     r1,#0x2a
000164  4630              MOV      r0,r6
000166  f7fffffe          BL       _ZN12LcdDriverDef6WrCmd8Eh ; LcdDriverDef::WrCmd8(unsigned char)
;;;141    		this->WrData8(__TransferA.Byte[1]);
00016a  f89d1005          LDRB     r1,[sp,#5]
00016e  4630              MOV      r0,r6
000170  f7fffffe          BL       _ZN12LcdDriverDef7WrData8Eh ; LcdDriverDef::WrData8(unsigned char)
;;;142    		this->WrData8(__TransferA.Byte[0]);
000174  f89d1004          LDRB     r1,[sp,#4]
000178  4630              MOV      r0,r6
00017a  f7fffffe          BL       _ZN12LcdDriverDef7WrData8Eh ; LcdDriverDef::WrData8(unsigned char)
;;;143    		this->WrData8(__TransferB.Byte[1]);
00017e  f89d1001          LDRB     r1,[sp,#1]
000182  4630              MOV      r0,r6
000184  f7fffffe          BL       _ZN12LcdDriverDef7WrData8Eh ; LcdDriverDef::WrData8(unsigned char)
;;;144    		this->WrData8(__TransferB.Byte[0]);
000188  f89d1000          LDRB     r1,[sp,#0]
00018c  4630              MOV      r0,r6
00018e  f7fffffe          BL       _ZN12LcdDriverDef7WrData8Eh ; LcdDriverDef::WrData8(unsigned char)
;;;145    		__TransferA.Int = __X;
000192  9401              STR      r4,[sp,#4]
;;;146    		__TransferB.Int = __X + __dW;
000194  1960              ADDS     r0,r4,r5
000196  9000              STR      r0,[sp,#0]
;;;147    		this->WrCmd8(LcdCmdPASET);
000198  212b              MOVS     r1,#0x2b
00019a  4630              MOV      r0,r6
00019c  f7fffffe          BL       _ZN12LcdDriverDef6WrCmd8Eh ; LcdDriverDef::WrCmd8(unsigned char)
;;;148    		this->WrData8(__TransferA.Byte[1]);
0001a0  f89d1005          LDRB     r1,[sp,#5]
0001a4  4630              MOV      r0,r6
0001a6  f7fffffe          BL       _ZN12LcdDriverDef7WrData8Eh ; LcdDriverDef::WrData8(unsigned char)
;;;149    		this->WrData8(__TransferA.Byte[0]);
0001aa  f89d1004          LDRB     r1,[sp,#4]
0001ae  4630              MOV      r0,r6
0001b0  f7fffffe          BL       _ZN12LcdDriverDef7WrData8Eh ; LcdDriverDef::WrData8(unsigned char)
;;;150    		this->WrData8(__TransferB.Byte[1]);
0001b4  f89d1001          LDRB     r1,[sp,#1]
0001b8  4630              MOV      r0,r6
0001ba  f7fffffe          BL       _ZN12LcdDriverDef7WrData8Eh ; LcdDriverDef::WrData8(unsigned char)
;;;151    		this->WrData8(__TransferB.Byte[0]);
0001be  f89d1000          LDRB     r1,[sp,#0]
0001c2  4630              MOV      r0,r6
0001c4  f7fffffe          BL       _ZN12LcdDriverDef7WrData8Eh ; LcdDriverDef::WrData8(unsigned char)
;;;152            
;;;153        this->DotClk(1);this->VsClk();
0001c8  2101              MOVS     r1,#1
0001ca  4630              MOV      r0,r6
0001cc  f7fffffe          BL       _ZN12LcdDriverDef6DotClkEj ; LcdDriverDef::DotClk(unsigned)
0001d0  4630              MOV      r0,r6
0001d2  f7fffffe          BL       _ZN12LcdDriverDef5VsClkEv ; LcdDriverDef::VsClk()
;;;154    		return 0;
;;;155    	}
0001d6  b002              ADD      sp,sp,#8
0001d8  2000              MOVS     r0,#0                 ;154
0001da  bd70              POP      {r4-r6,pc}
;;;156    	
                          ENDP

                  _ZN12LcdDriverDef4FillER7Frame2DIsE3b2D PROC ; LcdDriverDef::Fill(Frame2D<short>&, b2D)
;;;97     }
;;;98     uint32_t LcdDriverDef::Fill (Frame2D<gbasic_t> &Frame, b2D rect)
0001dc  e92d4fff          PUSH     {r0-r11,lr}
;;;99     {
0001e0  b085              SUB      sp,sp,#0x14
0001e2  4606              MOV      r6,r0
0001e4  4689              MOV      r9,r1
;;;100    	uint32_t W = rect.w, H = rect.h;
0001e6  f9bdb020          LDRSH    r11,[sp,#0x20]
0001ea  f9bda022          LDRSH    r10,[sp,#0x22]
;;;101    	uint32_t h = Frame.GetH();
0001ee  4648              MOV      r0,r9
0001f0  f7fffffe          BL       _ZN7Frame2DIsE4GetHEv ; Frame2D<short>::GetH()
0001f4  eebc0ac0          VCVT.U32.F32 s0,s0
0001f8  ee108a10          VMOV     r8,s0
;;;102    	uint32_t h0 = Frame.GetRect().y + rect.y;
0001fc  4649              MOV      r1,r9
0001fe  4668              MOV      r0,sp
000200  f7fffffe          BL       _ZN7Frame2DIsE7GetRectEv ; Frame2D<short>::GetRect()
000204  9800              LDR      r0,[sp,#0]
000206  9901              LDR      r1,[sp,#4]
000208  9002              STR      r0,[sp,#8]
00020a  9103              STR      r1,[sp,#0xc]
00020c  f9bd000a          LDRSH    r0,[sp,#0xa]
000210  f9bd101e          LDRSH    r1,[sp,#0x1e]
000214  1847              ADDS     r7,r0,r1
;;;103    	uint32_t D = (W + Frame.GetRect().x + rect.x) * h;
000216  4649              MOV      r1,r9
000218  4668              MOV      r0,sp
00021a  f7fffffe          BL       _ZN7Frame2DIsE7GetRectEv ; Frame2D<short>::GetRect()
00021e  9800              LDR      r0,[sp,#0]
000220  9901              LDR      r1,[sp,#4]
000222  9002              STR      r0,[sp,#8]
000224  9103              STR      r1,[sp,#0xc]
000226  f9bd0008          LDRSH    r0,[sp,#8]
00022a  f9bd101c          LDRSH    r1,[sp,#0x1c]
00022e  4458              ADD      r0,r0,r11
000230  4408              ADD      r0,r0,r1
000232  fb00f408          MUL      r4,r0,r8
;;;104    	uint32_t nClk = LCD_Clk_Pin << 16;
000236  f44f2580          MOV      r5,#0x40000
;;;105    	ColorTypeDef *Memo = Frame.GetBuff();
00023a  4648              MOV      r0,r9
00023c  f7fffffe          BL       _ZN7Frame2DIsE7GetBuffEv ; Frame2D<short>::GetBuff()
000240  4681              MOV      r9,r0
;;;106    	this->Window(0, 0, W, H);
000242  fa1ff08a          UXTH     r0,r10
000246  2200              MOVS     r2,#0
000248  9000              STR      r0,[sp,#0]
00024a  fa1ff38b          UXTH     r3,r11
00024e  4611              MOV      r1,r2
000250  4630              MOV      r0,r6
000252  f7fffffe          BL       _ZN12LcdDriverDef6WindowEtttt ; LcdDriverDef::Window(unsigned short, unsigned short, unsigned short, unsigned short)
;;;107    	
;;;108      for (int32_t __x = D; __x > 0 ; __x -= h) { 
000256  2c00              CMP      r4,#0
000258  dd1a              BLE      |L1.656|
;;;109          for (uint32_t __y = h0; __y < H + h0; __y++) {
;;;110    				  DEV_fPort_Out (this->RGB_Port, *(Memo + __y + __x));
;;;111              DEV_Pin_Set(Lcd_Clk_Port, LCD_Clk_Pin);
00025a  f8dfb19c          LDR      r11,|L1.1016|
00025e  44ba              ADD      r10,r10,r7            ;109
                  |L1.608|
000260  4638              MOV      r0,r7                 ;109
000262  4582              CMP      r10,r0                ;109
000264  d90d              BLS      |L1.642|
000266  2104              MOVS     r1,#4
                  |L1.616|
000268  eb090240          ADD      r2,r9,r0,LSL #1       ;110
00026c  6873              LDR      r3,[r6,#4]            ;110
00026e  f8322014          LDRH     r2,[r2,r4,LSL #1]     ;110
000272  615a              STR      r2,[r3,#0x14]         ;110
000274  f8cb1000          STR      r1,[r11,#0]
;;;112              DEV_Pin_Set(Lcd_Clk_Port, nClk);  
000278  f8cb5000          STR      r5,[r11,#0]
00027c  1c40              ADDS     r0,r0,#1              ;109
00027e  4582              CMP      r10,r0                ;109
000280  d8f2              BHI      |L1.616|
                  |L1.642|
;;;113          }
;;;114          this->HsClk();
000282  4630              MOV      r0,r6
000284  f7fffffe          BL       _ZN12LcdDriverDef5HsClkEv ; LcdDriverDef::HsClk()
000288  eba40408          SUB      r4,r4,r8              ;108
00028c  2c00              CMP      r4,#0                 ;108
00028e  dce7              BGT      |L1.608|
                  |L1.656|
;;;115      }
;;;116      this->VsClk();
000290  4630              MOV      r0,r6
000292  f7fffffe          BL       _ZN12LcdDriverDef5VsClkEv ; LcdDriverDef::VsClk()
;;;117      return 0;
;;;118    }
000296  b009              ADD      sp,sp,#0x24
000298  2000              MOVS     r0,#0                 ;117
00029a  e8bd8ff0          POP      {r4-r11,pc}
;;;119    
                          ENDP

                  _ZN12LcdDriverDef5RstHwEv PROC ; LcdDriverDef::RstHw()
;;;24     }
;;;25     uint16_t LcdDriverDef::RstHw (void)
00029e  b570              PUSH     {r4-r6,lr}
;;;26     {
;;;27     	DEV_Pin_Set(Lcd_Reset_Port, LCD_Reset_Pin);
0002a0  4c57              LDR      r4,|L1.1024|
0002a2  2510              MOVS     r5,#0x10
0002a4  6025              STR      r5,[r4,#0]
;;;28       HAL_Delay(1);
0002a6  2001              MOVS     r0,#1
0002a8  f7fffffe          BL       HAL_Delay
;;;29     	DEV_Pin_Clr(Lcd_Reset_Port, LCD_Reset_Pin);
0002ac  0428              LSLS     r0,r5,#16
0002ae  6020              STR      r0,[r4,#0]
;;;30     	HAL_Delay(1);
0002b0  2001              MOVS     r0,#1
0002b2  f7fffffe          BL       HAL_Delay
;;;31     	DEV_Pin_Set(Lcd_Reset_Port, LCD_Reset_Pin);
0002b6  6025              STR      r5,[r4,#0]
;;;32       HAL_Delay(150);  
0002b8  2096              MOVS     r0,#0x96
0002ba  f7fffffe          BL       HAL_Delay
;;;33       return 0; 
0002be  2000              MOVS     r0,#0
;;;34     }
0002c0  bd70              POP      {r4-r6,pc}
;;;35     void LcdDriverDef::DotClk (void)
                          ENDP

                  _ZN12LcdDriverDef4InitEj PROC ; LcdDriverDef::Init(unsigned)
;;;156    	
;;;157    uint16_t LcdDriverDef::Init (uint32_t __mode)
0002c2  b510              PUSH     {r4,lr}
;;;158    {
0002c4  4604              MOV      r4,r0
;;;159    	this->RstHw();
0002c6  4620              MOV      r0,r4
0002c8  f7fffffe          BL       _ZN12LcdDriverDef5RstHwEv ; LcdDriverDef::RstHw()
;;;160    	this->WrCmd8(LcdCmdSWRESET);//Soft Reset
0002cc  2101              MOVS     r1,#1
0002ce  4620              MOV      r0,r4
0002d0  f7fffffe          BL       _ZN12LcdDriverDef6WrCmd8Eh ; LcdDriverDef::WrCmd8(unsigned char)
;;;161    	HAL_Delay(150);
0002d4  2096              MOVS     r0,#0x96
0002d6  f7fffffe          BL       HAL_Delay
;;;162    	
;;;163    	this->WrCmd8(LcdCmdPWCTRL1);//power control
0002da  21c0              MOVS     r1,#0xc0
0002dc  4620              MOV      r0,r4
0002de  f7fffffe          BL       _ZN12LcdDriverDef6WrCmd8Eh ; LcdDriverDef::WrCmd8(unsigned char)
;;;164    	this->WrData8(0x15);//Vreg1out
0002e2  2115              MOVS     r1,#0x15
0002e4  4620              MOV      r0,r4
0002e6  f7fffffe          BL       _ZN12LcdDriverDef7WrData8Eh ; LcdDriverDef::WrData8(unsigned char)
;;;165    	this->WrData8(0x12);//Vreg2out
0002ea  2112              MOVS     r1,#0x12
0002ec  4620              MOV      r0,r4
0002ee  f7fffffe          BL       _ZN12LcdDriverDef7WrData8Eh ; LcdDriverDef::WrData8(unsigned char)
;;;166    	
;;;167    	this->WrCmd8(LcdCmdPWCTRL2);//power control2
0002f2  21c1              MOVS     r1,#0xc1
0002f4  4620              MOV      r0,r4
0002f6  f7fffffe          BL       _ZN12LcdDriverDef6WrCmd8Eh ; LcdDriverDef::WrCmd8(unsigned char)
;;;168    	this->WrData8(0x41);//VGH/VGL
0002fa  2141              MOVS     r1,#0x41
0002fc  4620              MOV      r0,r4
0002fe  f7fffffe          BL       _ZN12LcdDriverDef7WrData8Eh ; LcdDriverDef::WrData8(unsigned char)
;;;169    	
;;;170    	this->WrCmd8(LcdCmdVMCTRL);//VCOM Control 1
000302  21c5              MOVS     r1,#0xc5
000304  4620              MOV      r0,r4
000306  f7fffffe          BL       _ZN12LcdDriverDef6WrCmd8Eh ; LcdDriverDef::WrCmd8(unsigned char)
;;;171    	this->WrData8(0x00);//nVM
00030a  2100              MOVS     r1,#0
00030c  4620              MOV      r0,r4
00030e  f7fffffe          BL       _ZN12LcdDriverDef7WrData8Eh ; LcdDriverDef::WrData8(unsigned char)
;;;172    	this->WrData8(0x4A);//VCM_REG [7:0] 
000312  214a              MOVS     r1,#0x4a
000314  4620              MOV      r0,r4
000316  f7fffffe          BL       _ZN12LcdDriverDef7WrData8Eh ; LcdDriverDef::WrData8(unsigned char)
;;;173    	this->WrData8(0x80);//VCM_REG_EN 
00031a  2180              MOVS     r1,#0x80
00031c  4620              MOV      r0,r4
00031e  f7fffffe          BL       _ZN12LcdDriverDef7WrData8Eh ; LcdDriverDef::WrData8(unsigned char)
;;;174    	
;;;175    	this->WrCmd8(LcdCmdMADCTL);//memory access
000322  2136              MOVS     r1,#0x36
000324  4620              MOV      r0,r4
000326  f7fffffe          BL       _ZN12LcdDriverDef6WrCmd8Eh ; LcdDriverDef::WrCmd8(unsigned char)
;;;176    	this->WrData8(0x48);//
00032a  2148              MOVS     r1,#0x48
00032c  4620              MOV      r0,r4
00032e  f7fffffe          BL       _ZN12LcdDriverDef7WrData8Eh ; LcdDriverDef::WrData8(unsigned char)
;;;177        
;;;178    	this->WrCmd8(LcdCmdCOLMOD);//Interface Pixel Format
000332  213a              MOVS     r1,#0x3a
000334  4620              MOV      r0,r4
000336  f7fffffe          BL       _ZN12LcdDriverDef6WrCmd8Eh ; LcdDriverDef::WrCmd8(unsigned char)
;;;179    	this->WrData8(0x50);//
00033a  2150              MOVS     r1,#0x50
00033c  4620              MOV      r0,r4
00033e  f7fffffe          BL       _ZN12LcdDriverDef7WrData8Eh ; LcdDriverDef::WrData8(unsigned char)
;;;180    	
;;;181    	this->WrCmd8(LcdCmdIFMODE);//Interface Mode Control 
000342  21b0              MOVS     r1,#0xb0
000344  4620              MOV      r0,r4
000346  f7fffffe          BL       _ZN12LcdDriverDef6WrCmd8Eh ; LcdDriverDef::WrCmd8(unsigned char)
;;;182    	this->WrData8(0x02);//
00034a  2102              MOVS     r1,#2
00034c  4620              MOV      r0,r4
00034e  f7fffffe          BL       _ZN12LcdDriverDef7WrData8Eh ; LcdDriverDef::WrData8(unsigned char)
;;;183    	
;;;184    	this->WrCmd8(LcdCmdINVTR);//Display Inversion Control
000352  21b4              MOVS     r1,#0xb4
000354  4620              MOV      r0,r4
000356  f7fffffe          BL       _ZN12LcdDriverDef6WrCmd8Eh ; LcdDriverDef::WrCmd8(unsigned char)
;;;185    	this->WrData8(0x00);//
00035a  2100              MOVS     r1,#0
00035c  4620              MOV      r0,r4
00035e  f7fffffe          BL       _ZN12LcdDriverDef7WrData8Eh ; LcdDriverDef::WrData8(unsigned char)
;;;186    	
;;;187    	this->WrCmd8(LcdCmdDISCTRL);//RGB/MCU interface
000362  21b6              MOVS     r1,#0xb6
000364  4620              MOV      r0,r4
000366  f7fffffe          BL       _ZN12LcdDriverDef6WrCmd8Eh ; LcdDriverDef::WrCmd8(unsigned char)
;;;188    	this->WrData8(0x20);//
00036a  2120              MOVS     r1,#0x20
00036c  4620              MOV      r0,r4
00036e  f7fffffe          BL       _ZN12LcdDriverDef7WrData8Eh ; LcdDriverDef::WrData8(unsigned char)
;;;189      this->WrData8(0x0F);//source/Gate direction
000372  210f              MOVS     r1,#0xf
000374  4620              MOV      r0,r4
000376  f7fffffe          BL       _ZN12LcdDriverDef7WrData8Eh ; LcdDriverDef::WrData8(unsigned char)
;;;190    	
;;;191    	this->WrCmd8(LcdCmdSETIMAGE);//set image function
00037a  21e9              MOVS     r1,#0xe9
00037c  4620              MOV      r0,r4
00037e  f7fffffe          BL       _ZN12LcdDriverDef6WrCmd8Eh ; LcdDriverDef::WrCmd8(unsigned char)
;;;192      this->WrData8(0x00);//disable 24 bit data input
000382  2100              MOVS     r1,#0
000384  4620              MOV      r0,r4
000386  f7fffffe          BL       _ZN12LcdDriverDef7WrData8Eh ; LcdDriverDef::WrData8(unsigned char)
;;;193    	
;;;194    	
;;;195    	
;;;196      this->WrCmd8(LcdCmdAdjustControl3);//adjust control
00038a  21f7              MOVS     r1,#0xf7
00038c  4620              MOV      r0,r4
00038e  f7fffffe          BL       _ZN12LcdDriverDef6WrCmd8Eh ; LcdDriverDef::WrCmd8(unsigned char)
;;;197    	this->WrData8(0xA9);//
000392  21a9              MOVS     r1,#0xa9
000394  4620              MOV      r0,r4
000396  f7fffffe          BL       _ZN12LcdDriverDef7WrData8Eh ; LcdDriverDef::WrData8(unsigned char)
;;;198    	this->WrData8(0x52);//
00039a  2152              MOVS     r1,#0x52
00039c  4620              MOV      r0,r4
00039e  f7fffffe          BL       _ZN12LcdDriverDef7WrData8Eh ; LcdDriverDef::WrData8(unsigned char)
;;;199    	this->WrData8(0x2C);//
0003a2  212c              MOVS     r1,#0x2c
0003a4  4620              MOV      r0,r4
0003a6  f7fffffe          BL       _ZN12LcdDriverDef7WrData8Eh ; LcdDriverDef::WrData8(unsigned char)
;;;200    	this->WrData8(0x82);//
0003aa  2182              MOVS     r1,#0x82
0003ac  4620              MOV      r0,r4
0003ae  f7fffffe          BL       _ZN12LcdDriverDef7WrData8Eh ; LcdDriverDef::WrData8(unsigned char)
;;;201    	
;;;202    	
;;;203    	HAL_Delay(150);
0003b2  2096              MOVS     r0,#0x96
0003b4  f7fffffe          BL       HAL_Delay
;;;204    	this->WrCmd8(LcdCmdSLPOUT);//Sleep Out
0003b8  2111              MOVS     r1,#0x11
0003ba  4620              MOV      r0,r4
0003bc  f7fffffe          BL       _ZN12LcdDriverDef6WrCmd8Eh ; LcdDriverDef::WrCmd8(unsigned char)
;;;205    	HAL_Delay(150);
0003c0  2096              MOVS     r0,#0x96
0003c2  f7fffffe          BL       HAL_Delay
;;;206    	this->WrCmd8(LcdCmdDISON);//Display On
0003c6  2129              MOVS     r1,#0x29
0003c8  4620              MOV      r0,r4
0003ca  f7fffffe          BL       _ZN12LcdDriverDef6WrCmd8Eh ; LcdDriverDef::WrCmd8(unsigned char)
;;;207    	HAL_Delay(15);
0003ce  200f              MOVS     r0,#0xf
0003d0  f7fffffe          BL       HAL_Delay
;;;208        
;;;209      return 0;
0003d4  2000              MOVS     r0,#0
;;;210    }
0003d6  bd10              POP      {r4,pc}
;;;211    
                          ENDP

                  _ZN12LcdDriverDef10DummyCycleEj PROC ; LcdDriverDef::DummyCycle(unsigned)
                  |L1.984|
;;;5      
;;;6      void LcdDriverDef::DummyCycle (uint32_t __cnt)
0003d8  1e49              SUBS     r1,r1,#1
;;;7      {
;;;8      	while (__cnt--);
0003da  d2fd              BCS      |L1.984|
;;;9      }
0003dc  4770              BX       lr
;;;10     uint16_t LcdDriverDef::WrCmd8 (uint8_t __data)
                          ENDP

                  _ZN12LcdDriverDef3Rd8Ev PROC ; LcdDriverDef::Rd8()
;;;19     }		
;;;20     uint8_t LcdDriverDef::Rd8 (void)
0003de  b510              PUSH     {r4,lr}
;;;21     {
0003e0  4604              MOV      r4,r0
;;;22       this->WrCmd8( 0xDA);
0003e2  21da              MOVS     r1,#0xda
0003e4  4620              MOV      r0,r4
0003e6  f7fffffe          BL       _ZN12LcdDriverDef6WrCmd8Eh ; LcdDriverDef::WrCmd8(unsigned char)
;;;23     	return this->SPI_Port->Read_8bit_Data();
0003ea  68a0              LDR      r0,[r4,#8]
0003ec  e8bd4010          POP      {r4,lr}
0003f0  f7ffbffe          B.W      _ZN14SpiSoftTypeDef14Read_8bit_DataEv ; SpiSoftTypeDef::Read_8bit_Data()
;;;24     }
;;;25     uint16_t LcdDriverDef::RstHw (void)
                          ENDP

                  |L1.1012|
                          DCD      _ZTV12LcdDriverDef+0x8 ; vtable for LcdDriverDef
                  |L1.1016|
                          DCD      0x40021c18
                  |L1.1020|
                          DCD      0x40020414
                  |L1.1024|
                          DCD      0x40020818

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||t._ZN7Frame2DIsE7GetBuffEv||, COMGROUP=_ZN7Frame2DIsE7GetBuffEv, CODE, READONLY, ALIGN=1

                  _ZN7Frame2DIsE7GetBuffEv PROC ; Frame2D<short>::GetBuff()
;;;92     template <typename T>
;;;93     ColorTypeDef *Frame2D<T>::GetBuff ()
000000  6900              LDR      r0,[r0,#0x10]
;;;94     {
;;;95     	return this->Data.Frame;
;;;96     }
000002  4770              BX       lr
;;;97     
                          ENDP


                          AREA ||area_number.16||, COMGROUP=_ZN7Frame2DIsE7GetBuffEv, LINKORDER=||t._ZN7Frame2DIsE7GetBuffEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN7Frame2DIsE7GetBuffEv||
                          DCD      0x00000001

                          AREA ||t._ZN7Frame2DIsE7GetRectEv||, COMGROUP=_ZN7Frame2DIsE7GetRectEv, CODE, READONLY, ALIGN=1

                  _ZN7Frame2DIsE7GetRectEv PROC ; Frame2D<short>::GetRect()
;;;73     template <typename T>
;;;74     b2D Frame2D<T>::GetRect ()
000000  b082              SUB      sp,sp,#8
;;;75     {
;;;76     	b2D rect = {this->Data.glo_x, this->Data.glo_y, this->Data.W, this->Data.H};
000002  8b0a              LDRH     r2,[r1,#0x18]
000004  f8ad2000          STRH     r2,[sp,#0]
000008  8b4a              LDRH     r2,[r1,#0x1a]
00000a  f8ad2002          STRH     r2,[sp,#2]
00000e  8a8a              LDRH     r2,[r1,#0x14]
000010  f8ad2004          STRH     r2,[sp,#4]
000014  8ac9              LDRH     r1,[r1,#0x16]
000016  f8ad1006          STRH     r1,[sp,#6]
;;;77     	return rect;
00001a  9900              LDR      r1,[sp,#0]
00001c  6001              STR      r1,[r0,#0]
00001e  9901              LDR      r1,[sp,#4]
000020  6041              STR      r1,[r0,#4]
;;;78     }
000022  b002              ADD      sp,sp,#8
000024  4770              BX       lr
;;;79     
                          ENDP


                          AREA ||area_number.23||, COMGROUP=_ZN7Frame2DIsE7GetRectEv, LINKORDER=||t._ZN7Frame2DIsE7GetRectEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN7Frame2DIsE7GetRectEv||
                          DCD      0x00000001

                          AREA ||t._ZN7Frame2DIsE4GetHEv||, COMGROUP=_ZN7Frame2DIsE4GetHEv, CODE, READONLY, ALIGN=1

                  _ZN7Frame2DIsE4GetHEv PROC ; Frame2D<short>::GetH()
;;;80     template <typename T>
;;;81     float Frame2D<T>::GetH ()
000000  f9b00016          LDRSH    r0,[r0,#0x16]
;;;82     {
;;;83     	return this->Data.H;
000004  ee000a10          VMOV     s0,r0
000008  eeb80ac0          VCVT.F32.S32 s0,s0
;;;84     }
00000c  4770              BX       lr
;;;85     
                          ENDP


                          AREA ||area_number.30||, COMGROUP=_ZN7Frame2DIsE4GetHEv, LINKORDER=||t._ZN7Frame2DIsE4GetHEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN7Frame2DIsE4GetHEv||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "device\\hardware\\src\\TFTili9486.cpp"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_TFTili9486_cpp_784f4d3d___Z7__REV16j|
#line 138 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.3.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_TFTili9486_cpp_784f4d3d___Z7__REV16j| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_TFTili9486_cpp_784f4d3d___Z7__REVSHi|
#line 153
|__asm___14_TFTili9486_cpp_784f4d3d___Z7__REVSHi| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_TFTili9486_cpp_784f4d3d___Z5__RRXj|
#line 328
|__asm___14_TFTili9486_cpp_784f4d3d___Z5__RRXj| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
