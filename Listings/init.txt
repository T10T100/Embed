; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\objects\init.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\init.d --cpu=Cortex-M4.fp --apcs=interwork -O1 -Otime --diag_suppress=9931 -I.\device\GUI\inc -I.\device\hardware\inc -I.\device\init\inc -I.\misc\inc -I.\user\inc -I..\tester_1.03 -I.\memory\inc -I.\drivers\inc -ID:\myKeil\tester_1.03\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F417xx -DSTM32F417xx -DColorDepthBpp16 -Dtftili9486 -DSOFTWARE_GL -DGUI_ALLIGN_LAYSIZE_TO_POW2 --omf_browse=.\objects\init.crf device\init\src\init.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Z13Error_Handlerv PROC ; Error_Handler()
                  |L1.0|
;;;11     
;;;12     void Error_Handler(void)
000000  e7fe              B        |L1.0|
;;;13     {
;;;14       /* User may add here some code to deal with this error */
;;;15       while(1)
;;;16       {
;;;17       }
;;;18     }
;;;19     
                          ENDP

                  _Z11ClockEnablev PROC ; ClockEnable()
;;;20     void ClockEnable (void)
000002  b081              SUB      sp,sp,#4
;;;21     {
;;;22       __GPIOA_CLK_ENABLE();
000004  48fe              LDR      r0,|L1.1024|
000006  6801              LDR      r1,[r0,#0]
000008  f0410101          ORR      r1,r1,#1
00000c  6001              STR      r1,[r0,#0]
00000e  6801              LDR      r1,[r0,#0]
000010  f0010101          AND      r1,r1,#1
000014  9100              STR      r1,[sp,#0]
;;;23       __GPIOB_CLK_ENABLE();
000016  6801              LDR      r1,[r0,#0]
000018  f0410102          ORR      r1,r1,#2
00001c  6001              STR      r1,[r0,#0]
00001e  6801              LDR      r1,[r0,#0]
000020  f0010102          AND      r1,r1,#2
000024  9100              STR      r1,[sp,#0]
;;;24       __GPIOC_CLK_ENABLE();
000026  6801              LDR      r1,[r0,#0]
000028  f0410104          ORR      r1,r1,#4
00002c  6001              STR      r1,[r0,#0]
00002e  6801              LDR      r1,[r0,#0]
000030  f0010104          AND      r1,r1,#4
000034  9100              STR      r1,[sp,#0]
;;;25       __GPIOD_CLK_ENABLE();
000036  6801              LDR      r1,[r0,#0]
000038  f0410108          ORR      r1,r1,#8
00003c  6001              STR      r1,[r0,#0]
00003e  6801              LDR      r1,[r0,#0]
000040  f0010108          AND      r1,r1,#8
000044  9100              STR      r1,[sp,#0]
;;;26       __GPIOE_CLK_ENABLE();
000046  6801              LDR      r1,[r0,#0]
000048  f0410110          ORR      r1,r1,#0x10
00004c  6001              STR      r1,[r0,#0]
00004e  6801              LDR      r1,[r0,#0]
000050  f0010110          AND      r1,r1,#0x10
000054  9100              STR      r1,[sp,#0]
;;;27     	__GPIOF_CLK_ENABLE();
000056  6801              LDR      r1,[r0,#0]
000058  f0410120          ORR      r1,r1,#0x20
00005c  6001              STR      r1,[r0,#0]
00005e  6801              LDR      r1,[r0,#0]
000060  f0010120          AND      r1,r1,#0x20
000064  9100              STR      r1,[sp,#0]
;;;28     	__GPIOG_CLK_ENABLE();
000066  6801              LDR      r1,[r0,#0]
000068  f0410140          ORR      r1,r1,#0x40
00006c  6001              STR      r1,[r0,#0]
00006e  6801              LDR      r1,[r0,#0]
000070  f0010140          AND      r1,r1,#0x40
000074  9100              STR      r1,[sp,#0]
;;;29     	__GPIOH_CLK_ENABLE();
000076  6801              LDR      r1,[r0,#0]
000078  f0410180          ORR      r1,r1,#0x80
00007c  6001              STR      r1,[r0,#0]
00007e  6801              LDR      r1,[r0,#0]
000080  f0010180          AND      r1,r1,#0x80
000084  9100              STR      r1,[sp,#0]
;;;30       __ADC1_CLK_ENABLE();
000086  49df              LDR      r1,|L1.1028|
000088  680a              LDR      r2,[r1,#0]
00008a  f4427280          ORR      r2,r2,#0x100
00008e  600a              STR      r2,[r1,#0]
000090  680a              LDR      r2,[r1,#0]
000092  f4027280          AND      r2,r2,#0x100
000096  9200              STR      r2,[sp,#0]
;;;31       __ADC2_CLK_ENABLE();
000098  680a              LDR      r2,[r1,#0]
00009a  f4427200          ORR      r2,r2,#0x200
00009e  600a              STR      r2,[r1,#0]
0000a0  680a              LDR      r2,[r1,#0]
0000a2  f4027200          AND      r2,r2,#0x200
0000a6  9200              STR      r2,[sp,#0]
;;;32       __DAC_CLK_ENABLE();
0000a8  1f0a              SUBS     r2,r1,#4
0000aa  6813              LDR      r3,[r2,#0]
0000ac  f0435300          ORR      r3,r3,#0x20000000
0000b0  6013              STR      r3,[r2,#0]
0000b2  6813              LDR      r3,[r2,#0]
0000b4  f0035300          AND      r3,r3,#0x20000000
0000b8  9300              STR      r3,[sp,#0]
;;;33       __FSMC_CLK_ENABLE();
0000ba  4bd3              LDR      r3,|L1.1032|
0000bc  f8d3c000          LDR      r12,[r3,#0]
0000c0  f04c0c01          ORR      r12,r12,#1
0000c4  f8c3c000          STR      r12,[r3,#0]
0000c8  681b              LDR      r3,[r3,#0]
0000ca  f0030301          AND      r3,r3,#1
0000ce  9300              STR      r3,[sp,#0]
;;;34       __SPI2_CLK_ENABLE();
0000d0  6813              LDR      r3,[r2,#0]
0000d2  f4434380          ORR      r3,r3,#0x4000
0000d6  6013              STR      r3,[r2,#0]
0000d8  6813              LDR      r3,[r2,#0]
0000da  f4034380          AND      r3,r3,#0x4000
0000de  9300              STR      r3,[sp,#0]
;;;35       __DMA2_CLK_ENABLE();
0000e0  6803              LDR      r3,[r0,#0]
0000e2  f4430380          ORR      r3,r3,#0x400000
0000e6  6003              STR      r3,[r0,#0]
0000e8  6800              LDR      r0,[r0,#0]
0000ea  f4000080          AND      r0,r0,#0x400000
0000ee  9000              STR      r0,[sp,#0]
;;;36       __TIM1_CLK_ENABLE();
0000f0  6808              LDR      r0,[r1,#0]
0000f2  f0400001          ORR      r0,r0,#1
0000f6  6008              STR      r0,[r1,#0]
0000f8  6808              LDR      r0,[r1,#0]
0000fa  f0000001          AND      r0,r0,#1
0000fe  9000              STR      r0,[sp,#0]
;;;37       __TIM2_CLK_ENABLE();
000100  6810              LDR      r0,[r2,#0]
000102  f0400001          ORR      r0,r0,#1
000106  6010              STR      r0,[r2,#0]
000108  6810              LDR      r0,[r2,#0]
00010a  f0000001          AND      r0,r0,#1
00010e  9000              STR      r0,[sp,#0]
;;;38     }
000110  b001              ADD      sp,sp,#4
000112  4770              BX       lr
;;;39     
                          ENDP

                  _Z18SystemClock_Configv PROC ; SystemClock_Config()
;;;40     void SystemClock_Config(void)
000114  b510              PUSH     {r4,lr}
;;;41     {
000116  b094              SUB      sp,sp,#0x50
;;;42       RCC_ClkInitTypeDef RCC_ClkInitStruct;
;;;43       RCC_OscInitTypeDef RCC_OscInitStruct;
;;;44     
;;;45       /* Enable Power Control clock */
;;;46       __HAL_RCC_PWR_CLK_ENABLE();
000118  48bc              LDR      r0,|L1.1036|
00011a  6801              LDR      r1,[r0,#0]
00011c  f0415180          ORR      r1,r1,#0x10000000
000120  6001              STR      r1,[r0,#0]
000122  6800              LDR      r0,[r0,#0]
000124  f0005080          AND      r0,r0,#0x10000000
000128  9001              STR      r0,[sp,#4]
;;;47       
;;;48       /* The voltage scaling allows optimizing the power consumption when the device is 
;;;49          clocked below the maximum system frequency, to update the voltage scaling value 
;;;50          regarding system frequency refer to product datasheet.  */
;;;51       __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
00012a  48b9              LDR      r0,|L1.1040|
00012c  6801              LDR      r1,[r0,#0]
00012e  f4414180          ORR      r1,r1,#0x4000
000132  6001              STR      r1,[r0,#0]
000134  6800              LDR      r0,[r0,#0]
000136  f4004080          AND      r0,r0,#0x4000
00013a  9001              STR      r0,[sp,#4]
;;;52       
;;;53       /* Enable HSE Oscillator and activate PLL with HSE as source */
;;;54       RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
00013c  2001              MOVS     r0,#1
00013e  9002              STR      r0,[sp,#8]
;;;55       RCC_OscInitStruct.HSEState = RCC_HSE_ON;
000140  9003              STR      r0,[sp,#0xc]
;;;56       RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
000142  2402              MOVS     r4,#2
000144  9408              STR      r4,[sp,#0x20]
;;;57       RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
000146  0580              LSLS     r0,r0,#22
000148  9009              STR      r0,[sp,#0x24]
;;;58       RCC_OscInitStruct.PLL.PLLM = 16;
00014a  2010              MOVS     r0,#0x10
00014c  900a              STR      r0,[sp,#0x28]
;;;59       RCC_OscInitStruct.PLL.PLLN = 360;
00014e  f44f70b4          MOV      r0,#0x168
000152  900b              STR      r0,[sp,#0x2c]
;;;60       RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
000154  940c              STR      r4,[sp,#0x30]
;;;61       RCC_OscInitStruct.PLL.PLLQ = 7;
000156  2007              MOVS     r0,#7
000158  900d              STR      r0,[sp,#0x34]
;;;62       if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
00015a  a802              ADD      r0,sp,#8
00015c  f7fffffe          BL       HAL_RCC_OscConfig
000160  b108              CBZ      r0,|L1.358|
;;;63       {
;;;64         Error_Handler();
000162  f7fffffe          BL       _Z13Error_Handlerv ; Error_Handler()
                  |L1.358|
;;;65       }
;;;66       /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
;;;67          clocks dividers */
;;;68       RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
000166  200f              MOVS     r0,#0xf
000168  900e              STR      r0,[sp,#0x38]
;;;69       RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;//RCC_SYSCLKSOURCE_HSE;
00016a  940f              STR      r4,[sp,#0x3c]
;;;70       RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
00016c  2000              MOVS     r0,#0
00016e  9010              STR      r0,[sp,#0x40]
;;;71       RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
000170  f44f5080          MOV      r0,#0x1000
000174  9011              STR      r0,[sp,#0x44]
;;;72       RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
000176  9012              STR      r0,[sp,#0x48]
;;;73       if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
000178  2105              MOVS     r1,#5
00017a  a80e              ADD      r0,sp,#0x38
00017c  f7fffffe          BL       HAL_RCC_ClockConfig
000180  b108              CBZ      r0,|L1.390|
;;;74       {
;;;75         Error_Handler();
000182  f7fffffe          BL       _Z13Error_Handlerv ; Error_Handler()
                  |L1.390|
;;;76       }
;;;77     
;;;78       /* STM32F405x/407x/415x/417x Revision Z devices: prefetch is supported  */
;;;79       if (HAL_GetREVID() == 0x1001)
000186  f7fffffe          BL       HAL_GetREVID
00018a  f2410101          MOV      r1,#0x1001
00018e  4288              CMP      r0,r1
000190  d104              BNE      |L1.412|
;;;80       {
;;;81         /* Enable the Flash prefetch */
;;;82         __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
000192  48a0              LDR      r0,|L1.1044|
000194  6801              LDR      r1,[r0,#0]
000196  f4417180          ORR      r1,r1,#0x100
00019a  6001              STR      r1,[r0,#0]
                  |L1.412|
;;;83       }
;;;84     }
00019c  b014              ADD      sp,sp,#0x50
00019e  bd10              POP      {r4,pc}
;;;85     
                          ENDP

                  _Z9HsramInitv PROC ; HsramInit()
;;;86     void HsramInit (void)
0001a0  b510              PUSH     {r4,lr}
;;;87     {
;;;88       hsram.Instance  = FSMC_NORSRAM_DEVICE;
0001a2  489d              LDR      r0,|L1.1048|
0001a4  f04f4120          MOV      r1,#0xa0000000
0001a8  6001              STR      r1,[r0,#0]  ; hsram
;;;89       hsram.Extended  = FSMC_NORSRAM_EXTENDED_DEVICE;
0001aa  499c              LDR      r1,|L1.1052|
0001ac  6041              STR      r1,[r0,#4]  ; hsram
;;;90       
;;;91       SRAM_Timing.AddressSetupTime       = 4;
0001ae  f1000244          ADD      r2,r0,#0x44
0001b2  2304              MOVS     r3,#4
0001b4  6013              STR      r3,[r2,#0]  ; SRAM_Timing
;;;92       SRAM_Timing.AddressHoldTime        = 0;
0001b6  2100              MOVS     r1,#0
0001b8  6051              STR      r1,[r2,#4]  ; SRAM_Timing
;;;93       SRAM_Timing.DataSetupTime          = 5;
0001ba  f04f0c05          MOV      r12,#5
0001be  f8c2c008          STR      r12,[r2,#8]  ; SRAM_Timing
;;;94       SRAM_Timing.BusTurnAroundDuration  = 0;
0001c2  60d1              STR      r1,[r2,#0xc]  ; SRAM_Timing
;;;95       SRAM_Timing.CLKDivision            = 4;
0001c4  6113              STR      r3,[r2,#0x10]  ; SRAM_Timing
;;;96       SRAM_Timing.DataLatency            = 0;
0001c6  6151              STR      r1,[r2,#0x14]  ; SRAM_Timing
;;;97       SRAM_Timing.AccessMode             = FSMC_ACCESS_MODE_A;
0001c8  6191              STR      r1,[r2,#0x18]  ; SRAM_Timing
;;;98     
;;;99       hsram.Init.NSBank             = FSMC_NORSRAM_BANK1;
0001ca  6081              STR      r1,[r0,#8]  ; hsram
;;;100      hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
0001cc  60c1              STR      r1,[r0,#0xc]  ; hsram
;;;101      hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
0001ce  6101              STR      r1,[r0,#0x10]  ; hsram
;;;102      hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
0001d0  2210              MOVS     r2,#0x10
0001d2  6142              STR      r2,[r0,#0x14]  ; hsram
;;;103      hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
0001d4  6181              STR      r1,[r0,#0x18]  ; hsram
;;;104      hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
0001d6  61c1              STR      r1,[r0,#0x1c]  ; hsram
;;;105      hsram.Init.WrapMode           = FSMC_WRAP_MODE_ENABLE;
0001d8  0192              LSLS     r2,r2,#6
0001da  6202              STR      r2,[r0,#0x20]  ; hsram
;;;106      hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
0001dc  6241              STR      r1,[r0,#0x24]  ; hsram
;;;107      hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
0001de  0092              LSLS     r2,r2,#2
0001e0  6282              STR      r2,[r0,#0x28]  ; hsram
;;;108      hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
0001e2  62c1              STR      r1,[r0,#0x2c]  ; hsram
;;;109      hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_DISABLE;
0001e4  6301              STR      r1,[r0,#0x30]  ; hsram
;;;110      hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
0001e6  6341              STR      r1,[r0,#0x34]  ; hsram
;;;111      hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
0001e8  6381              STR      r1,[r0,#0x38]  ; hsram
;;;112      /* Initialize the SRAM controller */
;;;113      if(HAL_SRAM_Init(&hsram, &SRAM_Timing, &SRAM_Timing) != HAL_OK)
0001ea  f1000244          ADD      r2,r0,#0x44
0001ee  f1000144          ADD      r1,r0,#0x44
0001f2  f7fffffe          BL       HAL_SRAM_Init
0001f6  2800              CMP      r0,#0
0001f8  d001              BEQ      |L1.510|
;;;114      {
;;;115        /* Initialization Error */
;;;116        Error_Handler(); 
0001fa  f7fffffe          BL       _Z13Error_Handlerv ; Error_Handler()
                  |L1.510|
;;;117      }    
;;;118    }
0001fe  bd10              POP      {r4,pc}
;;;119    
                          ENDP

                  _Z7DacInitv PROC ; DacInit()
;;;120    void DacInit (void)
000200  4770              BX       lr
;;;121    {
;;;122    
;;;123    }
;;;124    
                          ENDP

                  _Z7AdcInitv PROC ; AdcInit()
;;;125    void AdcInit (void)
000202  4770              BX       lr
;;;126    {
;;;127    
;;;128    }
;;;129    
                          ENDP

                  _Z9AdcReinitR17ADC_HandleTypeDefjj PROC ; AdcReinit(ADC_HandleTypeDef&, unsigned, unsigned)
;;;130    void AdcReinit (ADC_HandleTypeDef &AdcHandle, uint32_t arg0, uint32_t arg1)
000204  4770              BX       lr
;;;131    {
;;;132    
;;;133    }
;;;134    
                          ENDP

                  _Z7SpiInitv PROC ; SpiInit()
;;;135    void SpiInit (void)
000206  b510              PUSH     {r4,lr}
;;;136    {
;;;137      SpiHandle.Instance               = SPI2;
000208  4886              LDR      r0,|L1.1060|
00020a  4985              LDR      r1,|L1.1056|
00020c  6001              STR      r1,[r0,#0]  ; SpiHandle
;;;138      SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
00020e  2130              MOVS     r1,#0x30
000210  61c1              STR      r1,[r0,#0x1c]  ; SpiHandle
;;;139      SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
000212  2100              MOVS     r1,#0
000214  6081              STR      r1,[r0,#8]  ; SpiHandle
;;;140      SpiHandle.Init.CLKPhase          = SPI_PHASE_1EDGE;
000216  6141              STR      r1,[r0,#0x14]  ; SpiHandle
;;;141      SpiHandle.Init.CLKPolarity       = SPI_POLARITY_HIGH;
000218  2202              MOVS     r2,#2
00021a  6102              STR      r2,[r0,#0x10]  ; SpiHandle
;;;142      SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
00021c  6281              STR      r1,[r0,#0x28]  ; SpiHandle
;;;143      SpiHandle.Init.CRCPolynomial     = 7;
00021e  2207              MOVS     r2,#7
000220  62c2              STR      r2,[r0,#0x2c]  ; SpiHandle
;;;144      SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
000222  60c1              STR      r1,[r0,#0xc]  ; SpiHandle
;;;145      SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
000224  6201              STR      r1,[r0,#0x20]  ; SpiHandle
;;;146      SpiHandle.Init.NSS               = SPI_NSS_SOFT;
000226  f44f7100          MOV      r1,#0x200
00022a  6181              STR      r1,[r0,#0x18]  ; SpiHandle
;;;147      SpiHandle.Init.TIMode            = SPI_TIMODE_ENABLE;
00022c  2110              MOVS     r1,#0x10
00022e  6241              STR      r1,[r0,#0x24]  ; SpiHandle
;;;148      SpiHandle.Init.Mode              = SPI_MODE_MASTER;  
000230  f44f7182          MOV      r1,#0x104
000234  6041              STR      r1,[r0,#4]  ; SpiHandle
;;;149      if(HAL_SPI_Init(&SpiHandle) != HAL_OK)
000236  f7fffffe          BL       HAL_SPI_Init
00023a  2800              CMP      r0,#0
00023c  d001              BEQ      |L1.578|
;;;150      {
;;;151        /* Initialization Error */
;;;152        Error_Handler();
00023e  f7fffffe          BL       _Z13Error_Handlerv ; Error_Handler()
                  |L1.578|
;;;153      }
;;;154    }
000242  bd10              POP      {r4,pc}
;;;155    
                          ENDP

                  _Z7DmaInitv PROC ; DmaInit()
;;;156    void DmaInit ()
000244  e92d41f0          PUSH     {r4-r8,lr}
;;;157    {
;;;158    
;;;159      DmaHandle.Init.Channel = DMA_CHANNEL_1;                     /* DMA_CHANNEL_0                    */
000248  4877              LDR      r0,|L1.1064|
00024a  f04f7100          MOV      r1,#0x2000000
00024e  6041              STR      r1,[r0,#4]  ; DmaHandle
;;;160      DmaHandle.Init.Direction = DMA_PERIPH_TO_MEMORY;          /* M2M transfer mode                */
000250  2400              MOVS     r4,#0
000252  6084              STR      r4,[r0,#8]  ; DmaHandle
;;;161      DmaHandle.Init.PeriphInc = DMA_PINC_DISABLE;               /* Peripheral increment mode Enable */
000254  60c4              STR      r4,[r0,#0xc]  ; DmaHandle
;;;162      DmaHandle.Init.MemInc = DMA_MINC_ENABLE;                  /* Memory increment mode Enable     */
000256  13cf              ASRS     r7,r1,#15
000258  6107              STR      r7,[r0,#0x10]  ; DmaHandle
;;;163      DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE; /* Peripheral data alignment : Word */
00025a  6144              STR      r4,[r0,#0x14]  ; DmaHandle
;;;164      DmaHandle.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;    /* memory data alignment : Word     */
00025c  6184              STR      r4,[r0,#0x18]  ; DmaHandle
;;;165      DmaHandle.Init.Mode = DMA_CIRCULAR;                         /* Normal DMA mode                  */
00025e  1449              ASRS     r1,r1,#17
000260  61c1              STR      r1,[r0,#0x1c]  ; DmaHandle
;;;166      DmaHandle.Init.Priority = DMA_PRIORITY_HIGH;              /* priority level : high            */
000262  024e              LSLS     r6,r1,#9
000264  6206              STR      r6,[r0,#0x20]  ; DmaHandle
;;;167      DmaHandle.Init.FIFOMode = DMA_FIFOMODE_DISABLE;            /* FIFO mode enabled                */        
000266  6244              STR      r4,[r0,#0x24]  ; DmaHandle
;;;168      DmaHandle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;  
000268  2503              MOVS     r5,#3
00026a  6285              STR      r5,[r0,#0x28]  ; DmaHandle
;;;169      DmaHandle.Init.MemBurst = DMA_MBURST_SINGLE;                /* Memory burst                     */  
00026c  62c4              STR      r4,[r0,#0x2c]  ; DmaHandle
;;;170      DmaHandle.Init.PeriphBurst = DMA_PBURST_SINGLE;             /* Peripheral burst                 */
00026e  6304              STR      r4,[r0,#0x30]  ; DmaHandle
;;;171      /*##-3- Select the DMA instance to be used for the transfer : DMA2_Stream0 #*/
;;;172      DmaHandle.Instance = DMA2_Stream3;
000270  496e              LDR      r1,|L1.1068|
000272  6001              STR      r1,[r0,#0]  ; DmaHandle
;;;173    
;;;174      if (HAL_DMA_Init(&DmaHandle) != HAL_OK)
000274  f7fffffe          BL       HAL_DMA_Init
000278  b108              CBZ      r0,|L1.638|
;;;175      {
;;;176        /* Initialization Error */
;;;177        Error_Handler();
00027a  f7fffffe          BL       _Z13Error_Handlerv ; Error_Handler()
                  |L1.638|
;;;178      }  
;;;179      DmaHandleGraphic.Init.Channel = DMA_CHANNEL_0;                     /* DMA_CHANNEL_0                    */
00027e  486c              LDR      r0,|L1.1072|
000280  6044              STR      r4,[r0,#4]  ; DmaHandleGraphic
;;;180      DmaHandleGraphic.Init.Direction = DMA_MEMORY_TO_MEMORY;          /* M2M transfer mode                */
000282  2180              MOVS     r1,#0x80
000284  6081              STR      r1,[r0,#8]  ; DmaHandleGraphic
;;;181      DmaHandleGraphic.Init.PeriphInc = DMA_PINC_DISABLE;               /* Peripheral increment mode Enable */
000286  60c4              STR      r4,[r0,#0xc]  ; DmaHandleGraphic
;;;182      DmaHandleGraphic.Init.MemInc = DMA_MINC_ENABLE;                  /* Memory increment mode Enable     */
000288  6107              STR      r7,[r0,#0x10]  ; DmaHandleGraphic
;;;183      DmaHandleGraphic.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD; /* Peripheral data alignment : Word */
00028a  0109              LSLS     r1,r1,#4
00028c  6141              STR      r1,[r0,#0x14]  ; DmaHandleGraphic
;;;184      DmaHandleGraphic.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;    /* memory data alignment : Word     */
00028e  0089              LSLS     r1,r1,#2
000290  6181              STR      r1,[r0,#0x18]  ; DmaHandleGraphic
;;;185      DmaHandleGraphic.Init.Mode = DMA_NORMAL;                         /* Normal DMA mode                  */
000292  61c4              STR      r4,[r0,#0x1c]  ; DmaHandleGraphic
;;;186      DmaHandleGraphic.Init.Priority = DMA_PRIORITY_HIGH;              /* priority level : high            */
000294  6206              STR      r6,[r0,#0x20]  ; DmaHandleGraphic
;;;187      DmaHandleGraphic.Init.FIFOMode = DMA_FIFOMODE_DISABLE;            /* FIFO mode enabled                */        
000296  6244              STR      r4,[r0,#0x24]  ; DmaHandleGraphic
;;;188      DmaHandleGraphic.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;  
000298  6285              STR      r5,[r0,#0x28]  ; DmaHandleGraphic
;;;189      DmaHandleGraphic.Init.MemBurst = DMA_MBURST_SINGLE;                /* Memory burst                     */  
00029a  62c4              STR      r4,[r0,#0x2c]  ; DmaHandleGraphic
;;;190      DmaHandleGraphic.Init.PeriphBurst = DMA_PBURST_SINGLE;             /* Peripheral burst                 */
00029c  6304              STR      r4,[r0,#0x30]  ; DmaHandleGraphic
;;;191      /*##-3- Select the DMA instance to be used for the transfer : DMA2_Stream0 #*/
;;;192      DmaHandleGraphic.Instance = DMA1_Stream1;
00029e  4965              LDR      r1,|L1.1076|
0002a0  6001              STR      r1,[r0,#0]  ; DmaHandleGraphic
;;;193    
;;;194      if (HAL_DMA_Init(&DmaHandleGraphic) != HAL_OK)
0002a2  f7fffffe          BL       HAL_DMA_Init
0002a6  2800              CMP      r0,#0
0002a8  d001              BEQ      |L1.686|
;;;195      {
;;;196        /* Initialization Error */
;;;197        Error_Handler();
0002aa  f7fffffe          BL       _Z13Error_Handlerv ; Error_Handler()
                  |L1.686|
;;;198      } 
;;;199    }
0002ae  e8bd81f0          POP      {r4-r8,pc}
;;;200    
                          ENDP

                  _Z7TimInitv PROC ; TimInit()
;;;201    void TimInit (void)
0002b2  b570              PUSH     {r4-r6,lr}
;;;202    {
;;;203      uint32_t __prescaler = (uint32_t) ((SystemCoreClock /2) / 1000) - 1;
0002b4  4d60              LDR      r5,|L1.1080|
0002b6  f44f66fa          MOV      r6,#0x7d0
0002ba  6828              LDR      r0,[r5,#0]  ; SystemCoreClock
0002bc  fbb0f0f6          UDIV     r0,r0,r6
0002c0  1e41              SUBS     r1,r0,#1
;;;204      
;;;205      TimHandle.Instance = TIM1; 
0002c2  485f              LDR      r0,|L1.1088|
0002c4  4a5d              LDR      r2,|L1.1084|
0002c6  6002              STR      r2,[r0,#0]  ; TimHandle
;;;206      TimHandle.Init.Period = 50 - 1;
0002c8  2231              MOVS     r2,#0x31
0002ca  60c2              STR      r2,[r0,#0xc]  ; TimHandle
;;;207      TimHandle.Init.Prescaler = __prescaler;
0002cc  6041              STR      r1,[r0,#4]  ; TimHandle
;;;208      TimHandle.Init.ClockDivision = 0;
0002ce  2400              MOVS     r4,#0
0002d0  6104              STR      r4,[r0,#0x10]  ; TimHandle
;;;209      TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
0002d2  6084              STR      r4,[r0,#8]  ; TimHandle
;;;210      if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
0002d4  f7fffffe          BL       HAL_TIM_Base_Init
0002d8  b108              CBZ      r0,|L1.734|
;;;211      {
;;;212        Error_Handler();
0002da  f7fffffe          BL       _Z13Error_Handlerv ; Error_Handler()
                  |L1.734|
;;;213      }
;;;214      
;;;215    	
;;;216      if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
0002de  4858              LDR      r0,|L1.1088|
0002e0  f7fffffe          BL       HAL_TIM_Base_Start_IT
0002e4  b108              CBZ      r0,|L1.746|
;;;217      {
;;;218        Error_Handler();
0002e6  f7fffffe          BL       _Z13Error_Handlerv ; Error_Handler()
                  |L1.746|
;;;219      }
;;;220    	
;;;221    	__prescaler = (uint32_t) ((SystemCoreClock /2) / 1000) - 1;
0002ea  6828              LDR      r0,[r5,#0]  ; SystemCoreClock
0002ec  fbb0f0f6          UDIV     r0,r0,r6
0002f0  1e41              SUBS     r1,r0,#1
;;;222      
;;;223      Tim2_Handle.Instance = TIM2;
0002f2  4854              LDR      r0,|L1.1092|
0002f4  f04f4280          MOV      r2,#0x40000000
0002f8  6002              STR      r2,[r0,#0]  ; Tim2_Handle
;;;224      Tim2_Handle.Init.Period = 1000 - 1;
0002fa  f24032e7          MOV      r2,#0x3e7
0002fe  60c2              STR      r2,[r0,#0xc]  ; Tim2_Handle
;;;225      Tim2_Handle.Init.Prescaler = __prescaler;
000300  6041              STR      r1,[r0,#4]  ; Tim2_Handle
;;;226      Tim2_Handle.Init.ClockDivision = 10;
000302  210a              MOVS     r1,#0xa
000304  6101              STR      r1,[r0,#0x10]  ; Tim2_Handle
;;;227      Tim2_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
000306  6084              STR      r4,[r0,#8]  ; Tim2_Handle
;;;228      if(HAL_TIM_Base_Init(&Tim2_Handle) != HAL_OK)
000308  f7fffffe          BL       HAL_TIM_Base_Init
00030c  b108              CBZ      r0,|L1.786|
;;;229      {
;;;230        Error_Handler();
00030e  f7fffffe          BL       _Z13Error_Handlerv ; Error_Handler()
                  |L1.786|
;;;231      }
;;;232    
;;;233      if(HAL_TIM_Base_Start_IT(&Tim2_Handle) != HAL_OK)
000312  484c              LDR      r0,|L1.1092|
000314  f7fffffe          BL       HAL_TIM_Base_Start_IT
000318  b108              CBZ      r0,|L1.798|
;;;234      {
;;;235        Error_Handler();
00031a  f7fffffe          BL       _Z13Error_Handlerv ; Error_Handler()
                  |L1.798|
;;;236      }
;;;237    	HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0 ,1);
00031e  2201              MOVS     r2,#1
000320  2100              MOVS     r1,#0
000322  2019              MOVS     r0,#0x19
000324  f7fffffe          BL       HAL_NVIC_SetPriority
;;;238      HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
000328  2019              MOVS     r0,#0x19
00032a  f7fffffe          BL       HAL_NVIC_EnableIRQ
;;;239    	HAL_NVIC_SetPriority(TIM2_IRQn, 0 ,1);
00032e  2201              MOVS     r2,#1
000330  2100              MOVS     r1,#0
000332  201c              MOVS     r0,#0x1c
000334  f7fffffe          BL       HAL_NVIC_SetPriority
;;;240      HAL_NVIC_EnableIRQ(TIM2_IRQn);
000338  e8bd4070          POP      {r4-r6,lr}
00033c  201c              MOVS     r0,#0x1c
00033e  f7ffbffe          B.W      HAL_NVIC_EnableIRQ
;;;241    }
;;;242    
                          ENDP

                  _Z8GpioInitv PROC ; GpioInit()
;;;243    void GpioInit (void)
000342  b570              PUSH     {r4-r6,lr}
;;;244    {
;;;245    
;;;246      DEV_Gpio_Init(Lcd_light_Port, lcd_led_pin, GPIO_MODE_OUTPUT_PP, GPIO_PULLUP);
000344  4c40              LDR      r4,|L1.1096|
000346  2301              MOVS     r3,#1
000348  461a              MOV      r2,r3
00034a  2104              MOVS     r1,#4
00034c  4620              MOV      r0,r4
00034e  f7fffffe          BL       _Z13DEV_Gpio_InitP12GPIO_TypeDefijj ; DEV_Gpio_Init(GPIO_TypeDef*, int, unsigned, unsigned)
;;;247      DEV_Gpio_Init(Lcd_Miso_Port, LCD_MISO_Pin, GPIO_MODE_INPUT, GPIO_PULLDOWN);
000352  4d3e              LDR      r5,|L1.1100|
000354  2302              MOVS     r3,#2
000356  2200              MOVS     r2,#0
000358  2101              MOVS     r1,#1
00035a  4628              MOV      r0,r5
00035c  f7fffffe          BL       _Z13DEV_Gpio_InitP12GPIO_TypeDefijj ; DEV_Gpio_Init(GPIO_TypeDef*, int, unsigned, unsigned)
;;;248      DEV_Gpio_Init(Lcd_Mosi_Port, LCD_MOSI_Pin, GPIO_MODE_OUTPUT_PP, GPIO_PULLUP);
000360  2301              MOVS     r3,#1
000362  461a              MOV      r2,r3
000364  2102              MOVS     r1,#2
000366  4628              MOV      r0,r5
000368  f7fffffe          BL       _Z13DEV_Gpio_InitP12GPIO_TypeDefijj ; DEV_Gpio_Init(GPIO_TypeDef*, int, unsigned, unsigned)
;;;249      DEV_Gpio_Init(Lcd_Sck_Port, LCD_SCK_Pin, GPIO_MODE_OUTPUT_PP, GPIO_PULLUP);
00036c  2301              MOVS     r3,#1
00036e  461a              MOV      r2,r3
000370  2104              MOVS     r1,#4
000372  4628              MOV      r0,r5
000374  f7fffffe          BL       _Z13DEV_Gpio_InitP12GPIO_TypeDefijj ; DEV_Gpio_Init(GPIO_TypeDef*, int, unsigned, unsigned)
;;;250      DEV_Gpio_Init(Lcd_Cs_Port, LCD_CS_Pin, GPIO_MODE_OUTPUT_PP, GPIO_PULLUP);
000378  2301              MOVS     r3,#1
00037a  461a              MOV      r2,r3
00037c  2108              MOVS     r1,#8
00037e  4628              MOV      r0,r5
000380  f7fffffe          BL       _Z13DEV_Gpio_InitP12GPIO_TypeDefijj ; DEV_Gpio_Init(GPIO_TypeDef*, int, unsigned, unsigned)
;;;251    	DEV_Gpio_Init(Lcd_Reset_Port, LCD_Reset_Pin, GPIO_MODE_OUTPUT_PP, GPIO_PULLUP);
000384  2301              MOVS     r3,#1
000386  461a              MOV      r2,r3
000388  2110              MOVS     r1,#0x10
00038a  4628              MOV      r0,r5
00038c  f7fffffe          BL       _Z13DEV_Gpio_InitP12GPIO_TypeDefijj ; DEV_Gpio_Init(GPIO_TypeDef*, int, unsigned, unsigned)
;;;252        
;;;253      DEV_Gpio_Init(Lcd_Clk_Port, LCD_Clk_Pin, GPIO_MODE_OUTPUT_PP, GPIO_PULLDOWN);
000390  4d2f              LDR      r5,|L1.1104|
000392  2302              MOVS     r3,#2
000394  2201              MOVS     r2,#1
000396  2104              MOVS     r1,#4
000398  4628              MOV      r0,r5
00039a  f7fffffe          BL       _Z13DEV_Gpio_InitP12GPIO_TypeDefijj ; DEV_Gpio_Init(GPIO_TypeDef*, int, unsigned, unsigned)
;;;254      DEV_Gpio_Init(Lcd_Vsync_Port, LCD_Vsync_Pin, GPIO_MODE_OUTPUT_PP, GPIO_PULLDOWN);
00039e  2302              MOVS     r3,#2
0003a0  2201              MOVS     r2,#1
0003a2  2110              MOVS     r1,#0x10
0003a4  4628              MOV      r0,r5
0003a6  f7fffffe          BL       _Z13DEV_Gpio_InitP12GPIO_TypeDefijj ; DEV_Gpio_Init(GPIO_TypeDef*, int, unsigned, unsigned)
;;;255      DEV_Gpio_Init(Lcd_Hsync_Port, LCD_Hsync_Pin, GPIO_MODE_OUTPUT_PP, GPIO_PULLDOWN);
0003aa  2302              MOVS     r3,#2
0003ac  2201              MOVS     r2,#1
0003ae  2108              MOVS     r1,#8
0003b0  4628              MOV      r0,r5
0003b2  f7fffffe          BL       _Z13DEV_Gpio_InitP12GPIO_TypeDefijj ; DEV_Gpio_Init(GPIO_TypeDef*, int, unsigned, unsigned)
;;;256      DEV_Gpio_Init(Lcd_Den_Port, LCD_Den_Pin, GPIO_MODE_OUTPUT_PP, GPIO_PULLDOWN);
0003b6  2302              MOVS     r3,#2
0003b8  2201              MOVS     r2,#1
0003ba  2120              MOVS     r1,#0x20
0003bc  4628              MOV      r0,r5
0003be  f7fffffe          BL       _Z13DEV_Gpio_InitP12GPIO_TypeDefijj ; DEV_Gpio_Init(GPIO_TypeDef*, int, unsigned, unsigned)
;;;257      
;;;258      DEV_Gpio_Init(Lcd_Rgb_Port, GPIO_PIN_All, GPIO_MODE_OUTPUT_PP, GPIO_PULLUP);
0003c2  2301              MOVS     r3,#1
0003c4  461a              MOV      r2,r3
0003c6  f64f71ff          MOV      r1,#0xffff
0003ca  4822              LDR      r0,|L1.1108|
0003cc  f7fffffe          BL       _Z13DEV_Gpio_InitP12GPIO_TypeDefijj ; DEV_Gpio_Init(GPIO_TypeDef*, int, unsigned, unsigned)
;;;259    	
;;;260      DEV_AltGpio_Init(GPIOD, 
0003d0  230c              MOVS     r3,#0xc
0003d2  2202              MOVS     r2,#2
0003d4  f64f71b3          MOV      r1,#0xffb3
0003d8  481f              LDR      r0,|L1.1112|
0003da  f7fffffe          BL       _Z16DEV_AltGpio_InitP12GPIO_TypeDefijj ; DEV_AltGpio_Init(GPIO_TypeDef*, int, unsigned, unsigned)
;;;261    								              	FSMC_D2  |
;;;262    	                              FSMC_D3  |
;;;263    	                              FSMC_NOE |
;;;264    	                              FSMC_NWE | 
;;;265    	                              FSMC_NE1 | 
;;;266    	                              FSMC_D13 |
;;;267    	                              FSMC_D14 |
;;;268    	                              FSMC_D15 |
;;;269    	                              FSMC_A16 |
;;;270    	                              FSMC_A17 |
;;;271    	                              FSMC_A18 |
;;;272    	                              FSMC_D0  |
;;;273    	                              FSMC_D1  ,
;;;274    		                                       GPIO_MODE_AF_PP, GPIO_AF12_FSMC);
;;;275      DEV_AltGpio_Init(GPIOE, 
0003de  230c              MOVS     r3,#0xc
0003e0  2202              MOVS     r2,#2
0003e2  f64f7183          MOV      r1,#0xff83
0003e6  4620              MOV      r0,r4
0003e8  f7fffffe          BL       _Z16DEV_AltGpio_InitP12GPIO_TypeDefijj ; DEV_AltGpio_Init(GPIO_TypeDef*, int, unsigned, unsigned)
;;;276    								                FSMC_NBL0 |
;;;277    	                              FSMC_NBL1 |
;;;278    	                              FSMC_D4   | 
;;;279    	                              FSMC_D5   | 
;;;280    	                              FSMC_D6   |         
;;;281                                    FSMC_D7   |  
;;;282    	                              FSMC_D8   | 
;;;283    	                              FSMC_D9   | 
;;;284    	                              FSMC_D10  |          
;;;285                                    FSMC_D11  | 
;;;286    	                              FSMC_D12  ,   
;;;287    		                                       GPIO_MODE_AF_PP, GPIO_AF12_FSMC);
;;;288      DEV_AltGpio_Init(GPIOF, 
0003ec  230c              MOVS     r3,#0xc
0003ee  2202              MOVS     r2,#2
0003f0  f24f013f          MOV      r1,#0xf03f
0003f4  4819              LDR      r0,|L1.1116|
0003f6  f7fffffe          BL       _Z16DEV_AltGpio_InitP12GPIO_TypeDefijj ; DEV_AltGpio_Init(GPIO_TypeDef*, int, unsigned, unsigned)
;;;289    								                FSMC_A0 |
;;;290    	                              FSMC_A1 |
;;;291    	                              FSMC_A2 |
;;;292    	                              FSMC_A3 |
;;;293    	                              FSMC_A4 |
;;;294    	                              FSMC_A5 |
;;;295    	                              FSMC_A6 |
;;;296    	                              FSMC_A7 |
;;;297    	                              FSMC_A8 |
;;;298    	                              FSMC_A9 ,   
;;;299    		                                       GPIO_MODE_AF_PP, GPIO_AF12_FSMC);		
;;;300      DEV_AltGpio_Init(GPIOG, 
0003fa  230c              MOVS     r3,#0xc
0003fc  2202              MOVS     r2,#2
0003fe  e02f              B        |L1.1120|
                  |L1.1024|
                          DCD      0x40023830
                  |L1.1028|
                          DCD      0x40023844
                  |L1.1032|
                          DCD      0x40023838
                  |L1.1036|
                          DCD      0x40023840
                  |L1.1040|
                          DCD      0x40007000
                  |L1.1044|
                          DCD      0x40023c00
                  |L1.1048|
                          DCD      ||.bss||
                  |L1.1052|
                          DCD      0xa0000104
                  |L1.1056|
                          DCD      0x40003800
                  |L1.1060|
                          DCD      ||.bss||+0x100
                  |L1.1064|
                          DCD      ||.bss||+0x60
                  |L1.1068|
                          DCD      0x40026458
                  |L1.1072|
                          DCD      ||.bss||+0xb0
                  |L1.1076|
                          DCD      0x40026028
                  |L1.1080|
                          DCD      SystemCoreClock
                  |L1.1084|
                          DCD      0x40010000
                  |L1.1088|
                          DCD      ||.bss||+0x158
                  |L1.1092|
                          DCD      ||.bss||+0x194
                  |L1.1096|
                          DCD      0x40021000
                  |L1.1100|
                          DCD      0x40020800
                  |L1.1104|
                          DCD      0x40021c00
                  |L1.1108|
                          DCD      0x40020400
                  |L1.1112|
                          DCD      0x40020c00
                  |L1.1116|
                          DCD      0x40021400
                  |L1.1120|
000460  e8bd4070          POP      {r4-r6,lr}
000464  213f              MOVS     r1,#0x3f
000466  4801              LDR      r0,|L1.1132|
000468  f7ffbffe          B.W      _Z16DEV_AltGpio_InitP12GPIO_TypeDefijj ; DEV_AltGpio_Init(GPIO_TypeDef*, int, unsigned, unsigned)
;;;301    	                              FSMC_A10 |
;;;302    	                              FSMC_A11 |
;;;303    	                              FSMC_A12 |
;;;304    	                              FSMC_A13 |
;;;305    	                              FSMC_A14 |
;;;306    	                              FSMC_A15 ,  
;;;307    		                                       GPIO_MODE_AF_PP, GPIO_AF12_FSMC);		
;;;308    
;;;309      /*
;;;310      DEV_Gpio_Init(GPIOA, Dac_0, GPIO_MODE_ANALOG, GPIO_NOPULL);
;;;311      DEV_Gpio_Init(GPIOA, Dac_1, GPIO_MODE_ANALOG, GPIO_NOPULL);
;;;312      DEV_Gpio_Init(GPIOA, Adc_0, GPIO_MODE_ANALOG, GPIO_NOPULL);
;;;313      DEV_Gpio_Init(GPIOA, Adc_1, GPIO_MODE_ANALOG, GPIO_NOPULL);
;;;314      
;;;315      DEV_AltGpio_Init(GPIOB,  SCK_Pin, GPIO_MODE_AF_PP,  GPIO_AF5_SPI2);
;;;316      DEV_AltGpio_Init(GPIOB, MOSI_Pin, GPIO_MODE_AF_PP, GPIO_AF5_SPI2);
;;;317      DEV_AltGpio_Init(GPIOB, MISO_Pin, GPIO_MODE_AF_PP, GPIO_AF5_SPI2);
;;;318       
;;;319    	DEV_Gpio_Init(Buzzer_Port, Buzz, GPIO_MODE_OUTPUT_PP, GPIO_PULLDOWN);
;;;320      DEV_Gpio_Init(GPIOD, FSMC_CLK, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL);
;;;321    		
;;;322    
;;;323    	
;;;324        
;;;325      DEV_Gpio_Init(GPIOE, CH_Amp_0 | CH_Amp_1 | CH_Amp_2, GPIO_MODE_OUTPUT_PP, GPIO_PULLUP); 
;;;326      DEV_Gpio_Init(GPIOA, CH_Sel_0, GPIO_MODE_OUTPUT_PP, GPIO_PULLUP);
;;;327      DEV_Gpio_Init(GPIOA, Buzz, GPIO_MODE_OUTPUT_PP, GPIO_PULLUP);
;;;328      DEV_Gpio_Init(GPIOB, AD_StdbyPin, GPIO_MODE_OUTPUT_PP, GPIO_PULLUP);  
;;;329      
;;;330      DEV_Gpio_Init(GPIOC, CSO_Pin, GPIO_MODE_INPUT, GPIO_PULLDOWN);
;;;331      DEV_Gpio_Init(GPIOC, VSO_Pin, GPIO_MODE_INPUT, GPIO_PULLDOWN);
;;;332      DEV_Gpio_Init(GPIOE, BBPO_Pin, GPIO_MODE_INPUT, GPIO_PULLDOWN);
;;;333    	*/
;;;334    }
;;;335    
                          ENDP

                  |L1.1132|
                          DCD      0x40021800

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  hsram
                          %        68
                  SRAM_Timing
                          %        28
                  DmaHandle
                          %        80
                  DmaHandleGraphic
                          %        80
                  SpiHandle
                          %        88
                  TimHandle
                          %        60
                  Tim2_Handle
                          %        60

;*** Start embedded assembler ***

#line 1 "device\\init\\src\\init.cpp"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_init_cpp_a6152230___Z7__REV16j|
#line 138 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.3.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_init_cpp_a6152230___Z7__REV16j| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_init_cpp_a6152230___Z7__REVSHi|
#line 153
|__asm___8_init_cpp_a6152230___Z7__REVSHi| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_init_cpp_a6152230___Z5__RRXj|
#line 328
|__asm___8_init_cpp_a6152230___Z5__RRXj| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
