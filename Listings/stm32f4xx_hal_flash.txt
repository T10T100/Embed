; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\objects\stm32f4xx_hal_flash.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f4xx_hal_flash.d --cpu=Cortex-M4.fp --apcs=interwork -O1 -Otime --diag_suppress=9931 -I.\device\GUI\inc -I.\device\hardware\inc -I.\device\init\inc -I.\misc\inc -I.\user\inc -I..\tester_1.03 -I.\memory\inc -I.\drivers\inc -IE:\KeilProj\tester_1_03\Embed\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F417xx -DSTM32F417xx -DColorDepthBpp16 -Dtftili9486 -DSOFTWARE_GL -DGUI_ALLIGN_LAYSIZE_TO_POW2 --omf_browse=.\objects\stm32f4xx_hal_flash.crf drivers\src\stm32f4xx_hal_flash.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Z18FLASH_SetErrorCodev PROC ; FLASH_SetErrorCode()
;;;713      */
;;;714    static void FLASH_SetErrorCode(void)
000000  49da              LDR      r1,|L1.876|
;;;715    { 
;;;716      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
000002  6808              LDR      r0,[r1,#0]
000004  f0100f10          TST      r0,#0x10
;;;717      {
;;;718       pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
000008  48d9              LDR      r0,|L1.880|
00000a  d003              BEQ      |L1.20|
00000c  69c2              LDR      r2,[r0,#0x1c]  ; pFlash
00000e  f0420210          ORR      r2,r2,#0x10
000012  61c2              STR      r2,[r0,#0x1c]  ; pFlash
                  |L1.20|
;;;719      }
;;;720      
;;;721      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
000014  680a              LDR      r2,[r1,#0]
000016  f0120f20          TST      r2,#0x20
00001a  d003              BEQ      |L1.36|
;;;722      {
;;;723       pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
00001c  69c2              LDR      r2,[r0,#0x1c]  ; pFlash
00001e  f0420208          ORR      r2,r2,#8
000022  61c2              STR      r2,[r0,#0x1c]  ; pFlash
                  |L1.36|
;;;724      }
;;;725      
;;;726      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
000024  680a              LDR      r2,[r1,#0]
000026  f0120f40          TST      r2,#0x40
00002a  d003              BEQ      |L1.52|
;;;727      {
;;;728        pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
00002c  69c2              LDR      r2,[r0,#0x1c]  ; pFlash
00002e  f0420204          ORR      r2,r2,#4
000032  61c2              STR      r2,[r0,#0x1c]  ; pFlash
                  |L1.52|
;;;729      }
;;;730      
;;;731      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
000034  680a              LDR      r2,[r1,#0]
000036  f0120f80          TST      r2,#0x80
00003a  d003              BEQ      |L1.68|
;;;732      {
;;;733        pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
00003c  69c2              LDR      r2,[r0,#0x1c]  ; pFlash
00003e  f0420202          ORR      r2,r2,#2
000042  61c2              STR      r2,[r0,#0x1c]  ; pFlash
                  |L1.68|
;;;734      }
;;;735      
;;;736      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
000044  680a              LDR      r2,[r1,#0]
000046  f4127f80          TST      r2,#0x100
00004a  d003              BEQ      |L1.84|
;;;737      {
;;;738        pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
00004c  69c2              LDR      r2,[r0,#0x1c]  ; pFlash
00004e  f0420201          ORR      r2,r2,#1
000052  61c2              STR      r2,[r0,#0x1c]  ; pFlash
                  |L1.84|
;;;739      }
;;;740      
;;;741      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
000054  6809              LDR      r1,[r1,#0]
000056  f0110f02          TST      r1,#2
00005a  d003              BEQ      |L1.100|
;;;742      {
;;;743        pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
00005c  69c1              LDR      r1,[r0,#0x1c]  ; pFlash
00005e  f0410120          ORR      r1,r1,#0x20
000062  61c1              STR      r1,[r0,#0x1c]  ; pFlash
                  |L1.100|
;;;744      }
;;;745    }
000064  4770              BX       lr
;;;746    
                          ENDP

                  FLASH_WaitForLastOperation PROC
;;;571      */
;;;572    HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
000066  b570              PUSH     {r4-r6,lr}
;;;573    { 
000068  4604              MOV      r4,r0
;;;574      uint32_t tickstart = 0;
;;;575      
;;;576      /* Clear Error Code */
;;;577      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
00006a  49c1              LDR      r1,|L1.880|
00006c  2000              MOVS     r0,#0
00006e  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;578      
;;;579      /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
;;;580         Even if the FLASH operation fails, the BUSY flag will be reset and an error
;;;581         flag will be set */
;;;582      /* Get tick */
;;;583      tickstart = HAL_GetTick();
000070  f7fffffe          BL       HAL_GetTick
000074  4606              MOV      r6,r0
;;;584    
;;;585      while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
000076  4dbd              LDR      r5,|L1.876|
000078  6828              LDR      r0,[r5,#0]
00007a  f4103f80          TST      r0,#0x10000
00007e  d00e              BEQ      |L1.158|
                  |L1.128|
;;;586      { 
;;;587        if(Timeout != HAL_MAX_DELAY)
000080  f1b43fff          CMP      r4,#0xffffffff
000084  d007              BEQ      |L1.150|
;;;588        {
;;;589          if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
000086  b124              CBZ      r4,|L1.146|
000088  f7fffffe          BL       HAL_GetTick
00008c  1b80              SUBS     r0,r0,r6
00008e  42a0              CMP      r0,r4
000090  d901              BLS      |L1.150|
                  |L1.146|
;;;590          {
;;;591            return HAL_TIMEOUT;
000092  2003              MOVS     r0,#3
;;;592          }
;;;593        } 
;;;594      }
;;;595      
;;;596      if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
;;;597                               FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
;;;598      {
;;;599        /*Save the error code*/
;;;600        FLASH_SetErrorCode();
;;;601        return HAL_ERROR;
;;;602      }
;;;603    
;;;604      /* If there is an error flag set */
;;;605      return HAL_OK;
;;;606      
;;;607    }  
000094  bd70              POP      {r4-r6,pc}
                  |L1.150|
000096  6828              LDR      r0,[r5,#0]            ;585
000098  f4103f80          TST      r0,#0x10000           ;585
00009c  d1f0              BNE      |L1.128|
                  |L1.158|
00009e  6828              LDR      r0,[r5,#0]            ;596
0000a0  f4107ff9          TST      r0,#0x1f2             ;596
0000a4  d003              BEQ      |L1.174|
0000a6  f7fffffe          BL       _Z18FLASH_SetErrorCodev ; FLASH_SetErrorCode()
0000aa  2001              MOVS     r0,#1                 ;601
0000ac  bd70              POP      {r4-r6,pc}
                  |L1.174|
0000ae  2000              MOVS     r0,#0                 ;605
0000b0  bd70              POP      {r4-r6,pc}
;;;608    
                          ENDP

                  _Z24FLASH_Program_DoubleWordjy PROC ; FLASH_Program_DoubleWord(unsigned, unsigned long long)
;;;620      */
;;;621    static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
0000b2  49b0              LDR      r1,|L1.884|
;;;622    {
;;;623      /* Check the parameters */
;;;624      assert_param(IS_FLASH_ADDRESS(Address));
;;;625      
;;;626      /* If the previous operation is completed, proceed to program the new data */
;;;627      FLASH->CR &= CR_PSIZE_MASK;
0000b4  f8d1c000          LDR      r12,[r1,#0]
0000b8  f42c7c40          BIC      r12,r12,#0x300
0000bc  f8c1c000          STR      r12,[r1,#0]
;;;628      FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
0000c0  f8d1c000          LDR      r12,[r1,#0]
0000c4  f44c7c40          ORR      r12,r12,#0x300
0000c8  f8c1c000          STR      r12,[r1,#0]
;;;629      FLASH->CR |= FLASH_CR_PG;
0000cc  f8d1c000          LDR      r12,[r1,#0]
0000d0  f04c0c01          ORR      r12,r12,#1
0000d4  f8c1c000          STR      r12,[r1,#0]
;;;630    
;;;631      *(__IO uint64_t*)Address = Data;
0000d8  6002              STR      r2,[r0,#0]
0000da  6043              STR      r3,[r0,#4]
;;;632    }
0000dc  4770              BX       lr
;;;633    
                          ENDP

                  _Z18FLASH_Program_Wordjj PROC ; FLASH_Program_Word(unsigned, unsigned)
;;;646      */
;;;647    static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
0000de  4aa5              LDR      r2,|L1.884|
;;;648    {
;;;649      /* Check the parameters */
;;;650      assert_param(IS_FLASH_ADDRESS(Address));
;;;651      
;;;652      /* If the previous operation is completed, proceed to program the new data */
;;;653      FLASH->CR &= CR_PSIZE_MASK;
0000e0  6813              LDR      r3,[r2,#0]
0000e2  f4237340          BIC      r3,r3,#0x300
0000e6  6013              STR      r3,[r2,#0]
;;;654      FLASH->CR |= FLASH_PSIZE_WORD;
0000e8  6813              LDR      r3,[r2,#0]
0000ea  f4437300          ORR      r3,r3,#0x200
0000ee  6013              STR      r3,[r2,#0]
;;;655      FLASH->CR |= FLASH_CR_PG;
0000f0  6813              LDR      r3,[r2,#0]
0000f2  f0430301          ORR      r3,r3,#1
0000f6  6013              STR      r3,[r2,#0]
;;;656    
;;;657      *(__IO uint32_t*)Address = Data;
0000f8  6001              STR      r1,[r0,#0]
;;;658    }
0000fa  4770              BX       lr
;;;659    
                          ENDP

                  _Z22FLASH_Program_HalfWordjt PROC ; FLASH_Program_HalfWord(unsigned, unsigned short)
;;;671      */
;;;672    static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
0000fc  4a9d              LDR      r2,|L1.884|
;;;673    {
;;;674      /* Check the parameters */
;;;675      assert_param(IS_FLASH_ADDRESS(Address));
;;;676      
;;;677      /* If the previous operation is completed, proceed to program the new data */
;;;678      FLASH->CR &= CR_PSIZE_MASK;
0000fe  6813              LDR      r3,[r2,#0]
000100  f4237340          BIC      r3,r3,#0x300
000104  6013              STR      r3,[r2,#0]
;;;679      FLASH->CR |= FLASH_PSIZE_HALF_WORD;
000106  6813              LDR      r3,[r2,#0]
000108  f4437380          ORR      r3,r3,#0x100
00010c  6013              STR      r3,[r2,#0]
;;;680      FLASH->CR |= FLASH_CR_PG;
00010e  6813              LDR      r3,[r2,#0]
000110  f0430301          ORR      r3,r3,#1
000114  6013              STR      r3,[r2,#0]
;;;681    
;;;682      *(__IO uint16_t*)Address = Data;
000116  8001              STRH     r1,[r0,#0]
;;;683    }
000118  4770              BX       lr
;;;684    
                          ENDP

                  _Z18FLASH_Program_Bytejh PROC ; FLASH_Program_Byte(unsigned, unsigned char)
;;;696      */
;;;697    static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
00011a  4a96              LDR      r2,|L1.884|
;;;698    {
;;;699      /* Check the parameters */
;;;700      assert_param(IS_FLASH_ADDRESS(Address));
;;;701      
;;;702      /* If the previous operation is completed, proceed to program the new data */
;;;703      FLASH->CR &= CR_PSIZE_MASK;
00011c  6813              LDR      r3,[r2,#0]
00011e  f4237340          BIC      r3,r3,#0x300
000122  6013              STR      r3,[r2,#0]
;;;704      FLASH->CR |= FLASH_PSIZE_BYTE;
000124  6813              LDR      r3,[r2,#0]
000126  6013              STR      r3,[r2,#0]
;;;705      FLASH->CR |= FLASH_CR_PG;
000128  6813              LDR      r3,[r2,#0]
00012a  f0430301          ORR      r3,r3,#1
00012e  6013              STR      r3,[r2,#0]
;;;706    
;;;707      *(__IO uint8_t*)Address = Data;
000130  7001              STRB     r1,[r0,#0]
;;;708    }
000132  4770              BX       lr
;;;709    
                          ENDP

                  HAL_FLASH_Program PROC
;;;174      */
;;;175    HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000134  e92d41f0          PUSH     {r4-r8,lr}
;;;176    {
000138  4606              MOV      r6,r0
00013a  4688              MOV      r8,r1
00013c  4614              MOV      r4,r2
00013e  461d              MOV      r5,r3
;;;177      HAL_StatusTypeDef status = HAL_ERROR;
;;;178      
;;;179      /* Process Locked */
;;;180      __HAL_LOCK(&pFlash);
000140  4f8b              LDR      r7,|L1.880|
000142  7e38              LDRB     r0,[r7,#0x18]  ; pFlash
000144  2801              CMP      r0,#1
000146  d007              BEQ      |L1.344|
000148  2001              MOVS     r0,#1
00014a  7638              STRB     r0,[r7,#0x18]
;;;181    
;;;182      /* Check the parameters */
;;;183      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;184    
;;;185      /* Wait for last operation to be completed */
;;;186      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00014c  f24c3050          MOV      r0,#0xc350
000150  f7fffffe          BL       FLASH_WaitForLastOperation
000154  b118              CBZ      r0,|L1.350|
000156  e015              B        |L1.388|
                  |L1.344|
000158  2002              MOVS     r0,#2                 ;180
;;;187      
;;;188      if(status == HAL_OK)
;;;189      {
;;;190        if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
;;;191        {
;;;192          /*Program byte (8-bit) at a specified address.*/
;;;193            FLASH_Program_Byte(Address, (uint8_t) Data);
;;;194        }
;;;195        else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
;;;196        {
;;;197          /*Program halfword (16-bit) at a specified address.*/
;;;198          FLASH_Program_HalfWord(Address, (uint16_t) Data);
;;;199        }
;;;200        else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
;;;201        {
;;;202          /*Program word (32-bit) at a specified address.*/
;;;203          FLASH_Program_Word(Address, (uint32_t) Data);
;;;204        }
;;;205        else
;;;206        {
;;;207          /*Program double word (64-bit) at a specified address.*/
;;;208          FLASH_Program_DoubleWord(Address, Data);
;;;209        }
;;;210    
;;;211        /* Wait for last operation to be completed */
;;;212        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;213        
;;;214        /* If the program operation is completed, disable the PG Bit */
;;;215        FLASH->CR &= (~FLASH_CR_PG);
;;;216      }
;;;217    
;;;218      /* Process Unlocked */
;;;219      __HAL_UNLOCK(&pFlash);
;;;220    
;;;221      return status;
;;;222    }
00015a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.350|
00015e  b1ae              CBZ      r6,|L1.396|
000160  2e01              CMP      r6,#1                 ;195
000162  d018              BEQ      |L1.406|
000164  2e02              CMP      r6,#2                 ;200
000166  d01b              BEQ      |L1.416|
000168  4622              MOV      r2,r4                 ;208
00016a  462b              MOV      r3,r5                 ;208
00016c  4640              MOV      r0,r8                 ;208
00016e  f7fffffe          BL       _Z24FLASH_Program_DoubleWordjy ; FLASH_Program_DoubleWord(unsigned, unsigned long long)
                  |L1.370|
000172  f24c3050          MOV      r0,#0xc350            ;212
000176  f7fffffe          BL       FLASH_WaitForLastOperation
00017a  497e              LDR      r1,|L1.884|
00017c  680a              LDR      r2,[r1,#0]            ;215
00017e  f0220201          BIC      r2,r2,#1              ;215
000182  600a              STR      r2,[r1,#0]            ;215
                  |L1.388|
000184  2100              MOVS     r1,#0                 ;219
000186  7639              STRB     r1,[r7,#0x18]         ;219
000188  e8bd81f0          POP      {r4-r8,pc}
                  |L1.396|
00018c  b2e1              UXTB     r1,r4                 ;193
00018e  4640              MOV      r0,r8                 ;193
000190  f7fffffe          BL       _Z18FLASH_Program_Bytejh ; FLASH_Program_Byte(unsigned, unsigned char)
000194  e7ed              B        |L1.370|
                  |L1.406|
000196  b2a1              UXTH     r1,r4                 ;198
000198  4640              MOV      r0,r8                 ;198
00019a  f7fffffe          BL       _Z22FLASH_Program_HalfWordjt ; FLASH_Program_HalfWord(unsigned, unsigned short)
00019e  e7e8              B        |L1.370|
                  |L1.416|
0001a0  4621              MOV      r1,r4                 ;203
0001a2  4640              MOV      r0,r8                 ;203
0001a4  f7fffffe          BL       _Z18FLASH_Program_Wordjj ; FLASH_Program_Word(unsigned, unsigned)
0001a8  e7e3              B        |L1.370|
;;;223    
                          ENDP

                  HAL_FLASH_Program_IT PROC
;;;232      */
;;;233    HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
0001aa  b570              PUSH     {r4-r6,lr}
;;;234    {
0001ac  460d              MOV      r5,r1
;;;235      HAL_StatusTypeDef status = HAL_OK;
0001ae  2400              MOVS     r4,#0
;;;236      
;;;237      /* Process Locked */
;;;238      __HAL_LOCK(&pFlash);
0001b0  f8dfc1bc          LDR      r12,|L1.880|
0001b4  f89c1018          LDRB     r1,[r12,#0x18]  ; pFlash
0001b8  2901              CMP      r1,#1
0001ba  d01d              BEQ      |L1.504|
0001bc  2101              MOVS     r1,#1
0001be  f88c1018          STRB     r1,[r12,#0x18]
;;;239    
;;;240      /* Check the parameters */
;;;241      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;242    
;;;243      /* Enable End of FLASH Operation interrupt */
;;;244      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
0001c2  496c              LDR      r1,|L1.884|
0001c4  680e              LDR      r6,[r1,#0]
0001c6  f0467680          ORR      r6,r6,#0x1000000
0001ca  600e              STR      r6,[r1,#0]
;;;245      
;;;246      /* Enable Error source interrupt */
;;;247      __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
0001cc  680e              LDR      r6,[r1,#0]
0001ce  f0467600          ORR      r6,r6,#0x2000000
0001d2  600e              STR      r6,[r1,#0]
;;;248      
;;;249      /* Clear pending flags (if any) */  
;;;250      __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |\
0001d4  4e65              LDR      r6,|L1.876|
0001d6  21f3              MOVS     r1,#0xf3
0001d8  6031              STR      r1,[r6,#0]
;;;251                             FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR| FLASH_FLAG_PGSERR);  
;;;252    
;;;253      pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
0001da  2103              MOVS     r1,#3
0001dc  f88c1000          STRB     r1,[r12,#0]
;;;254      pFlash.Address = Address;
0001e0  f8cc5014          STR      r5,[r12,#0x14]  ; pFlash
0001e4  b150              CBZ      r0,|L1.508|
;;;255    
;;;256      if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
;;;257      {
;;;258        /*Program byte (8-bit) at a specified address.*/
;;;259          FLASH_Program_Byte(Address, (uint8_t) Data);
;;;260      }
;;;261      else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
0001e6  2801              CMP      r0,#1
0001e8  d00d              BEQ      |L1.518|
;;;262      {
;;;263        /*Program halfword (16-bit) at a specified address.*/
;;;264        FLASH_Program_HalfWord(Address, (uint16_t) Data);
;;;265      }
;;;266      else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
0001ea  2802              CMP      r0,#2
0001ec  d010              BEQ      |L1.528|
;;;267      {
;;;268        /*Program word (32-bit) at a specified address.*/
;;;269        FLASH_Program_Word(Address, (uint32_t) Data);
;;;270      }
;;;271      else
;;;272      {
;;;273        /*Program double word (64-bit) at a specified address.*/
;;;274        FLASH_Program_DoubleWord(Address, Data);
0001ee  4628              MOV      r0,r5
0001f0  f7fffffe          BL       _Z24FLASH_Program_DoubleWordjy ; FLASH_Program_DoubleWord(unsigned, unsigned long long)
                  |L1.500|
;;;275      }
;;;276    
;;;277      return status;
0001f4  4620              MOV      r0,r4
;;;278    }
0001f6  bd70              POP      {r4-r6,pc}
                  |L1.504|
0001f8  2002              MOVS     r0,#2                 ;238
0001fa  bd70              POP      {r4-r6,pc}
                  |L1.508|
0001fc  b2d1              UXTB     r1,r2                 ;259
0001fe  4628              MOV      r0,r5                 ;259
000200  f7fffffe          BL       _Z18FLASH_Program_Bytejh ; FLASH_Program_Byte(unsigned, unsigned char)
000204  e7f6              B        |L1.500|
                  |L1.518|
000206  b291              UXTH     r1,r2                 ;264
000208  4628              MOV      r0,r5                 ;264
00020a  f7fffffe          BL       _Z22FLASH_Program_HalfWordjt ; FLASH_Program_HalfWord(unsigned, unsigned short)
00020e  e7f1              B        |L1.500|
                  |L1.528|
000210  4611              MOV      r1,r2                 ;269
000212  4628              MOV      r0,r5                 ;269
000214  f7fffffe          BL       _Z18FLASH_Program_Wordjj ; FLASH_Program_Word(unsigned, unsigned)
000218  e7ec              B        |L1.500|
;;;279    
                          ENDP

                  HAL_FLASH_OperationErrorCallback PROC
;;;426      */
;;;427    __weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
00021a  4770              BX       lr
;;;428    {
;;;429      /* NOTE : This function Should not be modified, when the callback is needed,
;;;430                the HAL_FLASH_OperationErrorCallback could be implemented in the user file
;;;431       */ 
;;;432    }
;;;433    
                          ENDP

                  HAL_FLASH_EndOfOperationCallback PROC
;;;411      */
;;;412    __weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
00021c  4770              BX       lr
;;;413    {
;;;414      /* NOTE : This function Should not be modified, when the callback is needed,
;;;415                the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
;;;416       */ 
;;;417    }
;;;418    
                          ENDP

                  HAL_FLASH_IRQHandler PROC
;;;283      */
;;;284    void HAL_FLASH_IRQHandler(void)
00021e  e92d41f0          PUSH     {r4-r8,lr}
;;;285    {
;;;286      uint32_t temp;
;;;287      
;;;288      /* If the program operation is completed, disable the PG Bit */
;;;289      FLASH->CR &= (~FLASH_CR_PG);
000222  4c54              LDR      r4,|L1.884|
000224  6820              LDR      r0,[r4,#0]
000226  f0200001          BIC      r0,r0,#1
00022a  6020              STR      r0,[r4,#0]
;;;290    
;;;291      /* If the erase operation is completed, disable the SER Bit */
;;;292      FLASH->CR &= (~FLASH_CR_SER);
00022c  6820              LDR      r0,[r4,#0]
00022e  f0200002          BIC      r0,r0,#2
000232  6020              STR      r0,[r4,#0]
;;;293      FLASH->CR &= SECTOR_MASK; 
000234  6820              LDR      r0,[r4,#0]
000236  f02000f8          BIC      r0,r0,#0xf8
00023a  6020              STR      r0,[r4,#0]
;;;294    
;;;295      /* if the erase operation is completed, disable the MER Bit */
;;;296      FLASH->CR &= (~FLASH_MER_BIT);
00023c  6820              LDR      r0,[r4,#0]
00023e  f0200004          BIC      r0,r0,#4
000242  6020              STR      r0,[r4,#0]
;;;297    
;;;298      /* Check FLASH End of Operation flag  */
;;;299      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
000244  1f27              SUBS     r7,r4,#4
000246  6838              LDR      r0,[r7,#0]
;;;300      {
;;;301        if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
000248  4e49              LDR      r6,|L1.880|
00024a  f0100f01          TST      r0,#1                 ;299
00024e  f04f0800          MOV      r8,#0                 ;299
000252  d00c              BEQ      |L1.622|
000254  7830              LDRB     r0,[r6,#0]  ; pFlash
;;;302        {
;;;303          /*Nb of sector to erased can be decreased*/
;;;304          pFlash.NbSectorsToErase--;
;;;305    
;;;306          /* Check if there are still sectors to erase*/
;;;307          if(pFlash.NbSectorsToErase != 0)
;;;308          {
;;;309            temp = pFlash.Sector;
;;;310            /*Indicate user which sector has been erased*/
;;;311            HAL_FLASH_EndOfOperationCallback(temp);
;;;312    
;;;313            /* Clear pending flags (if any) */  
;;;314            __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |\
;;;315             FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR| FLASH_FLAG_PGSERR);  
;;;316    
;;;317            /*Increment sector number*/
;;;318            pFlash.Sector++;
;;;319            temp = pFlash.Sector;
;;;320            FLASH_Erase_Sector(temp, pFlash.VoltageForErase);
;;;321          }
;;;322          else
;;;323          {
;;;324            /*No more sectors to Erase, user callback can be called.*/
;;;325            /*Reset Sector and stop Erase sectors procedure*/
;;;326            pFlash.Sector = temp = 0xFFFFFFFF;
;;;327            pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;328            /* FLASH EOP interrupt user callback */
;;;329            HAL_FLASH_EndOfOperationCallback(temp);
;;;330            /* Clear FLASH End of Operation pending bit */
;;;331            __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
000256  2501              MOVS     r5,#1
000258  2801              CMP      r0,#1                 ;301
00025a  d02c              BEQ      |L1.694|
;;;332          }
;;;333        }
;;;334        else 
;;;335        {
;;;336          if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
00025c  7830              LDRB     r0,[r6,#0]  ; pFlash
00025e  2802              CMP      r0,#2
000260  d044              BEQ      |L1.748|
;;;337          {
;;;338            /*MassErase ended. Return the selected bank*/
;;;339            /* FLASH EOP interrupt user callback */
;;;340            HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
;;;341          }
;;;342          else
;;;343          {
;;;344            /*Program ended. Return the selected address*/
;;;345            /* FLASH EOP interrupt user callback */
;;;346            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
000262  6970              LDR      r0,[r6,#0x14]  ; pFlash
000264  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
                  |L1.616|
;;;347          }
;;;348          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
000268  f8868000          STRB     r8,[r6,#0]
;;;349          /* Clear FLASH End of Operation pending bit */
;;;350          __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
00026c  603d              STR      r5,[r7,#0]
                  |L1.622|
;;;351        }
;;;352    
;;;353      }
;;;354      
;;;355      /* Check FLASH operation error flags */
;;;356      if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
00026e  6838              LDR      r0,[r7,#0]
000270  f4107ff9          TST      r0,#0x1f2
000274  d010              BEQ      |L1.664|
;;;357                               FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
;;;358      {
;;;359        if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
000276  7830              LDRB     r0,[r6,#0]  ; pFlash
000278  2801              CMP      r0,#1
00027a  d03b              BEQ      |L1.756|
;;;360        {
;;;361          /*return the faulty sector*/
;;;362          temp = pFlash.Sector;
;;;363          pFlash.Sector = 0xFFFFFFFF;
;;;364        }
;;;365        else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
00027c  7830              LDRB     r0,[r6,#0]  ; pFlash
00027e  2802              CMP      r0,#2
000280  d03d              BEQ      |L1.766|
;;;366        {
;;;367          /*return the faulty bank*/
;;;368          temp = pFlash.Bank;
;;;369        }
;;;370        else
;;;371        {
;;;372          /*return the faulty address*/
;;;373          temp = pFlash.Address;
000282  6975              LDR      r5,[r6,#0x14]  ; pFlash
                  |L1.644|
;;;374        }
;;;375        
;;;376        /*Save the Error code*/
;;;377        FLASH_SetErrorCode();
000284  f7fffffe          BL       _Z18FLASH_SetErrorCodev ; FLASH_SetErrorCode()
;;;378    
;;;379        /* FLASH error interrupt user callback */
;;;380        HAL_FLASH_OperationErrorCallback(temp);
000288  4628              MOV      r0,r5
00028a  f7fffffe          BL       HAL_FLASH_OperationErrorCallback
;;;381        /* Clear FLASH error pending bits */
;;;382        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR  | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR |\
00028e  f44f70f9          MOV      r0,#0x1f2
000292  6038              STR      r0,[r7,#0]
;;;383                               FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR);
;;;384    
;;;385        /*Stop the procedure ongoing*/
;;;386        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
000294  f8868000          STRB     r8,[r6,#0]
                  |L1.664|
;;;387      }
;;;388      
;;;389      if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
000298  7830              LDRB     r0,[r6,#0]  ; pFlash
00029a  2800              CMP      r0,#0
00029c  d109              BNE      |L1.690|
;;;390      {
;;;391        /* Disable End of FLASH Operation interrupt */
;;;392        __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
00029e  6820              LDR      r0,[r4,#0]
0002a0  f0207080          BIC      r0,r0,#0x1000000
0002a4  6020              STR      r0,[r4,#0]
;;;393    
;;;394        /* Disable Error source interrupt */
;;;395        __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
0002a6  6820              LDR      r0,[r4,#0]
0002a8  f0207000          BIC      r0,r0,#0x2000000
0002ac  6020              STR      r0,[r4,#0]
;;;396    
;;;397        /* Process Unlocked */
;;;398        __HAL_UNLOCK(&pFlash);
0002ae  f8868018          STRB     r8,[r6,#0x18]
                  |L1.690|
;;;399      }
;;;400      
;;;401    }
0002b2  e8bd81f0          POP      {r4-r8,pc}
                  |L1.694|
0002b6  6870              LDR      r0,[r6,#4]            ;304  ; pFlash
0002b8  1e40              SUBS     r0,r0,#1              ;304
0002ba  6070              STR      r0,[r6,#4]            ;304  ; pFlash
0002bc  6870              LDR      r0,[r6,#4]            ;307  ; pFlash
0002be  b160              CBZ      r0,|L1.730|
0002c0  68f0              LDR      r0,[r6,#0xc]          ;309  ; pFlash
0002c2  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
0002c6  20f3              MOVS     r0,#0xf3              ;314
0002c8  6038              STR      r0,[r7,#0]            ;314
0002ca  68f0              LDR      r0,[r6,#0xc]          ;318  ; pFlash
0002cc  1c40              ADDS     r0,r0,#1              ;318
0002ce  60f0              STR      r0,[r6,#0xc]          ;318  ; pFlash
0002d0  68f0              LDR      r0,[r6,#0xc]          ;319  ; pFlash
0002d2  7a31              LDRB     r1,[r6,#8]            ;320  ; pFlash
0002d4  f7fffffe          BL       FLASH_Erase_Sector
0002d8  e7c9              B        |L1.622|
                  |L1.730|
0002da  f04f30ff          MOV      r0,#0xffffffff        ;326
0002de  60f0              STR      r0,[r6,#0xc]          ;326  ; pFlash
0002e0  f8868000          STRB     r8,[r6,#0]            ;327
0002e4  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
0002e8  603d              STR      r5,[r7,#0]            ;331
0002ea  e7c0              B        |L1.622|
                  |L1.748|
0002ec  6930              LDR      r0,[r6,#0x10]         ;340  ; pFlash
0002ee  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
0002f2  e7b9              B        |L1.616|
                  |L1.756|
0002f4  68f5              LDR      r5,[r6,#0xc]          ;362  ; pFlash
0002f6  f04f30ff          MOV      r0,#0xffffffff        ;363
0002fa  60f0              STR      r0,[r6,#0xc]          ;363  ; pFlash
0002fc  e7c2              B        |L1.644|
                  |L1.766|
0002fe  6935              LDR      r5,[r6,#0x10]         ;368  ; pFlash
000300  e7c0              B        |L1.644|
;;;402    
                          ENDP

                  HAL_FLASH_Unlock PROC
;;;456      */
;;;457    HAL_StatusTypeDef HAL_FLASH_Unlock(void)
000302  481c              LDR      r0,|L1.884|
;;;458    {
;;;459      if((FLASH->CR & FLASH_CR_LOCK) != RESET)
000304  6800              LDR      r0,[r0,#0]
000306  f0104f00          TST      r0,#0x80000000
00030a  d006              BEQ      |L1.794|
;;;460      {
;;;461        /* Authorize the FLASH Registers access */
;;;462        FLASH->KEYR = FLASH_KEY1;
00030c  481b              LDR      r0,|L1.892|
00030e  491a              LDR      r1,|L1.888|
000310  6001              STR      r1,[r0,#0]
;;;463        FLASH->KEYR = FLASH_KEY2;
000312  491b              LDR      r1,|L1.896|
000314  6001              STR      r1,[r0,#0]
;;;464      }
;;;465      else
;;;466      {
;;;467        return HAL_ERROR;
;;;468      }
;;;469      
;;;470      return HAL_OK; 
000316  2000              MOVS     r0,#0
;;;471    }
000318  4770              BX       lr
                  |L1.794|
00031a  2001              MOVS     r0,#1                 ;467
00031c  4770              BX       lr
;;;472    
                          ENDP

                  HAL_FLASH_Lock PROC
;;;476      */
;;;477    HAL_StatusTypeDef HAL_FLASH_Lock(void)
00031e  4815              LDR      r0,|L1.884|
;;;478    {
;;;479      /* Set the LOCK Bit to lock the FLASH Registers access */
;;;480      FLASH->CR |= FLASH_CR_LOCK;
000320  6801              LDR      r1,[r0,#0]
000322  f0414100          ORR      r1,r1,#0x80000000
000326  6001              STR      r1,[r0,#0]
;;;481      
;;;482      return HAL_OK;  
000328  2000              MOVS     r0,#0
;;;483    }
00032a  4770              BX       lr
;;;484    
                          ENDP

                  HAL_FLASH_OB_Unlock PROC
;;;488      */
;;;489    HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
00032c  4815              LDR      r0,|L1.900|
;;;490    {
;;;491      if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
00032e  6800              LDR      r0,[r0,#0]
000330  f0100f01          TST      r0,#1
000334  d006              BEQ      |L1.836|
;;;492      {
;;;493        /* Authorizes the Option Byte register programming */
;;;494        FLASH->OPTKEYR = FLASH_OPT_KEY1;
000336  4815              LDR      r0,|L1.908|
000338  4913              LDR      r1,|L1.904|
00033a  6001              STR      r1,[r0,#0]
;;;495        FLASH->OPTKEYR = FLASH_OPT_KEY2;
00033c  4914              LDR      r1,|L1.912|
00033e  6001              STR      r1,[r0,#0]
;;;496      }
;;;497      else
;;;498      {
;;;499        return HAL_ERROR;
;;;500      }  
;;;501      
;;;502      return HAL_OK;  
000340  2000              MOVS     r0,#0
;;;503    }
000342  4770              BX       lr
                  |L1.836|
000344  2001              MOVS     r0,#1                 ;499
000346  4770              BX       lr
;;;504    
                          ENDP

                  HAL_FLASH_OB_Lock PROC
;;;508      */
;;;509    HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
000348  480e              LDR      r0,|L1.900|
;;;510    {
;;;511      /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
;;;512      FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
00034a  6801              LDR      r1,[r0,#0]
00034c  f0410101          ORR      r1,r1,#1
000350  6001              STR      r1,[r0,#0]
;;;513      
;;;514      return HAL_OK;  
000352  2000              MOVS     r0,#0
;;;515    }
000354  4770              BX       lr
;;;516    
                          ENDP

                  HAL_FLASH_OB_Launch PROC
;;;520      */
;;;521    HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
000356  480b              LDR      r0,|L1.900|
;;;522    {
;;;523      /* Set the OPTSTRT bit in OPTCR register */
;;;524      *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
000358  7801              LDRB     r1,[r0,#0]
00035a  f0410102          ORR      r1,r1,#2
00035e  7001              STRB     r1,[r0,#0]
;;;525    
;;;526      /* Wait for last operation to be completed */
;;;527      return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
000360  f24c3050          MOV      r0,#0xc350
000364  e7fe              B        FLASH_WaitForLastOperation
;;;528    }
;;;529    
                          ENDP

                  HAL_FLASH_GetError PROC
;;;557      */
;;;558    uint32_t HAL_FLASH_GetError(void)
000366  4802              LDR      r0,|L1.880|
;;;559    { 
;;;560       return pFlash.ErrorCode;
000368  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
;;;561    }  
00036a  4770              BX       lr
;;;562      
                          ENDP

                  |L1.876|
                          DCD      0x40023c0c
                  |L1.880|
                          DCD      ||.bss||
                  |L1.884|
                          DCD      0x40023c10
                  |L1.888|
                          DCD      0x45670123
                  |L1.892|
                          DCD      0x40023c04
                  |L1.896|
                          DCD      0xcdef89ab
                  |L1.900|
                          DCD      0x40023c14
                  |L1.904|
                          DCD      0x08192a3b
                  |L1.908|
                          DCD      0x40023c08
                  |L1.912|
                          DCD      0x4c5d6e7f

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pFlash
                          %        32

;*** Start embedded assembler ***

#line 1 "drivers\\src\\stm32f4xx_hal_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_hal_flash_c_48aa8f3e___Z7__REV16j|
#line 138 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.3.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___21_stm32f4xx_hal_flash_c_48aa8f3e___Z7__REV16j| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_hal_flash_c_48aa8f3e___Z7__REVSHi|
#line 153
|__asm___21_stm32f4xx_hal_flash_c_48aa8f3e___Z7__REVSHi| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_hal_flash_c_48aa8f3e___Z5__RRXj|
#line 328
|__asm___21_stm32f4xx_hal_flash_c_48aa8f3e___Z5__RRXj| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
