; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp11 --list --debug -c --asm --interleave -o.\objects\stm32f4xx_hal_dma_ex.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f4xx_hal_dma_ex.d --cpu=Cortex-M4.fp --apcs=interwork -O1 -Otime --diag_suppress=9931 -I.\device\GUI\inc -I.\device\hardware\inc -I.\device\init\inc -I.\misc\inc -I.\user\inc -I..\tester_1.03 -I.\memory\inc -I.\drivers\inc -I.\res -I..\Embed -IE:\KeilProj\Embed\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F417xx -DSTM32F417xx -DColorDepthBpp16 -Dtftili9486 -DSOFTWARE_GL -DGUI_ALLIGN_LAYSIZE_TO_POW2 --omf_browse=.\objects\stm32f4xx_hal_dma_ex.crf drivers\src\stm32f4xx_hal_dma_ex.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  _ZN44_INTERNAL_22_stm32f4xx_hal_dma_ex_c_af8eecb024DMA_MultiBufferSetConfigEP19__DMA_HandleTypeDefjjj PROC ; [local to stm32f4xx_hal_dma_ex_c]::DMA_MultiBufferSetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
;;;268      */
;;;269    static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  f8d0c000          LDR      r12,[r0,#0]
;;;270    {  
;;;271      /* Configure DMA Stream data length */
;;;272      hdma->Instance->NDTR = DataLength;
000004  f8cc3004          STR      r3,[r12,#4]
;;;273      
;;;274      /* Peripheral to Memory */
;;;275      if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
000008  6883              LDR      r3,[r0,#8]
00000a  2b40              CMP      r3,#0x40
00000c  d004              BEQ      |L1.24|
;;;276      {   
;;;277        /* Configure DMA Stream destination address */
;;;278        hdma->Instance->PAR = DstAddress;
;;;279        
;;;280        /* Configure DMA Stream source address */
;;;281        hdma->Instance->M0AR = SrcAddress;
;;;282      }
;;;283      /* Memory to Peripheral */
;;;284      else
;;;285      {
;;;286        /* Configure DMA Stream source address */
;;;287        hdma->Instance->PAR = SrcAddress;
00000e  6803              LDR      r3,[r0,#0]
000010  6099              STR      r1,[r3,#8]
;;;288        
;;;289        /* Configure DMA Stream destination address */
;;;290        hdma->Instance->M0AR = DstAddress;
000012  6800              LDR      r0,[r0,#0]
000014  60c2              STR      r2,[r0,#0xc]
;;;291      }
;;;292    }
000016  4770              BX       lr
                  |L1.24|
000018  6803              LDR      r3,[r0,#0]            ;278
00001a  609a              STR      r2,[r3,#8]            ;278
00001c  6800              LDR      r0,[r0,#0]            ;281
00001e  60c1              STR      r1,[r0,#0xc]          ;281
000020  4770              BX       lr
;;;293    
                          ENDP

                  HAL_DMAEx_MultiBufferStart PROC
;;;118      */
;;;119    HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
000022  b570              PUSH     {r4-r6,lr}
;;;120    {
000024  4604              MOV      r4,r0
000026  f8ddc010          LDR      r12,[sp,#0x10]
;;;121      /* Process Locked */
;;;122      __HAL_LOCK(hdma);
00002a  f8940034          LDRB     r0,[r4,#0x34]
00002e  2801              CMP      r0,#1
000030  d024              BEQ      |L1.124|
000032  2001              MOVS     r0,#1
000034  f8840034          STRB     r0,[r4,#0x34]
;;;123    
;;;124      /* Current memory buffer used is Memory 0 */
;;;125      if((hdma->Instance->CR & DMA_SxCR_CT) == 0)
000038  6820              LDR      r0,[r4,#0]
00003a  6805              LDR      r5,[r0,#0]
00003c  f4152f00          TST      r5,#0x80000
000040  d01e              BEQ      |L1.128|
;;;126      {
;;;127        hdma->State = HAL_DMA_STATE_BUSY_MEM0;
;;;128      }
;;;129      /* Current memory buffer used is Memory 1 */
;;;130      else if((hdma->Instance->CR & DMA_SxCR_CT) != 0)
000042  6805              LDR      r5,[r0,#0]
000044  f4152f00          TST      r5,#0x80000
000048  d002              BEQ      |L1.80|
;;;131      {
;;;132        hdma->State = HAL_DMA_STATE_BUSY_MEM1;
00004a  2522              MOVS     r5,#0x22
00004c  f8845035          STRB     r5,[r4,#0x35]
                  |L1.80|
;;;133      }
;;;134    
;;;135       /* Check the parameters */
;;;136      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
;;;137    
;;;138      /* Disable the peripheral */
;;;139      __HAL_DMA_DISABLE(hdma);  
000050  6805              LDR      r5,[r0,#0]
000052  f0250501          BIC      r5,r5,#1
000056  6005              STR      r5,[r0,#0]
;;;140    
;;;141      /* Enable the double buffer mode */
;;;142      hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
000058  6820              LDR      r0,[r4,#0]
00005a  6805              LDR      r5,[r0,#0]
00005c  f4452580          ORR      r5,r5,#0x40000
000060  6005              STR      r5,[r0,#0]
;;;143    
;;;144      /* Configure DMA Stream destination address */
;;;145      hdma->Instance->M1AR = SecondMemAddress;
000062  6820              LDR      r0,[r4,#0]
000064  6103              STR      r3,[r0,#0x10]
;;;146    
;;;147      /* Configure the source, destination address and the data length */
;;;148      DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
000066  4663              MOV      r3,r12
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       _ZN44_INTERNAL_22_stm32f4xx_hal_dma_ex_c_af8eecb024DMA_MultiBufferSetConfigEP19__DMA_HandleTypeDefjjj ; [local to stm32f4xx_hal_dma_ex_c]::DMA_MultiBufferSetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
;;;149    
;;;150      /* Enable the peripheral */
;;;151      __HAL_DMA_ENABLE(hdma);
00006e  6820              LDR      r0,[r4,#0]
000070  6801              LDR      r1,[r0,#0]
000072  f0410101          ORR      r1,r1,#1
000076  6001              STR      r1,[r0,#0]
;;;152    
;;;153      return HAL_OK;
000078  2000              MOVS     r0,#0
;;;154    }
00007a  bd70              POP      {r4-r6,pc}
                  |L1.124|
00007c  2002              MOVS     r0,#2                 ;122
00007e  bd70              POP      {r4-r6,pc}
                  |L1.128|
000080  2512              MOVS     r5,#0x12              ;127
000082  f8845035          STRB     r5,[r4,#0x35]         ;127
000086  e7e3              B        |L1.80|
;;;155    
                          ENDP

                  HAL_DMAEx_MultiBufferStart_IT PROC
;;;165      */
;;;166    HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
000088  b570              PUSH     {r4-r6,lr}
;;;167    {
00008a  4604              MOV      r4,r0
00008c  f8ddc010          LDR      r12,[sp,#0x10]
;;;168      /* Process Locked */
;;;169      __HAL_LOCK(hdma);
000090  f8940034          LDRB     r0,[r4,#0x34]
000094  2801              CMP      r0,#1
000096  d03d              BEQ      |L1.276|
000098  2001              MOVS     r0,#1
00009a  f8840034          STRB     r0,[r4,#0x34]
;;;170    
;;;171      /* Current memory buffer used is Memory 0 */
;;;172      if((hdma->Instance->CR & DMA_SxCR_CT) == 0)
00009e  6820              LDR      r0,[r4,#0]
0000a0  6805              LDR      r5,[r0,#0]
0000a2  f4152f00          TST      r5,#0x80000
0000a6  d037              BEQ      |L1.280|
;;;173      {
;;;174        hdma->State = HAL_DMA_STATE_BUSY_MEM0;
;;;175      }
;;;176      /* Current memory buffer used is Memory 1 */
;;;177      else if((hdma->Instance->CR & DMA_SxCR_CT) != 0)
0000a8  6805              LDR      r5,[r0,#0]
0000aa  f4152f00          TST      r5,#0x80000
0000ae  d002              BEQ      |L1.182|
;;;178      {
;;;179        hdma->State = HAL_DMA_STATE_BUSY_MEM1;
0000b0  2522              MOVS     r5,#0x22
0000b2  f8845035          STRB     r5,[r4,#0x35]
                  |L1.182|
;;;180      }
;;;181    
;;;182      /* Check the parameters */
;;;183      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
;;;184    
;;;185      /* Disable the peripheral */
;;;186      __HAL_DMA_DISABLE(hdma);  
0000b6  6805              LDR      r5,[r0,#0]
0000b8  f0250501          BIC      r5,r5,#1
0000bc  6005              STR      r5,[r0,#0]
;;;187    
;;;188      /* Enable the Double buffer mode */
;;;189      hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
0000be  6820              LDR      r0,[r4,#0]
0000c0  6805              LDR      r5,[r0,#0]
0000c2  f4452580          ORR      r5,r5,#0x40000
0000c6  6005              STR      r5,[r0,#0]
;;;190    
;;;191      /* Configure DMA Stream destination address */
;;;192      hdma->Instance->M1AR = SecondMemAddress;
0000c8  6820              LDR      r0,[r4,#0]
0000ca  6103              STR      r3,[r0,#0x10]
;;;193    
;;;194      /* Configure the source, destination address and the data length */
;;;195      DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
0000cc  4663              MOV      r3,r12
0000ce  4620              MOV      r0,r4
0000d0  f7fffffe          BL       _ZN44_INTERNAL_22_stm32f4xx_hal_dma_ex_c_af8eecb024DMA_MultiBufferSetConfigEP19__DMA_HandleTypeDefjjj ; [local to stm32f4xx_hal_dma_ex_c]::DMA_MultiBufferSetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
;;;196    
;;;197      /* Enable the transfer complete interrupt */
;;;198      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
0000d4  6820              LDR      r0,[r4,#0]
0000d6  6801              LDR      r1,[r0,#0]
0000d8  f0410110          ORR      r1,r1,#0x10
0000dc  6001              STR      r1,[r0,#0]
;;;199    
;;;200      /* Enable the Half transfer interrupt */
;;;201      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
0000de  6820              LDR      r0,[r4,#0]
0000e0  6801              LDR      r1,[r0,#0]
0000e2  f0410108          ORR      r1,r1,#8
0000e6  6001              STR      r1,[r0,#0]
;;;202    
;;;203      /* Enable the transfer Error interrupt */
;;;204      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
0000e8  6820              LDR      r0,[r4,#0]
0000ea  6801              LDR      r1,[r0,#0]
0000ec  f0410104          ORR      r1,r1,#4
0000f0  6001              STR      r1,[r0,#0]
;;;205    
;;;206      /* Enable the fifo Error interrupt */
;;;207      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_FE);  
0000f2  6820              LDR      r0,[r4,#0]
0000f4  6941              LDR      r1,[r0,#0x14]
0000f6  f0410180          ORR      r1,r1,#0x80
0000fa  6141              STR      r1,[r0,#0x14]
;;;208    
;;;209      /* Enable the direct mode Error interrupt */
;;;210      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_DME); 
0000fc  6820              LDR      r0,[r4,#0]
0000fe  6801              LDR      r1,[r0,#0]
000100  f0410102          ORR      r1,r1,#2
000104  6001              STR      r1,[r0,#0]
;;;211    
;;;212      /* Enable the peripheral */
;;;213      __HAL_DMA_ENABLE(hdma); 
000106  6820              LDR      r0,[r4,#0]
000108  6801              LDR      r1,[r0,#0]
00010a  f0410101          ORR      r1,r1,#1
00010e  6001              STR      r1,[r0,#0]
;;;214    
;;;215      return HAL_OK; 
000110  2000              MOVS     r0,#0
;;;216    }
000112  bd70              POP      {r4-r6,pc}
                  |L1.276|
000114  2002              MOVS     r0,#2                 ;169
000116  bd70              POP      {r4-r6,pc}
                  |L1.280|
000118  2512              MOVS     r5,#0x12              ;174
00011a  f8845035          STRB     r5,[r4,#0x35]         ;174
00011e  e7ca              B        |L1.182|
;;;217    
                          ENDP

                  HAL_DMAEx_ChangeMemory PROC
;;;231      */
;;;232    HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
000120  6800              LDR      r0,[r0,#0]
;;;233    {
;;;234      if(memory == MEMORY0)
000122  2a00              CMP      r2,#0
000124  d002              BEQ      |L1.300|
;;;235      {
;;;236        /* change the memory0 address */
;;;237        hdma->Instance->M0AR = Address;
;;;238      }
;;;239      else
;;;240      {
;;;241        /* change the memory1 address */
;;;242        hdma->Instance->M1AR = Address;
000126  6101              STR      r1,[r0,#0x10]
                  |L1.296|
;;;243      }
;;;244    
;;;245      return HAL_OK;
000128  2000              MOVS     r0,#0
;;;246    }
00012a  4770              BX       lr
                  |L1.300|
00012c  60c1              STR      r1,[r0,#0xc]          ;237
00012e  e7fb              B        |L1.296|
;;;247    
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "drivers\\src\\stm32f4xx_hal_dma_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_dma_ex_c_af8eecb0___ZN44_INTERNAL_22_stm32f4xx_hal_dma_ex_c_af8eecb07__REV16Ej|
#line 138 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.3.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___22_stm32f4xx_hal_dma_ex_c_af8eecb0___ZN44_INTERNAL_22_stm32f4xx_hal_dma_ex_c_af8eecb07__REV16Ej| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_dma_ex_c_af8eecb0___ZN44_INTERNAL_22_stm32f4xx_hal_dma_ex_c_af8eecb07__REVSHEi|
#line 153
|__asm___22_stm32f4xx_hal_dma_ex_c_af8eecb0___ZN44_INTERNAL_22_stm32f4xx_hal_dma_ex_c_af8eecb07__REVSHEi| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_dma_ex_c_af8eecb0___ZN44_INTERNAL_22_stm32f4xx_hal_dma_ex_c_af8eecb05__RRXEj|
#line 328
|__asm___22_stm32f4xx_hal_dma_ex_c_af8eecb0___ZN44_INTERNAL_22_stm32f4xx_hal_dma_ex_c_af8eecb05__RRXEj| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
