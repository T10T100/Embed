; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp11 --list --debug -c --asm --interleave -o.\objects\stm32f4xx_hal_spi.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f4xx_hal_spi.d --cpu=Cortex-M4.fp --apcs=interwork -O1 -Otime --diag_suppress=9931 -I.\device\GUI\inc -I.\device\hardware\inc -I.\device\init\inc -I.\misc\inc -I.\user\inc -I..\tester_1.03 -I.\memory\inc -I.\drivers\inc -I.\res -I..\Embed -IE:\KeilProj\Embed\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.4.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F417xx -DSTM32F417xx -DColorDepthBpp16 -Dtftili9486 -DSOFTWARE_GL -DGUI_ALLIGN_LAYSIZE_TO_POW2 --omf_browse=.\objects\stm32f4xx_hal_spi.crf drivers\src\stm32f4xx_hal_spi.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  HAL_SPI_MspInit PROC
;;;266      */
;;;267     __weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;268     {
;;;269       /* NOTE : This function Should not be modified, when the callback is needed,
;;;270                the HAL_SPI_MspInit could be implemented in the user file
;;;271       */
;;;272    }
;;;273    
                          ENDP

                  HAL_SPI_Init PROC
;;;174      */
;;;175    HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
000002  b570              PUSH     {r4-r6,lr}
;;;176    {
000004  4604              MOV      r4,r0
;;;177      /* Check the SPI handle allocation */
;;;178      if(hspi == NULL)
000006  2c00              CMP      r4,#0
000008  d004              BEQ      |L1.20|
;;;179      {
;;;180        return HAL_ERROR;
;;;181      }
;;;182    
;;;183      /* Check the parameters */
;;;184      assert_param(IS_SPI_MODE(hspi->Init.Mode));
;;;185      assert_param(IS_SPI_DIRECTION_MODE(hspi->Init.Direction));
;;;186      assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
;;;187      assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
;;;188      assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
;;;189      assert_param(IS_SPI_NSS(hspi->Init.NSS));
;;;190      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
;;;191      assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
;;;192      assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
;;;193      assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
;;;194      assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
;;;195    
;;;196      if(hspi->State == HAL_SPI_STATE_RESET)
00000a  f8940051          LDRB     r0,[r4,#0x51]
00000e  2500              MOVS     r5,#0
000010  b110              CBZ      r0,|L1.24|
000012  e006              B        |L1.34|
                  |L1.20|
000014  2001              MOVS     r0,#1                 ;180
;;;197      {
;;;198        /* Allocate lock resource and initialize it */
;;;199        hspi->Lock = HAL_UNLOCKED;
;;;200        /* Init the low level hardware : GPIO, CLOCK, NVIC... */
;;;201        HAL_SPI_MspInit(hspi);
;;;202      }
;;;203      
;;;204      hspi->State = HAL_SPI_STATE_BUSY;
;;;205    
;;;206      /* Disable the selected SPI peripheral */
;;;207      __HAL_SPI_DISABLE(hspi);
;;;208    
;;;209      /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
;;;210      /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
;;;211      Communication speed, First bit and CRC calculation state */
;;;212      hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
;;;213                             hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
;;;214                             hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
;;;215    
;;;216      /* Configure : NSS management */
;;;217      hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode);
;;;218    
;;;219      /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
;;;220      /* Configure : CRC Polynomial */
;;;221      hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
;;;222    
;;;223      /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
;;;224      hspi->Instance->I2SCFGR &= (uint32_t)(~SPI_I2SCFGR_I2SMOD);
;;;225    
;;;226      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
;;;227      hspi->State = HAL_SPI_STATE_READY;
;;;228      
;;;229      return HAL_OK;
;;;230    }
000016  bd70              POP      {r4-r6,pc}
                  |L1.24|
000018  f8845050          STRB     r5,[r4,#0x50]         ;199
00001c  4620              MOV      r0,r4                 ;201
00001e  f7fffffe          BL       HAL_SPI_MspInit
                  |L1.34|
000022  2002              MOVS     r0,#2                 ;204
000024  f8840051          STRB     r0,[r4,#0x51]         ;204
000028  6820              LDR      r0,[r4,#0]            ;207
00002a  6801              LDR      r1,[r0,#0]            ;207
00002c  f0210140          BIC      r1,r1,#0x40           ;207
000030  6001              STR      r1,[r0,#0]            ;207
000032  68a1              LDR      r1,[r4,#8]            ;212
000034  6860              LDR      r0,[r4,#4]            ;212
000036  6922              LDR      r2,[r4,#0x10]         ;212
000038  4308              ORRS     r0,r0,r1              ;212
00003a  68e1              LDR      r1,[r4,#0xc]          ;212
00003c  4311              ORRS     r1,r1,r2              ;212
00003e  4308              ORRS     r0,r0,r1              ;212
000040  6961              LDR      r1,[r4,#0x14]         ;212
000042  4308              ORRS     r0,r0,r1              ;212
000044  8b21              LDRH     r1,[r4,#0x18]         ;212
000046  f4017100          AND      r1,r1,#0x200          ;212
00004a  4308              ORRS     r0,r0,r1              ;212
00004c  69e1              LDR      r1,[r4,#0x1c]         ;212
00004e  4308              ORRS     r0,r0,r1              ;212
000050  6a21              LDR      r1,[r4,#0x20]         ;212
000052  4308              ORRS     r0,r0,r1              ;212
000054  6aa1              LDR      r1,[r4,#0x28]         ;212
000056  4308              ORRS     r0,r0,r1              ;212
000058  6821              LDR      r1,[r4,#0]            ;212
00005a  6008              STR      r0,[r1,#0]            ;212
00005c  69a0              LDR      r0,[r4,#0x18]         ;217
00005e  2104              MOVS     r1,#4                 ;217
000060  ea014010          AND      r0,r1,r0,LSR #16      ;217
000064  6a61              LDR      r1,[r4,#0x24]         ;217
000066  4308              ORRS     r0,r0,r1              ;217
000068  6821              LDR      r1,[r4,#0]            ;217
00006a  6048              STR      r0,[r1,#4]            ;217
00006c  6821              LDR      r1,[r4,#0]            ;221
00006e  6ae0              LDR      r0,[r4,#0x2c]         ;221
000070  6108              STR      r0,[r1,#0x10]         ;221
000072  6820              LDR      r0,[r4,#0]            ;224
000074  69c1              LDR      r1,[r0,#0x1c]         ;224
000076  f4216100          BIC      r1,r1,#0x800          ;224
00007a  61c1              STR      r1,[r0,#0x1c]         ;224
00007c  6565              STR      r5,[r4,#0x54]         ;226
00007e  2001              MOVS     r0,#1                 ;227
000080  f8840051          STRB     r0,[r4,#0x51]         ;227
000084  2000              MOVS     r0,#0                 ;229
000086  bd70              POP      {r4-r6,pc}
;;;231    
                          ENDP

                  HAL_SPI_MspDeInit PROC
;;;279      */
;;;280     __weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
000088  4770              BX       lr
;;;281    {
;;;282      /* NOTE : This function Should not be modified, when the callback is needed,
;;;283                the HAL_SPI_MspDeInit could be implemented in the user file
;;;284       */
;;;285    }
;;;286    
                          ENDP

                  HAL_SPI_DeInit PROC
;;;237      */
;;;238    HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
00008a  b510              PUSH     {r4,lr}
;;;239    {
00008c  4604              MOV      r4,r0
;;;240      /* Check the SPI handle allocation */
;;;241      if(hspi == NULL)
00008e  2c00              CMP      r4,#0
000090  d00e              BEQ      |L1.176|
;;;242      {
;;;243        return HAL_ERROR;
;;;244      }
;;;245    
;;;246      /* Disable the SPI Peripheral Clock */
;;;247      __HAL_SPI_DISABLE(hspi);
000092  6820              LDR      r0,[r4,#0]
000094  6801              LDR      r1,[r0,#0]
000096  f0210140          BIC      r1,r1,#0x40
00009a  6001              STR      r1,[r0,#0]
;;;248    
;;;249      /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
;;;250      HAL_SPI_MspDeInit(hspi);
00009c  4620              MOV      r0,r4
00009e  f7fffffe          BL       HAL_SPI_MspDeInit
;;;251    
;;;252      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
0000a2  2000              MOVS     r0,#0
0000a4  6560              STR      r0,[r4,#0x54]
;;;253      hspi->State = HAL_SPI_STATE_RESET;
0000a6  f8840051          STRB     r0,[r4,#0x51]
;;;254    
;;;255      /* Release Lock */
;;;256      __HAL_UNLOCK(hspi);
0000aa  f8840050          STRB     r0,[r4,#0x50]
;;;257    
;;;258      return HAL_OK;
;;;259    }
0000ae  bd10              POP      {r4,pc}
                  |L1.176|
0000b0  2001              MOVS     r0,#1                 ;243
0000b2  bd10              POP      {r4,pc}
;;;260    
                          ENDP

                  _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj PROC ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
;;;2204     */
;;;2205   static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
0000b4  e92d47f0          PUSH     {r4-r10,lr}
;;;2206   {
0000b8  4604              MOV      r4,r0
0000ba  460e              MOV      r6,r1
0000bc  4692              MOV      r10,r2
0000be  461d              MOV      r5,r3
;;;2207     uint32_t tickstart = 0;
;;;2208   
;;;2209     /* Get tick */ 
;;;2210     tickstart = HAL_GetTick();
0000c0  f7fffffe          BL       HAL_GetTick
0000c4  4607              MOV      r7,r0
;;;2211   
;;;2212     /* Wait until flag is set */
;;;2213     if(Status == RESET)
0000c6  f04f0800          MOV      r8,#0
;;;2214     {
;;;2215       while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
;;;2216       {
;;;2217         if(Timeout != HAL_MAX_DELAY)
;;;2218         {
;;;2219           if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
;;;2220           {
;;;2221             /* Disable the SPI and reset the CRC: the CRC value should be cleared
;;;2222                on both master and slave sides in order to resynchronize the master
;;;2223                and slave for their respective CRC calculation */
;;;2224   
;;;2225             /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
;;;2226             __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
;;;2227   
;;;2228             /* Disable SPI peripheral */
;;;2229             __HAL_SPI_DISABLE(hspi);
;;;2230   
;;;2231             /* Reset CRC Calculation */
;;;2232             if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;2233             {
;;;2234               SPI_RESET_CRC(hspi);
;;;2235             }
;;;2236   
;;;2237             hspi->State= HAL_SPI_STATE_READY;
0000ca  f04f0901          MOV      r9,#1
0000ce  f1ba0f00          CMP      r10,#0                ;2213
0000d2  d005              BEQ      |L1.224|
;;;2238   
;;;2239             /* Process Unlocked */
;;;2240             __HAL_UNLOCK(hspi);
;;;2241   
;;;2242             return HAL_TIMEOUT;
;;;2243           }
;;;2244         }
;;;2245       }
;;;2246     }
;;;2247     else
;;;2248     {
;;;2249       while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
0000d4  6820              LDR      r0,[r4,#0]
0000d6  6880              LDR      r0,[r0,#8]
0000d8  ea360000          BICS     r0,r6,r0
0000dc  d033              BEQ      |L1.326|
0000de  e05f              B        |L1.416|
                  |L1.224|
0000e0  6820              LDR      r0,[r4,#0]            ;2215
0000e2  6880              LDR      r0,[r0,#8]            ;2215
0000e4  ea360000          BICS     r0,r6,r0              ;2215
0000e8  d05a              BEQ      |L1.416|
                  |L1.234|
0000ea  f1b53fff          CMP      r5,#0xffffffff        ;2217
0000ee  d024              BEQ      |L1.314|
0000f0  b125              CBZ      r5,|L1.252|
0000f2  f7fffffe          BL       HAL_GetTick
0000f6  1bc0              SUBS     r0,r0,r7              ;2219
0000f8  42a8              CMP      r0,r5                 ;2219
0000fa  d91e              BLS      |L1.314|
                  |L1.252|
0000fc  6820              LDR      r0,[r4,#0]            ;2226
0000fe  6841              LDR      r1,[r0,#4]            ;2226
000100  f02101e0          BIC      r1,r1,#0xe0           ;2226
000104  6041              STR      r1,[r0,#4]            ;2226
000106  6820              LDR      r0,[r4,#0]            ;2229
000108  6801              LDR      r1,[r0,#0]            ;2229
00010a  f0210140          BIC      r1,r1,#0x40           ;2229
00010e  6001              STR      r1,[r0,#0]            ;2229
000110  6aa0              LDR      r0,[r4,#0x28]         ;2232
000112  f5b05f00          CMP      r0,#0x2000            ;2232
000116  d109              BNE      |L1.300|
000118  6820              LDR      r0,[r4,#0]            ;2234
00011a  6801              LDR      r1,[r0,#0]            ;2234
00011c  f4215100          BIC      r1,r1,#0x2000         ;2234
000120  6001              STR      r1,[r0,#0]            ;2234
000122  6820              LDR      r0,[r4,#0]            ;2234
000124  6801              LDR      r1,[r0,#0]            ;2234
000126  f4415100          ORR      r1,r1,#0x2000         ;2234
00012a  6001              STR      r1,[r0,#0]            ;2234
                  |L1.300|
00012c  f8849051          STRB     r9,[r4,#0x51]         ;2237
000130  f8848050          STRB     r8,[r4,#0x50]         ;2240
000134  2003              MOVS     r0,#3                 ;2242
;;;2250       {
;;;2251         if(Timeout != HAL_MAX_DELAY)
;;;2252         {
;;;2253           if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
;;;2254           {
;;;2255             /* Disable the SPI and reset the CRC: the CRC value should be cleared
;;;2256                on both master and slave sides in order to resynchronize the master
;;;2257                and slave for their respective CRC calculation */
;;;2258   
;;;2259             /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
;;;2260             __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
;;;2261   
;;;2262             /* Disable SPI peripheral */
;;;2263             __HAL_SPI_DISABLE(hspi);
;;;2264   
;;;2265             /* Reset CRC Calculation */
;;;2266             if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;2267             {
;;;2268               SPI_RESET_CRC(hspi);
;;;2269             }
;;;2270   
;;;2271             hspi->State= HAL_SPI_STATE_READY;
;;;2272   
;;;2273             /* Process Unlocked */
;;;2274             __HAL_UNLOCK(hspi);
;;;2275   
;;;2276             return HAL_TIMEOUT;
;;;2277           }
;;;2278         }
;;;2279       }
;;;2280     }
;;;2281     return HAL_OK;
;;;2282   }
000136  e8bd87f0          POP      {r4-r10,pc}
                  |L1.314|
00013a  6820              LDR      r0,[r4,#0]            ;2215
00013c  6880              LDR      r0,[r0,#8]            ;2215
00013e  ea360000          BICS     r0,r6,r0              ;2215
000142  d1d2              BNE      |L1.234|
000144  e02c              B        |L1.416|
                  |L1.326|
000146  f1b53fff          CMP      r5,#0xffffffff        ;2251
00014a  d024              BEQ      |L1.406|
00014c  b125              CBZ      r5,|L1.344|
00014e  f7fffffe          BL       HAL_GetTick
000152  1bc0              SUBS     r0,r0,r7              ;2253
000154  42a8              CMP      r0,r5                 ;2253
000156  d91e              BLS      |L1.406|
                  |L1.344|
000158  6820              LDR      r0,[r4,#0]            ;2260
00015a  6841              LDR      r1,[r0,#4]            ;2260
00015c  f02101e0          BIC      r1,r1,#0xe0           ;2260
000160  6041              STR      r1,[r0,#4]            ;2260
000162  6820              LDR      r0,[r4,#0]            ;2263
000164  6801              LDR      r1,[r0,#0]            ;2263
000166  f0210140          BIC      r1,r1,#0x40           ;2263
00016a  6001              STR      r1,[r0,#0]            ;2263
00016c  6aa0              LDR      r0,[r4,#0x28]         ;2266
00016e  f5b05f00          CMP      r0,#0x2000            ;2266
000172  d109              BNE      |L1.392|
000174  6820              LDR      r0,[r4,#0]            ;2268
000176  6801              LDR      r1,[r0,#0]            ;2268
000178  f4215100          BIC      r1,r1,#0x2000         ;2268
00017c  6001              STR      r1,[r0,#0]            ;2268
00017e  6820              LDR      r0,[r4,#0]            ;2268
000180  6801              LDR      r1,[r0,#0]            ;2268
000182  f4415100          ORR      r1,r1,#0x2000         ;2268
000186  6001              STR      r1,[r0,#0]            ;2268
                  |L1.392|
000188  f8849051          STRB     r9,[r4,#0x51]         ;2271
00018c  f8848050          STRB     r8,[r4,#0x50]         ;2274
000190  2003              MOVS     r0,#3                 ;2276
000192  e8bd87f0          POP      {r4-r10,pc}
                  |L1.406|
000196  6820              LDR      r0,[r4,#0]            ;2249
000198  6880              LDR      r0,[r0,#8]            ;2249
00019a  ea360000          BICS     r0,r6,r0              ;2249
00019e  d0d2              BEQ      |L1.326|
                  |L1.416|
0001a0  2000              MOVS     r0,#0                 ;2281
0001a2  e8bd87f0          POP      {r4-r10,pc}
;;;2283   
                          ENDP

                  HAL_SPI_Transmit PROC
;;;331      */
;;;332    HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
0001a6  b5f8              PUSH     {r3-r7,lr}
;;;333    {
0001a8  4604              MOV      r4,r0
0001aa  461f              MOV      r7,r3
;;;334    
;;;335      if(hspi->State == HAL_SPI_STATE_READY)
0001ac  f8940051          LDRB     r0,[r4,#0x51]
0001b0  2801              CMP      r0,#1
0001b2  d001              BEQ      |L1.440|
;;;336      {
;;;337        if((pData == NULL ) || (Size == 0)) 
;;;338        {
;;;339          return  HAL_ERROR;
;;;340        }
;;;341    
;;;342        /* Check the parameters */
;;;343        assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
;;;344    
;;;345        /* Process Locked */
;;;346        __HAL_LOCK(hspi);
;;;347    
;;;348        /* Configure communication */
;;;349        hspi->State = HAL_SPI_STATE_BUSY_TX;
;;;350        hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;351    
;;;352        hspi->pTxBuffPtr = pData;
;;;353        hspi->TxXferSize = Size;
;;;354        hspi->TxXferCount = Size;
;;;355    
;;;356        /*Init field not used in handle to zero */
;;;357        hspi->TxISR = 0;
;;;358        hspi->RxISR = 0;
;;;359        hspi->RxXferSize   = 0;
;;;360        hspi->RxXferCount  = 0;
;;;361    
;;;362        /* Reset CRC Calculation */
;;;363        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;364        {
;;;365          SPI_RESET_CRC(hspi);
;;;366        }
;;;367    
;;;368        if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
;;;369        {
;;;370          /* Configure communication direction : 1Line */
;;;371          SPI_1LINE_TX(hspi);
;;;372        }
;;;373    
;;;374        /* Check if the SPI is already enabled */ 
;;;375        if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;376        {
;;;377          /* Enable SPI peripheral */
;;;378          __HAL_SPI_ENABLE(hspi);
;;;379        }
;;;380    
;;;381        /* Transmit data in 8 Bit mode */
;;;382        if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
;;;383        {
;;;384          if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
;;;385          {
;;;386            hspi->Instance->DR = (*hspi->pTxBuffPtr++);
;;;387            hspi->TxXferCount--;
;;;388          }
;;;389          while(hspi->TxXferCount > 0)
;;;390          {
;;;391            /* Wait until TXE flag is set to send data */
;;;392            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;393            { 
;;;394              return HAL_TIMEOUT;
;;;395            }
;;;396            hspi->Instance->DR = (*hspi->pTxBuffPtr++);
;;;397            hspi->TxXferCount--;
;;;398          }
;;;399          /* Enable CRC Transmission */
;;;400          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
;;;401          {
;;;402            hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
;;;403          }
;;;404        }
;;;405        /* Transmit data in 16 Bit mode */
;;;406        else
;;;407        {
;;;408          if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
;;;409          {
;;;410            hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
;;;411            hspi->pTxBuffPtr+=2;
;;;412            hspi->TxXferCount--;
;;;413          }
;;;414          while(hspi->TxXferCount > 0)
;;;415          {
;;;416            /* Wait until TXE flag is set to send data */
;;;417            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;418            { 
;;;419              return HAL_TIMEOUT;
;;;420            }
;;;421            hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
;;;422            hspi->pTxBuffPtr+=2;
;;;423            hspi->TxXferCount--;
;;;424          }
;;;425          /* Enable CRC Transmission */
;;;426          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
;;;427          {
;;;428            hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
;;;429          }
;;;430        }
;;;431    
;;;432        /* Wait until TXE flag is set to send data */
;;;433        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;434        {
;;;435          hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
;;;436          return HAL_TIMEOUT;
;;;437        }
;;;438    
;;;439        /* Wait until Busy flag is reset before disabling SPI */
;;;440        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
;;;441        { 
;;;442          hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
;;;443          return HAL_TIMEOUT;
;;;444        }
;;;445     
;;;446        /* Clear OVERRUN flag in 2 Lines communication mode because received is not read */
;;;447        if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
;;;448        {
;;;449          __HAL_SPI_CLEAR_OVRFLAG(hspi);
;;;450        }
;;;451    
;;;452        hspi->State = HAL_SPI_STATE_READY; 
;;;453    
;;;454        /* Process Unlocked */
;;;455        __HAL_UNLOCK(hspi);
;;;456    
;;;457        return HAL_OK;
;;;458      }
;;;459      else
;;;460      {
;;;461        return HAL_BUSY;
0001b4  2002              MOVS     r0,#2
;;;462      }
;;;463    }
0001b6  bdf8              POP      {r3-r7,pc}
                  |L1.440|
0001b8  b1c1              CBZ      r1,|L1.492|
0001ba  b1ba              CBZ      r2,|L1.492|
0001bc  f8940050          LDRB     r0,[r4,#0x50]         ;346
0001c0  2801              CMP      r0,#1                 ;346
0001c2  d015              BEQ      |L1.496|
0001c4  2601              MOVS     r6,#1                 ;346
0001c6  f8846050          STRB     r6,[r4,#0x50]         ;346
0001ca  2012              MOVS     r0,#0x12              ;349
0001cc  f8840051          STRB     r0,[r4,#0x51]         ;349
0001d0  2500              MOVS     r5,#0                 ;350
0001d2  6565              STR      r5,[r4,#0x54]         ;350
0001d4  6321              STR      r1,[r4,#0x30]         ;352
0001d6  86a2              STRH     r2,[r4,#0x34]         ;353
0001d8  86e2              STRH     r2,[r4,#0x36]         ;354
0001da  64e5              STR      r5,[r4,#0x4c]         ;357
0001dc  64a5              STR      r5,[r4,#0x48]         ;358
0001de  87a5              STRH     r5,[r4,#0x3c]         ;359
0001e0  87e5              STRH     r5,[r4,#0x3e]         ;360
0001e2  6aa0              LDR      r0,[r4,#0x28]         ;363
0001e4  f5b05f00          CMP      r0,#0x2000            ;363
0001e8  d004              BEQ      |L1.500|
0001ea  e00d              B        |L1.520|
                  |L1.492|
0001ec  2001              MOVS     r0,#1                 ;339
0001ee  bdf8              POP      {r3-r7,pc}
                  |L1.496|
0001f0  2002              MOVS     r0,#2                 ;346
0001f2  bdf8              POP      {r3-r7,pc}
                  |L1.500|
0001f4  6820              LDR      r0,[r4,#0]            ;365
0001f6  6801              LDR      r1,[r0,#0]            ;365
0001f8  f4215100          BIC      r1,r1,#0x2000         ;365
0001fc  6001              STR      r1,[r0,#0]            ;365
0001fe  6820              LDR      r0,[r4,#0]            ;365
000200  6801              LDR      r1,[r0,#0]            ;365
000202  f4415100          ORR      r1,r1,#0x2000         ;365
000206  6001              STR      r1,[r0,#0]            ;365
                  |L1.520|
000208  68a0              LDR      r0,[r4,#8]            ;368
00020a  f5b04f00          CMP      r0,#0x8000            ;368
00020e  d104              BNE      |L1.538|
000210  6820              LDR      r0,[r4,#0]            ;371
000212  6801              LDR      r1,[r0,#0]            ;371
000214  f4414180          ORR      r1,r1,#0x4000         ;371
000218  6001              STR      r1,[r0,#0]            ;371
                  |L1.538|
00021a  6820              LDR      r0,[r4,#0]            ;375
00021c  6801              LDR      r1,[r0,#0]            ;375
00021e  f0110f40          TST      r1,#0x40              ;375
000222  d103              BNE      |L1.556|
000224  6801              LDR      r1,[r0,#0]            ;378
000226  f0410140          ORR      r1,r1,#0x40           ;378
00022a  6001              STR      r1,[r0,#0]            ;378
                  |L1.556|
00022c  68e0              LDR      r0,[r4,#0xc]          ;382
00022e  b128              CBZ      r0,|L1.572|
000230  6860              LDR      r0,[r4,#4]            ;408
000232  b390              CBZ      r0,|L1.666|
000234  8ee0              LDRH     r0,[r4,#0x36]         ;408
000236  2801              CMP      r0,#1                 ;408
000238  d030              BEQ      |L1.668|
00023a  e039              B        |L1.688|
                  |L1.572|
00023c  6860              LDR      r0,[r4,#4]            ;384
00023e  b110              CBZ      r0,|L1.582|
000240  8ee0              LDRH     r0,[r4,#0x36]         ;384
000242  2801              CMP      r0,#1                 ;384
000244  d108              BNE      |L1.600|
                  |L1.582|
000246  6b20              LDR      r0,[r4,#0x30]         ;386
000248  1c41              ADDS     r1,r0,#1              ;386
00024a  6321              STR      r1,[r4,#0x30]         ;386
00024c  6821              LDR      r1,[r4,#0]            ;386
00024e  7800              LDRB     r0,[r0,#0]            ;386
000250  60c8              STR      r0,[r1,#0xc]          ;386
000252  8ee0              LDRH     r0,[r4,#0x36]         ;387
000254  1e40              SUBS     r0,r0,#1              ;387
000256  86e0              STRH     r0,[r4,#0x36]         ;387
                  |L1.600|
000258  8ee0              LDRH     r0,[r4,#0x36]         ;389
00025a  b1a0              CBZ      r0,|L1.646|
                  |L1.604|
00025c  463b              MOV      r3,r7                 ;392
00025e  2200              MOVS     r2,#0                 ;392
000260  2102              MOVS     r1,#2                 ;392
000262  4620              MOV      r0,r4                 ;392
000264  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
000268  b108              CBZ      r0,|L1.622|
00026a  2003              MOVS     r0,#3                 ;394
00026c  bdf8              POP      {r3-r7,pc}
                  |L1.622|
00026e  6b20              LDR      r0,[r4,#0x30]         ;396
000270  1c41              ADDS     r1,r0,#1              ;396
000272  6321              STR      r1,[r4,#0x30]         ;396
000274  6821              LDR      r1,[r4,#0]            ;396
000276  7800              LDRB     r0,[r0,#0]            ;396
000278  60c8              STR      r0,[r1,#0xc]          ;396
00027a  8ee0              LDRH     r0,[r4,#0x36]         ;397
00027c  1e40              SUBS     r0,r0,#1              ;397
00027e  b280              UXTH     r0,r0                 ;397
000280  86e0              STRH     r0,[r4,#0x36]         ;397
000282  2800              CMP      r0,#0                 ;389
000284  d1ea              BNE      |L1.604|
                  |L1.646|
000286  6aa0              LDR      r0,[r4,#0x28]         ;400
000288  f5b05f00          CMP      r0,#0x2000            ;400
00028c  d131              BNE      |L1.754|
00028e  6820              LDR      r0,[r4,#0]            ;402
000290  6801              LDR      r1,[r0,#0]            ;402
000292  f4415180          ORR      r1,r1,#0x1000         ;402
000296  6001              STR      r1,[r0,#0]            ;402
000298  e02b              B        |L1.754|
                  |L1.666|
00029a  e7ff              B        |L1.668|
                  |L1.668|
00029c  6b20              LDR      r0,[r4,#0x30]         ;410
00029e  6821              LDR      r1,[r4,#0]            ;410
0002a0  8800              LDRH     r0,[r0,#0]            ;410
0002a2  60c8              STR      r0,[r1,#0xc]          ;410
0002a4  6b20              LDR      r0,[r4,#0x30]         ;411
0002a6  1c80              ADDS     r0,r0,#2              ;411
0002a8  6320              STR      r0,[r4,#0x30]         ;411
0002aa  8ee0              LDRH     r0,[r4,#0x36]         ;412
0002ac  1e40              SUBS     r0,r0,#1              ;412
0002ae  86e0              STRH     r0,[r4,#0x36]         ;412
                  |L1.688|
0002b0  8ee0              LDRH     r0,[r4,#0x36]         ;414
0002b2  b1a8              CBZ      r0,|L1.736|
                  |L1.692|
0002b4  463b              MOV      r3,r7                 ;417
0002b6  2200              MOVS     r2,#0                 ;417
0002b8  2102              MOVS     r1,#2                 ;417
0002ba  4620              MOV      r0,r4                 ;417
0002bc  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
0002c0  b108              CBZ      r0,|L1.710|
0002c2  2003              MOVS     r0,#3                 ;419
0002c4  bdf8              POP      {r3-r7,pc}
                  |L1.710|
0002c6  6b20              LDR      r0,[r4,#0x30]         ;421
0002c8  6821              LDR      r1,[r4,#0]            ;421
0002ca  8800              LDRH     r0,[r0,#0]            ;421
0002cc  60c8              STR      r0,[r1,#0xc]          ;421
0002ce  6b20              LDR      r0,[r4,#0x30]         ;422
0002d0  1c80              ADDS     r0,r0,#2              ;422
0002d2  6320              STR      r0,[r4,#0x30]         ;422
0002d4  8ee0              LDRH     r0,[r4,#0x36]         ;423
0002d6  1e40              SUBS     r0,r0,#1              ;423
0002d8  b280              UXTH     r0,r0                 ;423
0002da  86e0              STRH     r0,[r4,#0x36]         ;423
0002dc  2800              CMP      r0,#0                 ;414
0002de  d1e9              BNE      |L1.692|
                  |L1.736|
0002e0  6aa0              LDR      r0,[r4,#0x28]         ;426
0002e2  f5b05f00          CMP      r0,#0x2000            ;426
0002e6  d104              BNE      |L1.754|
0002e8  6820              LDR      r0,[r4,#0]            ;428
0002ea  6801              LDR      r1,[r0,#0]            ;428
0002ec  f4415180          ORR      r1,r1,#0x1000         ;428
0002f0  6001              STR      r1,[r0,#0]            ;428
                  |L1.754|
0002f2  463b              MOV      r3,r7                 ;433
0002f4  2200              MOVS     r2,#0                 ;433
0002f6  2102              MOVS     r1,#2                 ;433
0002f8  4620              MOV      r0,r4                 ;433
0002fa  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
0002fe  b128              CBZ      r0,|L1.780|
000300  6d60              LDR      r0,[r4,#0x54]         ;435
000302  f0400010          ORR      r0,r0,#0x10           ;435
000306  6560              STR      r0,[r4,#0x54]         ;435
000308  2003              MOVS     r0,#3                 ;436
00030a  bdf8              POP      {r3-r7,pc}
                  |L1.780|
00030c  463b              MOV      r3,r7                 ;440
00030e  2201              MOVS     r2,#1                 ;440
000310  2180              MOVS     r1,#0x80              ;440
000312  4620              MOV      r0,r4                 ;440
000314  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
000318  b128              CBZ      r0,|L1.806|
00031a  6d60              LDR      r0,[r4,#0x54]         ;442
00031c  f0400010          ORR      r0,r0,#0x10           ;442
000320  6560              STR      r0,[r4,#0x54]         ;442
000322  2003              MOVS     r0,#3                 ;443
000324  bdf8              POP      {r3-r7,pc}
                  |L1.806|
000326  68a0              LDR      r0,[r4,#8]            ;447
000328  b918              CBNZ     r0,|L1.818|
00032a  6820              LDR      r0,[r4,#0]            ;449
00032c  68c1              LDR      r1,[r0,#0xc]          ;449
00032e  6880              LDR      r0,[r0,#8]            ;449
000330  9000              STR      r0,[sp,#0]            ;449
                  |L1.818|
000332  f8846051          STRB     r6,[r4,#0x51]         ;452
000336  f8845050          STRB     r5,[r4,#0x50]         ;455
00033a  2000              MOVS     r0,#0                 ;457
00033c  bdf8              POP      {r3-r7,pc}
;;;464    
                          ENDP

                  HAL_SPI_TransmitReceive PROC
;;;649      */
;;;650    HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
00033e  b5f8              PUSH     {r3-r7,lr}
;;;651    {
000340  4604              MOV      r4,r0
000342  9f06              LDR      r7,[sp,#0x18]
;;;652      __IO uint16_t tmpreg;
;;;653      uint32_t tmpstate = 0, tmp = 0;
;;;654      
;;;655      tmpstate = hspi->State; 
000344  f8940051          LDRB     r0,[r4,#0x51]
;;;656      if((tmpstate == HAL_SPI_STATE_READY) || (tmpstate == HAL_SPI_STATE_BUSY_RX))
000348  2801              CMP      r0,#1
00034a  d003              BEQ      |L1.852|
00034c  2822              CMP      r0,#0x22
00034e  d001              BEQ      |L1.852|
;;;657      {
;;;658        if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0))
;;;659        {
;;;660          return  HAL_ERROR;
;;;661        }
;;;662    
;;;663        /* Check the parameters */
;;;664        assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
;;;665    
;;;666        /* Process Locked */
;;;667        __HAL_LOCK(hspi);
;;;668     
;;;669        /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
;;;670        if(hspi->State == HAL_SPI_STATE_READY)
;;;671        {
;;;672          hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
;;;673        }
;;;674    
;;;675         /* Configure communication */   
;;;676        hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;677    
;;;678        hspi->pRxBuffPtr  = pRxData;
;;;679        hspi->RxXferSize  = Size;
;;;680        hspi->RxXferCount = Size;  
;;;681        
;;;682        hspi->pTxBuffPtr  = pTxData;
;;;683        hspi->TxXferSize  = Size; 
;;;684        hspi->TxXferCount = Size;
;;;685    
;;;686        /*Init field not used in handle to zero */
;;;687        hspi->RxISR = 0;
;;;688        hspi->TxISR = 0;
;;;689    
;;;690        /* Reset CRC Calculation */
;;;691        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;692        {
;;;693          SPI_RESET_CRC(hspi);
;;;694        }
;;;695    
;;;696        /* Check if the SPI is already enabled */ 
;;;697        if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;698        {
;;;699          /* Enable SPI peripheral */
;;;700          __HAL_SPI_ENABLE(hspi);
;;;701        }
;;;702    
;;;703        /* Transmit and Receive data in 16 Bit mode */
;;;704        if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
;;;705        {
;;;706          if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
;;;707          {
;;;708            hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
;;;709            hspi->pTxBuffPtr+=2;
;;;710            hspi->TxXferCount--;
;;;711          }
;;;712          if(hspi->TxXferCount == 0)
;;;713          {
;;;714            /* Enable CRC Transmission */
;;;715            if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;716            {
;;;717              hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
;;;718            }
;;;719    
;;;720            /* Wait until RXNE flag is set */
;;;721            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;722            { 
;;;723              return HAL_TIMEOUT;
;;;724            }
;;;725    
;;;726            *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;727            hspi->pRxBuffPtr+=2;
;;;728            hspi->RxXferCount--;
;;;729          }
;;;730          else
;;;731          {
;;;732            while(hspi->TxXferCount > 0)
;;;733            {
;;;734              /* Wait until TXE flag is set to send data */
;;;735              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;736              { 
;;;737                return HAL_TIMEOUT;
;;;738              }
;;;739    
;;;740              hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
;;;741              hspi->pTxBuffPtr+=2;
;;;742              hspi->TxXferCount--;
;;;743    
;;;744              /* Enable CRC Transmission */
;;;745              if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
;;;746              {
;;;747                hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
;;;748              }
;;;749    
;;;750              /* Wait until RXNE flag is set */
;;;751              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;752              { 
;;;753                return HAL_TIMEOUT;
;;;754              }
;;;755              
;;;756              *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;757              hspi->pRxBuffPtr+=2;
;;;758              hspi->RxXferCount--;
;;;759            }
;;;760            /* Receive the last byte */
;;;761            if(hspi->Init.Mode == SPI_MODE_SLAVE)
;;;762            {
;;;763              /* Wait until RXNE flag is set */
;;;764              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;765              {
;;;766                return HAL_TIMEOUT;
;;;767              }
;;;768              
;;;769              *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;770              hspi->pRxBuffPtr+=2;
;;;771              hspi->RxXferCount--;
;;;772            }
;;;773          }
;;;774        }
;;;775        /* Transmit and Receive data in 8 Bit mode */
;;;776        else
;;;777        {
;;;778          if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
;;;779          {
;;;780            hspi->Instance->DR = (*hspi->pTxBuffPtr++);
;;;781            hspi->TxXferCount--;
;;;782          }
;;;783          if(hspi->TxXferCount == 0)
;;;784          {
;;;785            /* Enable CRC Transmission */
;;;786            if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;787            {
;;;788              hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
;;;789            }
;;;790    
;;;791            /* Wait until RXNE flag is set */
;;;792            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;793            {
;;;794              return HAL_TIMEOUT;
;;;795            }
;;;796    
;;;797            (*hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;798            hspi->RxXferCount--;
;;;799          }
;;;800          else
;;;801          {
;;;802            while(hspi->TxXferCount > 0)
;;;803            {
;;;804              /* Wait until TXE flag is set to send data */
;;;805              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;806              {
;;;807                return HAL_TIMEOUT;
;;;808              }
;;;809    
;;;810              hspi->Instance->DR = (*hspi->pTxBuffPtr++);
;;;811              hspi->TxXferCount--;
;;;812    
;;;813              /* Enable CRC Transmission */
;;;814              if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
;;;815              {
;;;816                hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
;;;817              }
;;;818    
;;;819                /* Wait until RXNE flag is set */
;;;820                if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;821                {
;;;822                  return HAL_TIMEOUT;
;;;823                }
;;;824                
;;;825                (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;826                hspi->RxXferCount--;
;;;827            }
;;;828            if(hspi->Init.Mode == SPI_MODE_SLAVE)
;;;829            {
;;;830              /* Wait until RXNE flag is set */
;;;831              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;832              {
;;;833                return HAL_TIMEOUT;
;;;834              }
;;;835              
;;;836              (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;837              hspi->RxXferCount--;
;;;838            }
;;;839          }
;;;840        }
;;;841    
;;;842        /* Read CRC from DR to close CRC calculation process */
;;;843        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;844        {
;;;845          /* Wait until RXNE flag is set */
;;;846          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;847          {
;;;848            hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
;;;849            return HAL_TIMEOUT;
;;;850          }
;;;851          /* Read CRC */
;;;852          tmpreg = hspi->Instance->DR;
;;;853          UNUSED(tmpreg);
;;;854        }
;;;855    
;;;856        /* Wait until Busy flag is reset before disabling SPI */
;;;857        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
;;;858        {
;;;859          hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
;;;860          return HAL_TIMEOUT;
;;;861        }
;;;862        
;;;863        hspi->State = HAL_SPI_STATE_READY;
;;;864    
;;;865        tmp = __HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR);
;;;866        /* Check if CRC error occurred */
;;;867        if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (tmp != RESET))
;;;868        {
;;;869          hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
;;;870    
;;;871          /* Reset CRC Calculation */
;;;872          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;873          {
;;;874            SPI_RESET_CRC(hspi);
;;;875          }
;;;876    
;;;877          /* Process Unlocked */
;;;878          __HAL_UNLOCK(hspi);
;;;879          
;;;880          return HAL_ERROR; 
;;;881        }
;;;882    
;;;883        /* Process Unlocked */
;;;884        __HAL_UNLOCK(hspi);
;;;885    
;;;886        return HAL_OK;
;;;887      }
;;;888      else
;;;889      {
;;;890        return HAL_BUSY;
000350  2002              MOVS     r0,#2
;;;891      }
;;;892    }
000352  bdf8              POP      {r3-r7,pc}
                  |L1.852|
000354  b169              CBZ      r1,|L1.882|
000356  b162              CBZ      r2,|L1.882|
000358  b15b              CBZ      r3,|L1.882|
00035a  f8940050          LDRB     r0,[r4,#0x50]         ;667
00035e  2801              CMP      r0,#1                 ;667
000360  d009              BEQ      |L1.886|
000362  2601              MOVS     r6,#1                 ;667
000364  f8846050          STRB     r6,[r4,#0x50]         ;667
000368  f8940051          LDRB     r0,[r4,#0x51]         ;670
00036c  2801              CMP      r0,#1                 ;670
00036e  d004              BEQ      |L1.890|
000370  e006              B        |L1.896|
                  |L1.882|
000372  2001              MOVS     r0,#1                 ;660
000374  bdf8              POP      {r3-r7,pc}
                  |L1.886|
000376  2002              MOVS     r0,#2                 ;667
000378  bdf8              POP      {r3-r7,pc}
                  |L1.890|
00037a  2032              MOVS     r0,#0x32              ;672
00037c  f8840051          STRB     r0,[r4,#0x51]         ;672
                  |L1.896|
000380  2500              MOVS     r5,#0                 ;676
000382  6565              STR      r5,[r4,#0x54]         ;676
000384  63a2              STR      r2,[r4,#0x38]         ;678
000386  87a3              STRH     r3,[r4,#0x3c]         ;679
000388  87e3              STRH     r3,[r4,#0x3e]         ;680
00038a  6321              STR      r1,[r4,#0x30]         ;682
00038c  86a3              STRH     r3,[r4,#0x34]         ;683
00038e  86e3              STRH     r3,[r4,#0x36]         ;684
000390  64a5              STR      r5,[r4,#0x48]         ;687
000392  64e5              STR      r5,[r4,#0x4c]         ;688
000394  6aa0              LDR      r0,[r4,#0x28]         ;691
000396  f5b05f00          CMP      r0,#0x2000            ;691
00039a  d109              BNE      |L1.944|
00039c  6820              LDR      r0,[r4,#0]            ;693
00039e  6801              LDR      r1,[r0,#0]            ;693
0003a0  f4215100          BIC      r1,r1,#0x2000         ;693
0003a4  6001              STR      r1,[r0,#0]            ;693
0003a6  6820              LDR      r0,[r4,#0]            ;693
0003a8  6801              LDR      r1,[r0,#0]            ;693
0003aa  f4415100          ORR      r1,r1,#0x2000         ;693
0003ae  6001              STR      r1,[r0,#0]            ;693
                  |L1.944|
0003b0  6820              LDR      r0,[r4,#0]            ;697
0003b2  6801              LDR      r1,[r0,#0]            ;697
0003b4  f0110f40          TST      r1,#0x40              ;697
0003b8  d103              BNE      |L1.962|
0003ba  6801              LDR      r1,[r0,#0]            ;700
0003bc  f0410140          ORR      r1,r1,#0x40           ;700
0003c0  6001              STR      r1,[r0,#0]            ;700
                  |L1.962|
0003c2  68e0              LDR      r0,[r4,#0xc]          ;704
0003c4  f5b06f00          CMP      r0,#0x800             ;704
0003c8  d006              BEQ      |L1.984|
0003ca  6860              LDR      r0,[r4,#4]            ;778
0003cc  2800              CMP      r0,#0                 ;778
0003ce  d075              BEQ      |L1.1212|
0003d0  f5b07f82          CMP      r0,#0x104             ;778
0003d4  d07f              BEQ      |L1.1238|
0003d6  e08a              B        |L1.1262|
                  |L1.984|
0003d8  6860              LDR      r0,[r4,#4]            ;706
0003da  b128              CBZ      r0,|L1.1000|
0003dc  f5b07f82          CMP      r0,#0x104             ;706
0003e0  d10c              BNE      |L1.1020|
0003e2  8ee0              LDRH     r0,[r4,#0x36]         ;706
0003e4  2801              CMP      r0,#1                 ;706
0003e6  d109              BNE      |L1.1020|
                  |L1.1000|
0003e8  6b20              LDR      r0,[r4,#0x30]         ;708
0003ea  6821              LDR      r1,[r4,#0]            ;708
0003ec  8800              LDRH     r0,[r0,#0]            ;708
0003ee  60c8              STR      r0,[r1,#0xc]          ;708
0003f0  6b20              LDR      r0,[r4,#0x30]         ;709
0003f2  1c80              ADDS     r0,r0,#2              ;709
0003f4  6320              STR      r0,[r4,#0x30]         ;709
0003f6  8ee0              LDRH     r0,[r4,#0x36]         ;710
0003f8  1e40              SUBS     r0,r0,#1              ;710
0003fa  86e0              STRH     r0,[r4,#0x36]         ;710
                  |L1.1020|
0003fc  8ee0              LDRH     r0,[r4,#0x36]         ;712
0003fe  b9e8              CBNZ     r0,|L1.1084|
000400  6aa0              LDR      r0,[r4,#0x28]         ;715
000402  f5b05f00          CMP      r0,#0x2000            ;715
000406  d104              BNE      |L1.1042|
000408  6820              LDR      r0,[r4,#0]            ;717
00040a  6801              LDR      r1,[r0,#0]            ;717
00040c  f4415180          ORR      r1,r1,#0x1000         ;717
000410  6001              STR      r1,[r0,#0]            ;717
                  |L1.1042|
000412  463b              MOV      r3,r7                 ;721
000414  2200              MOVS     r2,#0                 ;721
000416  2101              MOVS     r1,#1                 ;721
000418  4620              MOV      r0,r4                 ;721
00041a  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
00041e  b108              CBZ      r0,|L1.1060|
000420  2003              MOVS     r0,#3                 ;723
000422  bdf8              POP      {r3-r7,pc}
                  |L1.1060|
000424  6820              LDR      r0,[r4,#0]            ;726
000426  68c0              LDR      r0,[r0,#0xc]          ;726
000428  6ba1              LDR      r1,[r4,#0x38]         ;726
00042a  8008              STRH     r0,[r1,#0]            ;726
00042c  6ba0              LDR      r0,[r4,#0x38]         ;727
00042e  1c80              ADDS     r0,r0,#2              ;727
000430  63a0              STR      r0,[r4,#0x38]         ;727
000432  8fe0              LDRH     r0,[r4,#0x3e]         ;728
000434  1e40              SUBS     r0,r0,#1              ;728
000436  87e0              STRH     r0,[r4,#0x3e]         ;728
000438  f000b8bc          B.W      |L1.1460|
                  |L1.1084|
00043c  463b              MOV      r3,r7                 ;735
00043e  2200              MOVS     r2,#0                 ;735
000440  2102              MOVS     r1,#2                 ;735
000442  4620              MOV      r0,r4                 ;735
000444  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
000448  b108              CBZ      r0,|L1.1102|
00044a  2003              MOVS     r0,#3                 ;737
00044c  bdf8              POP      {r3-r7,pc}
                  |L1.1102|
00044e  6b20              LDR      r0,[r4,#0x30]         ;740
000450  6821              LDR      r1,[r4,#0]            ;740
000452  8800              LDRH     r0,[r0,#0]            ;740
000454  60c8              STR      r0,[r1,#0xc]          ;740
000456  6b20              LDR      r0,[r4,#0x30]         ;741
000458  1c80              ADDS     r0,r0,#2              ;741
00045a  6320              STR      r0,[r4,#0x30]         ;741
00045c  8ee0              LDRH     r0,[r4,#0x36]         ;742
00045e  1e40              SUBS     r0,r0,#1              ;742
000460  b280              UXTH     r0,r0                 ;742
000462  86e0              STRH     r0,[r4,#0x36]         ;742
000464  b940              CBNZ     r0,|L1.1144|
000466  6aa0              LDR      r0,[r4,#0x28]         ;745
000468  f5b05f00          CMP      r0,#0x2000            ;745
00046c  d104              BNE      |L1.1144|
00046e  6820              LDR      r0,[r4,#0]            ;747
000470  6801              LDR      r1,[r0,#0]            ;747
000472  f4415180          ORR      r1,r1,#0x1000         ;747
000476  6001              STR      r1,[r0,#0]            ;747
                  |L1.1144|
000478  463b              MOV      r3,r7                 ;751
00047a  2200              MOVS     r2,#0                 ;751
00047c  2101              MOVS     r1,#1                 ;751
00047e  4620              MOV      r0,r4                 ;751
000480  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
000484  b108              CBZ      r0,|L1.1162|
000486  2003              MOVS     r0,#3                 ;753
000488  bdf8              POP      {r3-r7,pc}
                  |L1.1162|
00048a  6820              LDR      r0,[r4,#0]            ;756
00048c  68c0              LDR      r0,[r0,#0xc]          ;756
00048e  6ba1              LDR      r1,[r4,#0x38]         ;756
000490  8008              STRH     r0,[r1,#0]            ;756
000492  6ba0              LDR      r0,[r4,#0x38]         ;757
000494  1c80              ADDS     r0,r0,#2              ;757
000496  63a0              STR      r0,[r4,#0x38]         ;757
000498  8fe0              LDRH     r0,[r4,#0x3e]         ;758
00049a  1e40              SUBS     r0,r0,#1              ;758
00049c  87e0              STRH     r0,[r4,#0x3e]         ;758
00049e  8ee0              LDRH     r0,[r4,#0x36]         ;732
0004a0  2800              CMP      r0,#0                 ;732
0004a2  d1cb              BNE      |L1.1084|
0004a4  6860              LDR      r0,[r4,#4]            ;761
0004a6  2800              CMP      r0,#0                 ;761
0004a8  d17a              BNE      |L1.1440|
0004aa  463b              MOV      r3,r7                 ;764
0004ac  2200              MOVS     r2,#0                 ;764
0004ae  2101              MOVS     r1,#1                 ;764
0004b0  4620              MOV      r0,r4                 ;764
0004b2  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
0004b6  b118              CBZ      r0,|L1.1216|
0004b8  2003              MOVS     r0,#3                 ;766
0004ba  bdf8              POP      {r3-r7,pc}
                  |L1.1212|
0004bc  e00e              B        |L1.1244|
0004be  e00a              B        |L1.1238|
                  |L1.1216|
0004c0  6820              LDR      r0,[r4,#0]            ;769
0004c2  68c0              LDR      r0,[r0,#0xc]          ;769
0004c4  6ba1              LDR      r1,[r4,#0x38]         ;769
0004c6  8008              STRH     r0,[r1,#0]            ;769
0004c8  6ba0              LDR      r0,[r4,#0x38]         ;770
0004ca  1c80              ADDS     r0,r0,#2              ;770
0004cc  63a0              STR      r0,[r4,#0x38]         ;770
0004ce  8fe0              LDRH     r0,[r4,#0x3e]         ;771
0004d0  1e40              SUBS     r0,r0,#1              ;771
0004d2  87e0              STRH     r0,[r4,#0x3e]         ;771
0004d4  e06e              B        |L1.1460|
                  |L1.1238|
0004d6  8ee0              LDRH     r0,[r4,#0x36]         ;778
0004d8  2801              CMP      r0,#1                 ;778
0004da  d108              BNE      |L1.1262|
                  |L1.1244|
0004dc  6b20              LDR      r0,[r4,#0x30]         ;780
0004de  1c41              ADDS     r1,r0,#1              ;780
0004e0  6321              STR      r1,[r4,#0x30]         ;780
0004e2  6821              LDR      r1,[r4,#0]            ;780
0004e4  7800              LDRB     r0,[r0,#0]            ;780
0004e6  60c8              STR      r0,[r1,#0xc]          ;780
0004e8  8ee0              LDRH     r0,[r4,#0x36]         ;781
0004ea  1e40              SUBS     r0,r0,#1              ;781
0004ec  86e0              STRH     r0,[r4,#0x36]         ;781
                  |L1.1262|
0004ee  8ee0              LDRH     r0,[r4,#0x36]         ;783
0004f0  b9c8              CBNZ     r0,|L1.1318|
0004f2  6aa0              LDR      r0,[r4,#0x28]         ;786
0004f4  f5b05f00          CMP      r0,#0x2000            ;786
0004f8  d104              BNE      |L1.1284|
0004fa  6820              LDR      r0,[r4,#0]            ;788
0004fc  6801              LDR      r1,[r0,#0]            ;788
0004fe  f4415180          ORR      r1,r1,#0x1000         ;788
000502  6001              STR      r1,[r0,#0]            ;788
                  |L1.1284|
000504  463b              MOV      r3,r7                 ;792
000506  2200              MOVS     r2,#0                 ;792
000508  2101              MOVS     r1,#1                 ;792
00050a  4620              MOV      r0,r4                 ;792
00050c  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
000510  b108              CBZ      r0,|L1.1302|
000512  2003              MOVS     r0,#3                 ;794
000514  bdf8              POP      {r3-r7,pc}
                  |L1.1302|
000516  6820              LDR      r0,[r4,#0]            ;797
000518  68c0              LDR      r0,[r0,#0xc]          ;797
00051a  6ba1              LDR      r1,[r4,#0x38]         ;797
00051c  7008              STRB     r0,[r1,#0]            ;797
00051e  8fe0              LDRH     r0,[r4,#0x3e]         ;798
000520  1e40              SUBS     r0,r0,#1              ;798
000522  87e0              STRH     r0,[r4,#0x3e]         ;798
000524  e046              B        |L1.1460|
                  |L1.1318|
000526  463b              MOV      r3,r7                 ;805
000528  2200              MOVS     r2,#0                 ;805
00052a  2102              MOVS     r1,#2                 ;805
00052c  4620              MOV      r0,r4                 ;805
00052e  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
000532  b108              CBZ      r0,|L1.1336|
000534  2003              MOVS     r0,#3                 ;807
000536  bdf8              POP      {r3-r7,pc}
                  |L1.1336|
000538  6b20              LDR      r0,[r4,#0x30]         ;810
00053a  1c41              ADDS     r1,r0,#1              ;810
00053c  6321              STR      r1,[r4,#0x30]         ;810
00053e  6821              LDR      r1,[r4,#0]            ;810
000540  7800              LDRB     r0,[r0,#0]            ;810
000542  60c8              STR      r0,[r1,#0xc]          ;810
000544  8ee0              LDRH     r0,[r4,#0x36]         ;811
000546  1e40              SUBS     r0,r0,#1              ;811
000548  b280              UXTH     r0,r0                 ;811
00054a  86e0              STRH     r0,[r4,#0x36]         ;811
00054c  b940              CBNZ     r0,|L1.1376|
00054e  6aa0              LDR      r0,[r4,#0x28]         ;814
000550  f5b05f00          CMP      r0,#0x2000            ;814
000554  d104              BNE      |L1.1376|
000556  6820              LDR      r0,[r4,#0]            ;816
000558  6801              LDR      r1,[r0,#0]            ;816
00055a  f4415180          ORR      r1,r1,#0x1000         ;816
00055e  6001              STR      r1,[r0,#0]            ;816
                  |L1.1376|
000560  463b              MOV      r3,r7                 ;820
000562  2200              MOVS     r2,#0                 ;820
000564  2101              MOVS     r1,#1                 ;820
000566  4620              MOV      r0,r4                 ;820
000568  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
00056c  b108              CBZ      r0,|L1.1394|
00056e  2003              MOVS     r0,#3                 ;822
000570  bdf8              POP      {r3-r7,pc}
                  |L1.1394|
000572  6820              LDR      r0,[r4,#0]            ;825
000574  68c1              LDR      r1,[r0,#0xc]          ;825
000576  6ba0              LDR      r0,[r4,#0x38]         ;825
000578  1c42              ADDS     r2,r0,#1              ;825
00057a  63a2              STR      r2,[r4,#0x38]         ;825
00057c  7001              STRB     r1,[r0,#0]            ;825
00057e  8fe0              LDRH     r0,[r4,#0x3e]         ;826
000580  1e40              SUBS     r0,r0,#1              ;826
000582  87e0              STRH     r0,[r4,#0x3e]         ;826
000584  8ee0              LDRH     r0,[r4,#0x36]         ;802
000586  2800              CMP      r0,#0                 ;802
000588  d1cd              BNE      |L1.1318|
00058a  6860              LDR      r0,[r4,#4]            ;828
00058c  b940              CBNZ     r0,|L1.1440|
00058e  463b              MOV      r3,r7                 ;831
000590  2200              MOVS     r2,#0                 ;831
000592  2101              MOVS     r1,#1                 ;831
000594  4620              MOV      r0,r4                 ;831
000596  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
00059a  b110              CBZ      r0,|L1.1442|
00059c  2003              MOVS     r0,#3                 ;833
00059e  bdf8              POP      {r3-r7,pc}
                  |L1.1440|
0005a0  e008              B        |L1.1460|
                  |L1.1442|
0005a2  6820              LDR      r0,[r4,#0]            ;836
0005a4  68c1              LDR      r1,[r0,#0xc]          ;836
0005a6  6ba0              LDR      r0,[r4,#0x38]         ;836
0005a8  1c42              ADDS     r2,r0,#1              ;836
0005aa  63a2              STR      r2,[r4,#0x38]         ;836
0005ac  7001              STRB     r1,[r0,#0]            ;836
0005ae  8fe0              LDRH     r0,[r4,#0x3e]         ;837
0005b0  1e40              SUBS     r0,r0,#1              ;837
0005b2  87e0              STRH     r0,[r4,#0x3e]         ;837
                  |L1.1460|
0005b4  6aa0              LDR      r0,[r4,#0x28]         ;843
0005b6  f5b05f00          CMP      r0,#0x2000            ;843
0005ba  d10f              BNE      |L1.1500|
0005bc  463b              MOV      r3,r7                 ;846
0005be  2200              MOVS     r2,#0                 ;846
0005c0  2101              MOVS     r1,#1                 ;846
0005c2  4620              MOV      r0,r4                 ;846
0005c4  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
0005c8  b128              CBZ      r0,|L1.1494|
0005ca  6d60              LDR      r0,[r4,#0x54]         ;848
0005cc  f0400002          ORR      r0,r0,#2              ;848
0005d0  6560              STR      r0,[r4,#0x54]         ;848
0005d2  2003              MOVS     r0,#3                 ;849
0005d4  bdf8              POP      {r3-r7,pc}
                  |L1.1494|
0005d6  6820              LDR      r0,[r4,#0]            ;852
0005d8  68c0              LDR      r0,[r0,#0xc]          ;852
0005da  9000              STR      r0,[sp,#0]            ;852
                  |L1.1500|
0005dc  463b              MOV      r3,r7                 ;857
0005de  2201              MOVS     r2,#1                 ;857
0005e0  2180              MOVS     r1,#0x80              ;857
0005e2  4620              MOV      r0,r4                 ;857
0005e4  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
0005e8  b128              CBZ      r0,|L1.1526|
0005ea  6d60              LDR      r0,[r4,#0x54]         ;859
0005ec  f0400010          ORR      r0,r0,#0x10           ;859
0005f0  6560              STR      r0,[r4,#0x54]         ;859
0005f2  2003              MOVS     r0,#3                 ;860
0005f4  bdf8              POP      {r3-r7,pc}
                  |L1.1526|
0005f6  f8846051          STRB     r6,[r4,#0x51]         ;863
0005fa  6820              LDR      r0,[r4,#0]            ;865
0005fc  6881              LDR      r1,[r0,#8]            ;865
0005fe  f3c11100          UBFX     r1,r1,#4,#1           ;865
000602  6aa2              LDR      r2,[r4,#0x28]         ;867
000604  f5b25f00          CMP      r2,#0x2000            ;867
000608  d111              BNE      |L1.1582|
00060a  b181              CBZ      r1,|L1.1582|
00060c  6d61              LDR      r1,[r4,#0x54]         ;869
00060e  f0410102          ORR      r1,r1,#2              ;869
000612  6561              STR      r1,[r4,#0x54]         ;869
000614  6801              LDR      r1,[r0,#0]            ;874
000616  f4215100          BIC      r1,r1,#0x2000         ;874
00061a  6001              STR      r1,[r0,#0]            ;874
00061c  6820              LDR      r0,[r4,#0]            ;874
00061e  6801              LDR      r1,[r0,#0]            ;874
000620  f4415100          ORR      r1,r1,#0x2000         ;874
000624  6001              STR      r1,[r0,#0]            ;874
000626  f8845050          STRB     r5,[r4,#0x50]         ;878
00062a  2001              MOVS     r0,#1                 ;880
00062c  bdf8              POP      {r3-r7,pc}
                  |L1.1582|
00062e  f8845050          STRB     r5,[r4,#0x50]         ;884
000632  2000              MOVS     r0,#0                 ;886
000634  bdf8              POP      {r3-r7,pc}
;;;893    
                          ENDP

                  HAL_SPI_Receive PROC
;;;473      */
;;;474    HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
000636  b5f0              PUSH     {r4-r7,lr}
;;;475    {
000638  b083              SUB      sp,sp,#0xc
00063a  4604              MOV      r4,r0
00063c  461f              MOV      r7,r3
;;;476      __IO uint16_t tmpreg;
;;;477      uint32_t tmp = 0;
;;;478    
;;;479      if(hspi->State == HAL_SPI_STATE_READY)
00063e  f8940051          LDRB     r0,[r4,#0x51]
000642  2801              CMP      r0,#1
000644  d002              BEQ      |L1.1612|
;;;480      {
;;;481        if((pData == NULL ) || (Size == 0)) 
;;;482        {
;;;483          return  HAL_ERROR;
;;;484        }
;;;485    
;;;486        /* Process Locked */
;;;487        __HAL_LOCK(hspi);
;;;488    
;;;489        /* Configure communication */
;;;490        hspi->State       = HAL_SPI_STATE_BUSY_RX;
;;;491        hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;492    
;;;493        hspi->pRxBuffPtr  = pData;
;;;494        hspi->RxXferSize  = Size;
;;;495        hspi->RxXferCount = Size;
;;;496    
;;;497        /*Init field not used in handle to zero */
;;;498        hspi->RxISR = 0;
;;;499        hspi->TxISR = 0;
;;;500        hspi->TxXferSize   = 0;
;;;501        hspi->TxXferCount  = 0;
;;;502    
;;;503        /* Configure communication direction : 1Line */
;;;504        if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
;;;505        {
;;;506          SPI_1LINE_RX(hspi);
;;;507        }
;;;508    
;;;509        /* Reset CRC Calculation */
;;;510        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;511        {
;;;512          SPI_RESET_CRC(hspi);
;;;513        }
;;;514        
;;;515        if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
;;;516        {
;;;517          /* Process Unlocked */
;;;518          __HAL_UNLOCK(hspi);
;;;519    
;;;520          /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
;;;521          return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
;;;522        }
;;;523    
;;;524        /* Check if the SPI is already enabled */ 
;;;525        if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;526        {
;;;527          /* Enable SPI peripheral */
;;;528          __HAL_SPI_ENABLE(hspi);
;;;529        }
;;;530    
;;;531        /* Receive data in 8 Bit mode */
;;;532        if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
;;;533        {
;;;534          while(hspi->RxXferCount > 1)
;;;535          {
;;;536            /* Wait until RXNE flag is set */
;;;537            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;538            { 
;;;539              return HAL_TIMEOUT;
;;;540            }
;;;541    
;;;542            (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;543            hspi->RxXferCount--;
;;;544          }
;;;545          /* Enable CRC Transmission */
;;;546          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
;;;547          {
;;;548            hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
;;;549          }
;;;550        }
;;;551        /* Receive data in 16 Bit mode */
;;;552        else
;;;553        {
;;;554          while(hspi->RxXferCount > 1)
;;;555          {
;;;556            /* Wait until RXNE flag is set to read data */
;;;557            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;558            { 
;;;559              return HAL_TIMEOUT;
;;;560            }
;;;561    
;;;562            *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;563            hspi->pRxBuffPtr+=2;
;;;564            hspi->RxXferCount--;
;;;565          }
;;;566          /* Enable CRC Transmission */
;;;567          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
;;;568          {
;;;569            hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
;;;570          }
;;;571        }
;;;572    
;;;573        /* Wait until RXNE flag is set */
;;;574        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;575        { 
;;;576          return HAL_TIMEOUT;
;;;577        }
;;;578    
;;;579        /* Receive last data in 8 Bit mode */
;;;580        if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
;;;581        {
;;;582          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;583        }
;;;584        /* Receive last data in 16 Bit mode */
;;;585        else
;;;586        {
;;;587          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;588          hspi->pRxBuffPtr+=2;
;;;589        }
;;;590        hspi->RxXferCount--;
;;;591    
;;;592        /* Wait until RXNE flag is set: CRC Received */
;;;593        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;594        {
;;;595          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;596          {
;;;597            hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
;;;598            return HAL_TIMEOUT;
;;;599          }
;;;600    
;;;601          /* Read CRC to Flush RXNE flag */
;;;602          tmpreg = hspi->Instance->DR;
;;;603          UNUSED(tmpreg);
;;;604        }
;;;605        
;;;606        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
;;;607        {
;;;608          /* Disable SPI peripheral */
;;;609          __HAL_SPI_DISABLE(hspi);
;;;610        }
;;;611    
;;;612        hspi->State = HAL_SPI_STATE_READY;
;;;613    
;;;614        tmp = __HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR);
;;;615        /* Check if CRC error occurred */
;;;616        if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (tmp != RESET))
;;;617        {  
;;;618          hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
;;;619    
;;;620          /* Reset CRC Calculation */
;;;621          SPI_RESET_CRC(hspi);
;;;622    
;;;623          /* Process Unlocked */
;;;624          __HAL_UNLOCK(hspi);
;;;625    
;;;626          return HAL_ERROR; 
;;;627        }
;;;628    
;;;629        /* Process Unlocked */
;;;630        __HAL_UNLOCK(hspi);
;;;631    
;;;632        return HAL_OK;
;;;633      }
;;;634      else
;;;635      {
;;;636        return HAL_BUSY;
;;;637      }
;;;638    }
000646  b003              ADD      sp,sp,#0xc
000648  2002              MOVS     r0,#2                 ;636
00064a  bdf0              POP      {r4-r7,pc}
                  |L1.1612|
00064c  b1c1              CBZ      r1,|L1.1664|
00064e  b1ba              CBZ      r2,|L1.1664|
000650  f8940050          LDRB     r0,[r4,#0x50]         ;487
000654  2801              CMP      r0,#1                 ;487
000656  d016              BEQ      |L1.1670|
000658  2601              MOVS     r6,#1                 ;487
00065a  f8846050          STRB     r6,[r4,#0x50]         ;487
00065e  2022              MOVS     r0,#0x22              ;490
000660  f8840051          STRB     r0,[r4,#0x51]         ;490
000664  2500              MOVS     r5,#0                 ;491
000666  6565              STR      r5,[r4,#0x54]         ;491
000668  63a1              STR      r1,[r4,#0x38]         ;493
00066a  87a2              STRH     r2,[r4,#0x3c]         ;494
00066c  87e2              STRH     r2,[r4,#0x3e]         ;495
00066e  64a5              STR      r5,[r4,#0x48]         ;498
000670  64e5              STR      r5,[r4,#0x4c]         ;499
000672  86a5              STRH     r5,[r4,#0x34]         ;500
000674  86e5              STRH     r5,[r4,#0x36]         ;501
000676  68a0              LDR      r0,[r4,#8]            ;504
000678  f5b04f00          CMP      r0,#0x8000            ;504
00067c  d006              BEQ      |L1.1676|
00067e  e00a              B        |L1.1686|
                  |L1.1664|
000680  b003              ADD      sp,sp,#0xc
000682  2001              MOVS     r0,#1                 ;483
000684  bdf0              POP      {r4-r7,pc}
                  |L1.1670|
000686  b003              ADD      sp,sp,#0xc
000688  2002              MOVS     r0,#2                 ;487
00068a  bdf0              POP      {r4-r7,pc}
                  |L1.1676|
00068c  6820              LDR      r0,[r4,#0]            ;506
00068e  6803              LDR      r3,[r0,#0]            ;506
000690  f4234380          BIC      r3,r3,#0x4000         ;506
000694  6003              STR      r3,[r0,#0]            ;506
                  |L1.1686|
000696  6aa0              LDR      r0,[r4,#0x28]         ;510
000698  f5b05f00          CMP      r0,#0x2000            ;510
00069c  d109              BNE      |L1.1714|
00069e  6820              LDR      r0,[r4,#0]            ;512
0006a0  6803              LDR      r3,[r0,#0]            ;512
0006a2  f4235300          BIC      r3,r3,#0x2000         ;512
0006a6  6003              STR      r3,[r0,#0]            ;512
0006a8  6820              LDR      r0,[r4,#0]            ;512
0006aa  6803              LDR      r3,[r0,#0]            ;512
0006ac  f4435300          ORR      r3,r3,#0x2000         ;512
0006b0  6003              STR      r3,[r0,#0]            ;512
                  |L1.1714|
0006b2  6860              LDR      r0,[r4,#4]            ;515
0006b4  f5b07f82          CMP      r0,#0x104             ;515
0006b8  d101              BNE      |L1.1726|
0006ba  68a0              LDR      r0,[r4,#8]            ;515
0006bc  b128              CBZ      r0,|L1.1738|
                  |L1.1726|
0006be  6820              LDR      r0,[r4,#0]            ;525
0006c0  6801              LDR      r1,[r0,#0]            ;525
0006c2  f0110f40          TST      r1,#0x40              ;525
0006c6  d00a              BEQ      |L1.1758|
0006c8  e00d              B        |L1.1766|
                  |L1.1738|
0006ca  f8845050          STRB     r5,[r4,#0x50]         ;518
0006ce  4613              MOV      r3,r2                 ;521
0006d0  460a              MOV      r2,r1                 ;521
0006d2  4620              MOV      r0,r4                 ;521
0006d4  9700              STR      r7,[sp,#0]            ;521
0006d6  f7fffffe          BL       HAL_SPI_TransmitReceive
0006da  b003              ADD      sp,sp,#0xc
0006dc  bdf0              POP      {r4-r7,pc}
                  |L1.1758|
0006de  6801              LDR      r1,[r0,#0]            ;528
0006e0  f0410140          ORR      r1,r1,#0x40           ;528
0006e4  6001              STR      r1,[r0,#0]            ;528
                  |L1.1766|
0006e6  68e0              LDR      r0,[r4,#0xc]          ;532
0006e8  b160              CBZ      r0,|L1.1796|
0006ea  8fe0              LDRH     r0,[r4,#0x3e]         ;554
0006ec  2801              CMP      r0,#1                 ;554
0006ee  d939              BLS      |L1.1892|
                  |L1.1776|
0006f0  463b              MOV      r3,r7                 ;557
0006f2  2200              MOVS     r2,#0                 ;557
0006f4  2101              MOVS     r1,#1                 ;557
0006f6  4620              MOV      r0,r4                 ;557
0006f8  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
0006fc  b328              CBZ      r0,|L1.1866|
0006fe  b003              ADD      sp,sp,#0xc
000700  2003              MOVS     r0,#3                 ;559
000702  bdf0              POP      {r4-r7,pc}
                  |L1.1796|
000704  8fe0              LDRH     r0,[r4,#0x3e]         ;534
000706  2801              CMP      r0,#1                 ;534
000708  d915              BLS      |L1.1846|
                  |L1.1802|
00070a  463b              MOV      r3,r7                 ;537
00070c  2200              MOVS     r2,#0                 ;537
00070e  2101              MOVS     r1,#1                 ;537
000710  4620              MOV      r0,r4                 ;537
000712  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
000716  b110              CBZ      r0,|L1.1822|
000718  b003              ADD      sp,sp,#0xc
00071a  2003              MOVS     r0,#3                 ;539
00071c  bdf0              POP      {r4-r7,pc}
                  |L1.1822|
00071e  6820              LDR      r0,[r4,#0]            ;542
000720  68c1              LDR      r1,[r0,#0xc]          ;542
000722  6ba0              LDR      r0,[r4,#0x38]         ;542
000724  1c42              ADDS     r2,r0,#1              ;542
000726  63a2              STR      r2,[r4,#0x38]         ;542
000728  7001              STRB     r1,[r0,#0]            ;542
00072a  8fe0              LDRH     r0,[r4,#0x3e]         ;543
00072c  1e40              SUBS     r0,r0,#1              ;543
00072e  b280              UXTH     r0,r0                 ;543
000730  87e0              STRH     r0,[r4,#0x3e]         ;543
000732  2801              CMP      r0,#1                 ;534
000734  d8e9              BHI      |L1.1802|
                  |L1.1846|
000736  6aa0              LDR      r0,[r4,#0x28]         ;546
000738  f5b05f00          CMP      r0,#0x2000            ;546
00073c  d11b              BNE      |L1.1910|
00073e  6820              LDR      r0,[r4,#0]            ;548
000740  6801              LDR      r1,[r0,#0]            ;548
000742  f4415180          ORR      r1,r1,#0x1000         ;548
000746  6001              STR      r1,[r0,#0]            ;548
000748  e015              B        |L1.1910|
                  |L1.1866|
00074a  6820              LDR      r0,[r4,#0]            ;562
00074c  68c0              LDR      r0,[r0,#0xc]          ;562
00074e  6ba1              LDR      r1,[r4,#0x38]         ;562
000750  8008              STRH     r0,[r1,#0]            ;562
000752  6ba0              LDR      r0,[r4,#0x38]         ;563
000754  1c80              ADDS     r0,r0,#2              ;563
000756  63a0              STR      r0,[r4,#0x38]         ;563
000758  8fe0              LDRH     r0,[r4,#0x3e]         ;564
00075a  1e40              SUBS     r0,r0,#1              ;564
00075c  b280              UXTH     r0,r0                 ;564
00075e  87e0              STRH     r0,[r4,#0x3e]         ;564
000760  2801              CMP      r0,#1                 ;554
000762  d8c5              BHI      |L1.1776|
                  |L1.1892|
000764  6aa0              LDR      r0,[r4,#0x28]         ;567
000766  f5b05f00          CMP      r0,#0x2000            ;567
00076a  d104              BNE      |L1.1910|
00076c  6820              LDR      r0,[r4,#0]            ;569
00076e  6801              LDR      r1,[r0,#0]            ;569
000770  f4415180          ORR      r1,r1,#0x1000         ;569
000774  6001              STR      r1,[r0,#0]            ;569
                  |L1.1910|
000776  463b              MOV      r3,r7                 ;574
000778  2200              MOVS     r2,#0                 ;574
00077a  2101              MOVS     r1,#1                 ;574
00077c  4620              MOV      r0,r4                 ;574
00077e  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
000782  b110              CBZ      r0,|L1.1930|
000784  b003              ADD      sp,sp,#0xc
000786  2003              MOVS     r0,#3                 ;576
000788  bdf0              POP      {r4-r7,pc}
                  |L1.1930|
00078a  68e0              LDR      r0,[r4,#0xc]          ;580
00078c  b170              CBZ      r0,|L1.1964|
00078e  6820              LDR      r0,[r4,#0]            ;587
000790  68c0              LDR      r0,[r0,#0xc]          ;587
000792  6ba1              LDR      r1,[r4,#0x38]         ;587
000794  8008              STRH     r0,[r1,#0]            ;587
000796  6ba0              LDR      r0,[r4,#0x38]         ;588
000798  1c80              ADDS     r0,r0,#2              ;588
00079a  63a0              STR      r0,[r4,#0x38]         ;588
                  |L1.1948|
00079c  8fe0              LDRH     r0,[r4,#0x3e]         ;590
00079e  1e40              SUBS     r0,r0,#1              ;590
0007a0  87e0              STRH     r0,[r4,#0x3e]         ;590
0007a2  6aa0              LDR      r0,[r4,#0x28]         ;593
0007a4  f5b05f00          CMP      r0,#0x2000            ;593
0007a8  d007              BEQ      |L1.1978|
0007aa  e017              B        |L1.2012|
                  |L1.1964|
0007ac  6820              LDR      r0,[r4,#0]            ;582
0007ae  68c1              LDR      r1,[r0,#0xc]          ;582
0007b0  6ba0              LDR      r0,[r4,#0x38]         ;582
0007b2  1c42              ADDS     r2,r0,#1              ;582
0007b4  63a2              STR      r2,[r4,#0x38]         ;582
0007b6  7001              STRB     r1,[r0,#0]            ;582
0007b8  e7f0              B        |L1.1948|
                  |L1.1978|
0007ba  463b              MOV      r3,r7                 ;595
0007bc  2200              MOVS     r2,#0                 ;595
0007be  2101              MOVS     r1,#1                 ;595
0007c0  4620              MOV      r0,r4                 ;595
0007c2  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
0007c6  b130              CBZ      r0,|L1.2006|
0007c8  6d60              LDR      r0,[r4,#0x54]         ;597
0007ca  f0400002          ORR      r0,r0,#2              ;597
0007ce  6560              STR      r0,[r4,#0x54]         ;597
0007d0  b003              ADD      sp,sp,#0xc
0007d2  2003              MOVS     r0,#3                 ;598
0007d4  bdf0              POP      {r4-r7,pc}
                  |L1.2006|
0007d6  6820              LDR      r0,[r4,#0]            ;602
0007d8  68c0              LDR      r0,[r0,#0xc]          ;602
0007da  9002              STR      r0,[sp,#8]            ;602
                  |L1.2012|
0007dc  6860              LDR      r0,[r4,#4]            ;606
0007de  f5b07f82          CMP      r0,#0x104             ;606
0007e2  d10b              BNE      |L1.2044|
0007e4  68a0              LDR      r0,[r4,#8]            ;606
0007e6  f5b04f00          CMP      r0,#0x8000            ;606
0007ea  d002              BEQ      |L1.2034|
0007ec  f5b06f80          CMP      r0,#0x400             ;606
0007f0  d104              BNE      |L1.2044|
                  |L1.2034|
0007f2  6820              LDR      r0,[r4,#0]            ;609
0007f4  6801              LDR      r1,[r0,#0]            ;609
0007f6  f0210140          BIC      r1,r1,#0x40           ;609
0007fa  6001              STR      r1,[r0,#0]            ;609
                  |L1.2044|
0007fc  f8846051          STRB     r6,[r4,#0x51]         ;612
000800  6820              LDR      r0,[r4,#0]            ;614
000802  6881              LDR      r1,[r0,#8]            ;614
000804  f3c11100          UBFX     r1,r1,#4,#1           ;614
000808  6aa2              LDR      r2,[r4,#0x28]         ;616
00080a  f5b25f00          CMP      r2,#0x2000            ;616
00080e  d112              BNE      |L1.2102|
000810  b189              CBZ      r1,|L1.2102|
000812  6d61              LDR      r1,[r4,#0x54]         ;618
000814  f0410102          ORR      r1,r1,#2              ;618
000818  6561              STR      r1,[r4,#0x54]         ;618
00081a  6801              LDR      r1,[r0,#0]            ;621
00081c  f4215100          BIC      r1,r1,#0x2000         ;621
000820  6001              STR      r1,[r0,#0]            ;621
000822  6820              LDR      r0,[r4,#0]            ;621
000824  6801              LDR      r1,[r0,#0]            ;621
000826  f4415100          ORR      r1,r1,#0x2000         ;621
00082a  6001              STR      r1,[r0,#0]            ;621
00082c  f8845050          STRB     r5,[r4,#0x50]         ;624
000830  b003              ADD      sp,sp,#0xc
000832  2001              MOVS     r0,#1                 ;626
000834  bdf0              POP      {r4-r7,pc}
                  |L1.2102|
000836  f8845050          STRB     r5,[r4,#0x50]         ;630
00083a  b003              ADD      sp,sp,#0xc
00083c  2000              MOVS     r0,#0                 ;632
00083e  bdf0              POP      {r4-r7,pc}
;;;639    
                          ENDP

                  HAL_SPI_ErrorCallback PROC
;;;1639     */
;;;1640    __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
000840  4770              BX       lr
;;;1641   {
;;;1642     /* NOTE : - This function Should not be modified, when the callback is needed,
;;;1643               the HAL_SPI_ErrorCallback() could be implemented in the user file.
;;;1644               - The ErrorCode parameter in the hspi handle is updated by the SPI processes
;;;1645               and user can use HAL_SPI_GetError() API to check the latest error occurred.
;;;1646      */
;;;1647   }
;;;1648   
                          ENDP

                  HAL_SPI_TxCpltCallback PROC
;;;1561     */
;;;1562   __weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
000842  4770              BX       lr
;;;1563   {
;;;1564     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1565               the HAL_SPI_TxCpltCallback could be implemented in the user file
;;;1566      */
;;;1567   }
;;;1568   
                          ENDP

                  HAL_SPI_TxRxCpltCallback PROC
;;;1587     */
;;;1588   __weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
000844  4770              BX       lr
;;;1589   {
;;;1590     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1591               the HAL_SPI_TxRxCpltCallback() could be implemented in the user file
;;;1592      */
;;;1593   }
;;;1594   
                          ENDP

                  _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd21SPI_TxCloseIRQHandlerEP19__SPI_HandleTypeDef PROC ; [local to stm32f4xx_hal_spi_c]::SPI_TxCloseIRQHandler(__SPI_HandleTypeDef*)
;;;1699     */
;;;1700   static void SPI_TxCloseIRQHandler(SPI_HandleTypeDef *hspi)
000846  b538              PUSH     {r3-r5,lr}
;;;1701   {
000848  4604              MOV      r4,r0
;;;1702     /* Wait until TXE flag is set to send data */
;;;1703     if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
00084a  230a              MOVS     r3,#0xa
00084c  2200              MOVS     r2,#0
00084e  2102              MOVS     r1,#2
000850  4620              MOV      r0,r4
000852  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
000856  b118              CBZ      r0,|L1.2144|
;;;1704     {
;;;1705       hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
000858  6d60              LDR      r0,[r4,#0x54]
00085a  f0400010          ORR      r0,r0,#0x10
00085e  6560              STR      r0,[r4,#0x54]
                  |L1.2144|
;;;1706     }
;;;1707   
;;;1708     /* Disable TXE interrupt */
;;;1709     __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE ));
000860  6820              LDR      r0,[r4,#0]
000862  6841              LDR      r1,[r0,#4]
000864  f0210180          BIC      r1,r1,#0x80
000868  6041              STR      r1,[r0,#4]
;;;1710   
;;;1711     /* Disable ERR interrupt if Receive process is finished */
;;;1712     if(__HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_RXNE) == RESET)
00086a  6820              LDR      r0,[r4,#0]
00086c  6841              LDR      r1,[r0,#4]
00086e  f0110f40          TST      r1,#0x40
000872  d11c              BNE      |L1.2222|
;;;1713     {
;;;1714       __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_ERR));
000874  6841              LDR      r1,[r0,#4]
000876  f0210120          BIC      r1,r1,#0x20
00087a  6041              STR      r1,[r0,#4]
;;;1715   
;;;1716       /* Wait until Busy flag is reset before disabling SPI */
;;;1717       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, SPI_TIMEOUT_VALUE) != HAL_OK)
00087c  230a              MOVS     r3,#0xa
00087e  2201              MOVS     r2,#1
000880  2180              MOVS     r1,#0x80
000882  4620              MOV      r0,r4
000884  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
000888  b118              CBZ      r0,|L1.2194|
;;;1718       {
;;;1719         hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
00088a  6d60              LDR      r0,[r4,#0x54]
00088c  f0400010          ORR      r0,r0,#0x10
000890  6560              STR      r0,[r4,#0x54]
                  |L1.2194|
;;;1720       }
;;;1721   
;;;1722       /* Clear OVERRUN flag in 2 Lines communication mode because received is not read */
;;;1723       if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
000892  68a0              LDR      r0,[r4,#8]
000894  b918              CBNZ     r0,|L1.2206|
;;;1724       {
;;;1725         __HAL_SPI_CLEAR_OVRFLAG(hspi);
000896  6820              LDR      r0,[r4,#0]
000898  68c1              LDR      r1,[r0,#0xc]
00089a  6880              LDR      r0,[r0,#8]
00089c  9000              STR      r0,[sp,#0]
                  |L1.2206|
;;;1726       }
;;;1727       
;;;1728       /* Check if Errors has been detected during transfer */
;;;1729       if(hspi->ErrorCode ==  HAL_SPI_ERROR_NONE)
00089e  6d61              LDR      r1,[r4,#0x54]
0008a0  2001              MOVS     r0,#1                 ;1717
0008a2  b129              CBZ      r1,|L1.2224|
;;;1730       {
;;;1731         /* Check if we are in Tx or in Rx/Tx Mode */
;;;1732         if(hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
;;;1733         {
;;;1734           /* Set state to READY before run the Callback Complete */
;;;1735           hspi->State = HAL_SPI_STATE_READY;
;;;1736           HAL_SPI_TxRxCpltCallback(hspi);
;;;1737         }
;;;1738         else
;;;1739         {
;;;1740           /* Set state to READY before run the Callback Complete */
;;;1741           hspi->State = HAL_SPI_STATE_READY;
;;;1742           HAL_SPI_TxCpltCallback(hspi);
;;;1743         }
;;;1744       }
;;;1745       else
;;;1746       {
;;;1747         /* Set state to READY before run the Callback Complete */
;;;1748         hspi->State = HAL_SPI_STATE_READY;
0008a4  f8840051          STRB     r0,[r4,#0x51]
;;;1749         /* Call Error call back in case of Error */
;;;1750         HAL_SPI_ErrorCallback(hspi);
0008a8  4620              MOV      r0,r4
0008aa  f7fffffe          BL       HAL_SPI_ErrorCallback
                  |L1.2222|
;;;1751       }
;;;1752     }
;;;1753   }
0008ae  bd38              POP      {r3-r5,pc}
                  |L1.2224|
0008b0  f8941051          LDRB     r1,[r4,#0x51]         ;1732
0008b4  2932              CMP      r1,#0x32              ;1732
0008b6  d005              BEQ      |L1.2244|
0008b8  f8840051          STRB     r0,[r4,#0x51]         ;1741
0008bc  4620              MOV      r0,r4                 ;1742
0008be  f7fffffe          BL       HAL_SPI_TxCpltCallback
0008c2  bd38              POP      {r3-r5,pc}
                  |L1.2244|
0008c4  f8840051          STRB     r0,[r4,#0x51]         ;1735
0008c8  4620              MOV      r0,r4                 ;1736
0008ca  f7fffffe          BL       HAL_SPI_TxRxCpltCallback
0008ce  bd38              POP      {r3-r5,pc}
;;;1754   
                          ENDP

                  _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd9SPI_TxISREP19__SPI_HandleTypeDef PROC ; [local to stm32f4xx_hal_spi_c]::SPI_TxISR(__SPI_HandleTypeDef*)
;;;1760     */
;;;1761   static void SPI_TxISR(SPI_HandleTypeDef *hspi)
0008d0  68c3              LDR      r3,[r0,#0xc]
;;;1762   {
;;;1763     /* Transmit data in 8 Bit mode */
;;;1764     if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
0008d2  6802              LDR      r2,[r0,#0]
0008d4  6b01              LDR      r1,[r0,#0x30]
0008d6  2b00              CMP      r3,#0
0008d8  d00f              BEQ      |L1.2298|
;;;1765     {
;;;1766       hspi->Instance->DR = (*hspi->pTxBuffPtr++);
;;;1767     }
;;;1768     /* Transmit data in 16 Bit mode */
;;;1769     else
;;;1770     {
;;;1771       hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
0008da  8809              LDRH     r1,[r1,#0]
0008dc  60d1              STR      r1,[r2,#0xc]
;;;1772       hspi->pTxBuffPtr+=2;
0008de  6b01              LDR      r1,[r0,#0x30]
0008e0  1c89              ADDS     r1,r1,#2
0008e2  6301              STR      r1,[r0,#0x30]
                  |L1.2276|
;;;1773     }
;;;1774     hspi->TxXferCount--;
0008e4  8ec1              LDRH     r1,[r0,#0x36]
0008e6  1e49              SUBS     r1,r1,#1
0008e8  b289              UXTH     r1,r1
0008ea  86c1              STRH     r1,[r0,#0x36]
;;;1775   
;;;1776     if(hspi->TxXferCount == 0)
0008ec  2900              CMP      r1,#0
0008ee  d10f              BNE      |L1.2320|
;;;1777     {
;;;1778       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
0008f0  6a81              LDR      r1,[r0,#0x28]
0008f2  f5b15f00          CMP      r1,#0x2000
0008f6  d005              BEQ      |L1.2308|
0008f8  e009              B        |L1.2318|
                  |L1.2298|
0008fa  1c4b              ADDS     r3,r1,#1              ;1766
0008fc  6303              STR      r3,[r0,#0x30]         ;1766
0008fe  7809              LDRB     r1,[r1,#0]            ;1766
000900  60d1              STR      r1,[r2,#0xc]          ;1766
000902  e7ef              B        |L1.2276|
                  |L1.2308|
;;;1779       {
;;;1780         /* calculate and transfer CRC on Tx line */
;;;1781         hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
000904  6801              LDR      r1,[r0,#0]
000906  680a              LDR      r2,[r1,#0]
000908  f4425280          ORR      r2,r2,#0x1000
00090c  600a              STR      r2,[r1,#0]
                  |L1.2318|
;;;1782       }
;;;1783       SPI_TxCloseIRQHandler(hspi);
00090e  e7fe              B        _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd21SPI_TxCloseIRQHandlerEP19__SPI_HandleTypeDef ; [local to stm32f4xx_hal_spi_c]::SPI_TxCloseIRQHandler(__SPI_HandleTypeDef*)
                  |L1.2320|
;;;1784     }
;;;1785   }
000910  4770              BX       lr
;;;1786   
                          ENDP

                  HAL_SPI_Transmit_IT PROC
;;;901      */
;;;902    HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
000912  f8903051          LDRB     r3,[r0,#0x51]
;;;903    {
;;;904      if(hspi->State == HAL_SPI_STATE_READY)
000916  2b01              CMP      r3,#1
000918  d001              BEQ      |L1.2334|
;;;905      {
;;;906        if((pData == NULL) || (Size == 0))
;;;907        {
;;;908          return  HAL_ERROR;
;;;909        }
;;;910    
;;;911        /* Check the parameters */
;;;912        assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
;;;913    
;;;914        /* Process Locked */
;;;915        __HAL_LOCK(hspi);
;;;916    
;;;917        /* Configure communication */
;;;918        hspi->State        = HAL_SPI_STATE_BUSY_TX;
;;;919        hspi->ErrorCode    = HAL_SPI_ERROR_NONE;
;;;920    
;;;921        hspi->TxISR = &SPI_TxISR;
;;;922        hspi->pTxBuffPtr   = pData;
;;;923        hspi->TxXferSize   = Size;
;;;924        hspi->TxXferCount  = Size;
;;;925    
;;;926        /*Init field not used in handle to zero */
;;;927        hspi->RxISR = 0;
;;;928        hspi->RxXferSize   = 0;
;;;929        hspi->RxXferCount  = 0;
;;;930    
;;;931        /* Configure communication direction : 1Line */
;;;932        if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
;;;933        {
;;;934          SPI_1LINE_TX(hspi);
;;;935        }
;;;936    
;;;937        /* Reset CRC Calculation */
;;;938        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;939        {
;;;940          SPI_RESET_CRC(hspi);
;;;941        }
;;;942    
;;;943        if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
;;;944        {
;;;945          __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE));
;;;946        }else
;;;947        {
;;;948          /* Enable TXE and ERR interrupt */
;;;949          __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
;;;950        }
;;;951        /* Process Unlocked */
;;;952        __HAL_UNLOCK(hspi);
;;;953    
;;;954        /* Check if the SPI is already enabled */ 
;;;955        if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;956        {
;;;957          /* Enable SPI peripheral */
;;;958          __HAL_SPI_ENABLE(hspi);
;;;959        }
;;;960    
;;;961        return HAL_OK;
;;;962      }
;;;963      else
;;;964      {
;;;965        return HAL_BUSY;
00091a  2002              MOVS     r0,#2
;;;966      }
;;;967    }
00091c  4770              BX       lr
                  |L1.2334|
00091e  b1d9              CBZ      r1,|L1.2392|
000920  b1d2              CBZ      r2,|L1.2392|
000922  f8903050          LDRB     r3,[r0,#0x50]         ;915
000926  2b01              CMP      r3,#1                 ;915
000928  d018              BEQ      |L1.2396|
00092a  2301              MOVS     r3,#1                 ;915
00092c  f8803050          STRB     r3,[r0,#0x50]         ;915
000930  2312              MOVS     r3,#0x12              ;918
000932  f8803051          STRB     r3,[r0,#0x51]         ;918
000936  2300              MOVS     r3,#0                 ;919
000938  6543              STR      r3,[r0,#0x54]         ;919
00093a  f8dfc5d0          LDR      r12,|L1.3852|
00093e  f8c0c04c          STR      r12,[r0,#0x4c]        ;921
000942  6301              STR      r1,[r0,#0x30]         ;922
000944  8682              STRH     r2,[r0,#0x34]         ;923
000946  86c2              STRH     r2,[r0,#0x36]         ;924
000948  6483              STR      r3,[r0,#0x48]         ;927
00094a  8783              STRH     r3,[r0,#0x3c]         ;928
00094c  87c3              STRH     r3,[r0,#0x3e]         ;929
00094e  6881              LDR      r1,[r0,#8]            ;932
000950  f5b14f00          CMP      r1,#0x8000            ;932
000954  d004              BEQ      |L1.2400|
000956  e008              B        |L1.2410|
                  |L1.2392|
000958  2001              MOVS     r0,#1                 ;908
00095a  4770              BX       lr
                  |L1.2396|
00095c  2002              MOVS     r0,#2                 ;915
00095e  4770              BX       lr
                  |L1.2400|
000960  6801              LDR      r1,[r0,#0]            ;934
000962  680a              LDR      r2,[r1,#0]            ;934
000964  f4424280          ORR      r2,r2,#0x4000         ;934
000968  600a              STR      r2,[r1,#0]            ;934
                  |L1.2410|
00096a  6a81              LDR      r1,[r0,#0x28]         ;938
00096c  f5b15f00          CMP      r1,#0x2000            ;938
000970  d109              BNE      |L1.2438|
000972  6801              LDR      r1,[r0,#0]            ;940
000974  680a              LDR      r2,[r1,#0]            ;940
000976  f4225200          BIC      r2,r2,#0x2000         ;940
00097a  600a              STR      r2,[r1,#0]            ;940
00097c  6801              LDR      r1,[r0,#0]            ;940
00097e  680a              LDR      r2,[r1,#0]            ;940
000980  f4425200          ORR      r2,r2,#0x2000         ;940
000984  600a              STR      r2,[r1,#0]            ;940
                  |L1.2438|
000986  6881              LDR      r1,[r0,#8]            ;943
000988  b161              CBZ      r1,|L1.2468|
00098a  6801              LDR      r1,[r0,#0]            ;949
00098c  684a              LDR      r2,[r1,#4]            ;949
00098e  f04202a0          ORR      r2,r2,#0xa0           ;949
000992  604a              STR      r2,[r1,#4]            ;949
                  |L1.2452|
000994  f8803050          STRB     r3,[r0,#0x50]         ;952
000998  6800              LDR      r0,[r0,#0]            ;955
00099a  6801              LDR      r1,[r0,#0]            ;955
00099c  f0110f40          TST      r1,#0x40              ;955
0009a0  d006              BEQ      |L1.2480|
0009a2  e009              B        |L1.2488|
                  |L1.2468|
0009a4  6801              LDR      r1,[r0,#0]            ;945
0009a6  684a              LDR      r2,[r1,#4]            ;945
0009a8  f0420280          ORR      r2,r2,#0x80           ;945
0009ac  604a              STR      r2,[r1,#4]            ;945
0009ae  e7f1              B        |L1.2452|
                  |L1.2480|
0009b0  6801              LDR      r1,[r0,#0]            ;958
0009b2  f0410140          ORR      r1,r1,#0x40           ;958
0009b6  6001              STR      r1,[r0,#0]            ;958
                  |L1.2488|
0009b8  2000              MOVS     r0,#0                 ;961
0009ba  4770              BX       lr
;;;968    
                          ENDP

                  HAL_SPI_RxCpltCallback PROC
;;;1574     */
;;;1575   __weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
0009bc  4770              BX       lr
;;;1576   {
;;;1577     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1578               the HAL_SPI_RxCpltCallback() could be implemented in the user file
;;;1579      */
;;;1580   }
;;;1581   
                          ENDP

                  _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd21SPI_RxCloseIRQHandlerEP19__SPI_HandleTypeDef PROC ; [local to stm32f4xx_hal_spi_c]::SPI_RxCloseIRQHandler(__SPI_HandleTypeDef*)
;;;1792     */
;;;1793   static void SPI_RxCloseIRQHandler(SPI_HandleTypeDef *hspi)
0009be  b538              PUSH     {r3-r5,lr}
;;;1794   {
0009c0  4604              MOV      r4,r0
;;;1795     __IO uint16_t tmpreg;
;;;1796   
;;;1797     if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
0009c2  6aa0              LDR      r0,[r4,#0x28]
0009c4  f5b05f00          CMP      r0,#0x2000
0009c8  d12a              BNE      |L1.2592|
;;;1798     {
;;;1799       /* Wait until RXNE flag is set to send data */
;;;1800       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
0009ca  230a              MOVS     r3,#0xa
0009cc  2200              MOVS     r2,#0
0009ce  2101              MOVS     r1,#1
0009d0  4620              MOV      r0,r4
0009d2  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
0009d6  b118              CBZ      r0,|L1.2528|
;;;1801       {
;;;1802         hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
0009d8  6d60              LDR      r0,[r4,#0x54]
0009da  f0400010          ORR      r0,r0,#0x10
0009de  6560              STR      r0,[r4,#0x54]
                  |L1.2528|
;;;1803       }
;;;1804   
;;;1805       /* Read CRC to reset RXNE flag */
;;;1806       tmpreg = hspi->Instance->DR;
0009e0  6820              LDR      r0,[r4,#0]
0009e2  68c0              LDR      r0,[r0,#0xc]
0009e4  9000              STR      r0,[sp,#0]
;;;1807       UNUSED(tmpreg);
;;;1808   
;;;1809       /* Wait until RXNE flag is set to send data */
;;;1810       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_TIMEOUT_VALUE) != HAL_OK)
0009e6  2201              MOVS     r2,#1
0009e8  230a              MOVS     r3,#0xa
0009ea  4611              MOV      r1,r2
0009ec  4620              MOV      r0,r4
0009ee  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
0009f2  b118              CBZ      r0,|L1.2556|
;;;1811       {
;;;1812         hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
0009f4  6d60              LDR      r0,[r4,#0x54]
0009f6  f0400010          ORR      r0,r0,#0x10
0009fa  6560              STR      r0,[r4,#0x54]
                  |L1.2556|
;;;1813       }
;;;1814   
;;;1815       /* Check if CRC error occurred */
;;;1816       if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
0009fc  6820              LDR      r0,[r4,#0]
0009fe  6881              LDR      r1,[r0,#8]
000a00  f0110f10          TST      r1,#0x10
000a04  d00c              BEQ      |L1.2592|
;;;1817       {
;;;1818         hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
000a06  6d61              LDR      r1,[r4,#0x54]
000a08  f0410102          ORR      r1,r1,#2
000a0c  6561              STR      r1,[r4,#0x54]
;;;1819   
;;;1820         /* Reset CRC Calculation */
;;;1821         SPI_RESET_CRC(hspi);
000a0e  6801              LDR      r1,[r0,#0]
000a10  f4215100          BIC      r1,r1,#0x2000
000a14  6001              STR      r1,[r0,#0]
000a16  6820              LDR      r0,[r4,#0]
000a18  6801              LDR      r1,[r0,#0]
000a1a  f4415100          ORR      r1,r1,#0x2000
000a1e  6001              STR      r1,[r0,#0]
                  |L1.2592|
;;;1822       }
;;;1823     }
;;;1824   
;;;1825     /* Disable RXNE and ERR interrupt */
;;;1826     __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE));
000a20  6820              LDR      r0,[r4,#0]
000a22  6841              LDR      r1,[r0,#4]
000a24  f0210140          BIC      r1,r1,#0x40
000a28  6041              STR      r1,[r0,#4]
;;;1827   
;;;1828     /* if Transmit process is finished */
;;;1829     if(__HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_TXE) == RESET)
000a2a  6820              LDR      r0,[r4,#0]
000a2c  6841              LDR      r1,[r0,#4]
000a2e  f0110f80          TST      r1,#0x80
000a32  d11b              BNE      |L1.2668|
;;;1830     {
;;;1831       /* Disable ERR interrupt */
;;;1832       __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_ERR));
000a34  6841              LDR      r1,[r0,#4]
000a36  f0210120          BIC      r1,r1,#0x20
000a3a  6041              STR      r1,[r0,#4]
;;;1833   
;;;1834       if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
000a3c  6860              LDR      r0,[r4,#4]
000a3e  f5b07f82          CMP      r0,#0x104
000a42  d10b              BNE      |L1.2652|
000a44  68a0              LDR      r0,[r4,#8]
000a46  f5b04f00          CMP      r0,#0x8000
000a4a  d002              BEQ      |L1.2642|
000a4c  f5b06f80          CMP      r0,#0x400
000a50  d104              BNE      |L1.2652|
                  |L1.2642|
;;;1835       {
;;;1836         /* Disable SPI peripheral */
;;;1837         __HAL_SPI_DISABLE(hspi);
000a52  6820              LDR      r0,[r4,#0]
000a54  6801              LDR      r1,[r0,#0]
000a56  f0210140          BIC      r1,r1,#0x40
000a5a  6001              STR      r1,[r0,#0]
                  |L1.2652|
;;;1838       }
;;;1839       
;;;1840       /* Check if Errors has been detected during transfer */
;;;1841       if(hspi->ErrorCode ==  HAL_SPI_ERROR_NONE)
000a5c  6d61              LDR      r1,[r4,#0x54]
000a5e  2001              MOVS     r0,#1                 ;1800
000a60  b129              CBZ      r1,|L1.2670|
;;;1842       {
;;;1843         /* Check if we are in Rx or in Rx/Tx Mode */
;;;1844         if(hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
;;;1845         {
;;;1846           /* Set state to READY before run the Callback Complete */
;;;1847           hspi->State = HAL_SPI_STATE_READY;
;;;1848           HAL_SPI_TxRxCpltCallback(hspi);
;;;1849         }
;;;1850         else
;;;1851         {
;;;1852           /* Set state to READY before run the Callback Complete */
;;;1853           hspi->State = HAL_SPI_STATE_READY;
;;;1854           HAL_SPI_RxCpltCallback(hspi);
;;;1855         }
;;;1856       }
;;;1857       else
;;;1858       {
;;;1859         /* Set state to READY before run the Callback Complete */
;;;1860         hspi->State = HAL_SPI_STATE_READY;
000a62  f8840051          STRB     r0,[r4,#0x51]
;;;1861         /* Call Error call back in case of Error */
;;;1862         HAL_SPI_ErrorCallback(hspi);
000a66  4620              MOV      r0,r4
000a68  f7fffffe          BL       HAL_SPI_ErrorCallback
                  |L1.2668|
;;;1863       }
;;;1864     }
;;;1865   }
000a6c  bd38              POP      {r3-r5,pc}
                  |L1.2670|
000a6e  f8941051          LDRB     r1,[r4,#0x51]         ;1844
000a72  2932              CMP      r1,#0x32              ;1844
000a74  d005              BEQ      |L1.2690|
000a76  f8840051          STRB     r0,[r4,#0x51]         ;1853
000a7a  4620              MOV      r0,r4                 ;1854
000a7c  f7fffffe          BL       HAL_SPI_RxCpltCallback
000a80  bd38              POP      {r3-r5,pc}
                  |L1.2690|
000a82  f8840051          STRB     r0,[r4,#0x51]         ;1847
000a86  4620              MOV      r0,r4                 ;1848
000a88  f7fffffe          BL       HAL_SPI_TxRxCpltCallback
000a8c  bd38              POP      {r3-r5,pc}
;;;1866   
                          ENDP

                  _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd15SPI_2LinesRxISREP19__SPI_HandleTypeDef PROC ; [local to stm32f4xx_hal_spi_c]::SPI_2LinesRxISR(__SPI_HandleTypeDef*)
;;;1872     */
;;;1873   static void SPI_2LinesRxISR(SPI_HandleTypeDef *hspi)
000a8e  68c3              LDR      r3,[r0,#0xc]
;;;1874   {
;;;1875     /* Receive data in 8 Bit mode */
;;;1876     if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
000a90  6802              LDR      r2,[r0,#0]
000a92  6b81              LDR      r1,[r0,#0x38]
000a94  2b00              CMP      r3,#0
000a96  d00b              BEQ      |L1.2736|
;;;1877     {
;;;1878       (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;1879     }
;;;1880     /* Receive data in 16 Bit mode */
;;;1881     else
;;;1882     {
;;;1883       *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
000a98  68d2              LDR      r2,[r2,#0xc]
000a9a  800a              STRH     r2,[r1,#0]
;;;1884       hspi->pRxBuffPtr+=2;
000a9c  6b81              LDR      r1,[r0,#0x38]
000a9e  1c89              ADDS     r1,r1,#2
000aa0  6381              STR      r1,[r0,#0x38]
                  |L1.2722|
;;;1885     }
;;;1886     hspi->RxXferCount--;
000aa2  8fc1              LDRH     r1,[r0,#0x3e]
000aa4  1e49              SUBS     r1,r1,#1
000aa6  b289              UXTH     r1,r1
000aa8  87c1              STRH     r1,[r0,#0x3e]
;;;1887   
;;;1888     if(hspi->RxXferCount==0)
000aaa  2900              CMP      r1,#0
000aac  d105              BNE      |L1.2746|
;;;1889     {
;;;1890       SPI_RxCloseIRQHandler(hspi);
000aae  e7fe              B        _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd21SPI_RxCloseIRQHandlerEP19__SPI_HandleTypeDef ; [local to stm32f4xx_hal_spi_c]::SPI_RxCloseIRQHandler(__SPI_HandleTypeDef*)
                  |L1.2736|
000ab0  68d2              LDR      r2,[r2,#0xc]          ;1878
000ab2  1c4b              ADDS     r3,r1,#1              ;1878
000ab4  6383              STR      r3,[r0,#0x38]         ;1878
000ab6  700a              STRB     r2,[r1,#0]            ;1878
000ab8  e7f3              B        |L1.2722|
                  |L1.2746|
;;;1891     }
;;;1892   }
000aba  4770              BX       lr
;;;1893   
                          ENDP

                  HAL_SPI_TransmitReceive_IT PROC
;;;1056     */
;;;1057   HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
000abc  b410              PUSH     {r4}
;;;1058   {
;;;1059    uint32_t tmpstate = 0;
;;;1060   
;;;1061    tmpstate = hspi->State;
000abe  f890c051          LDRB     r12,[r0,#0x51]
;;;1062     if((tmpstate == HAL_SPI_STATE_READY) || \
000ac2  f1bc0f01          CMP      r12,#1
000ac6  d00b              BEQ      |L1.2784|
;;;1063        ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmpstate == HAL_SPI_STATE_BUSY_RX)))
000ac8  6844              LDR      r4,[r0,#4]
000aca  f5b47f82          CMP      r4,#0x104
000ace  d104              BNE      |L1.2778|
000ad0  6884              LDR      r4,[r0,#8]
000ad2  b914              CBNZ     r4,|L1.2778|
000ad4  f1bc0f22          CMP      r12,#0x22
000ad8  d002              BEQ      |L1.2784|
                  |L1.2778|
;;;1064     {
;;;1065       if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0)) 
;;;1066       {
;;;1067         return  HAL_ERROR;
;;;1068       }
;;;1069   
;;;1070       /* Check the parameters */
;;;1071       assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
;;;1072   
;;;1073       /* Process locked */
;;;1074       __HAL_LOCK(hspi);
;;;1075   
;;;1076       /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
;;;1077       if(hspi->State != HAL_SPI_STATE_BUSY_RX)
;;;1078       {
;;;1079         hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
;;;1080       }
;;;1081   
;;;1082       /* Configure communication */
;;;1083       hspi->ErrorCode    = HAL_SPI_ERROR_NONE;
;;;1084   
;;;1085       hspi->TxISR = &SPI_TxISR;
;;;1086       hspi->pTxBuffPtr   = pTxData;
;;;1087       hspi->TxXferSize   = Size;
;;;1088       hspi->TxXferCount  = Size;
;;;1089   
;;;1090       hspi->RxISR = &SPI_2LinesRxISR;
;;;1091       hspi->pRxBuffPtr   = pRxData;
;;;1092       hspi->RxXferSize   = Size;
;;;1093       hspi->RxXferCount  = Size;
;;;1094   
;;;1095       /* Reset CRC Calculation */
;;;1096       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1097       {
;;;1098         SPI_RESET_CRC(hspi);
;;;1099       }
;;;1100   
;;;1101       /* Enable TXE, RXNE and ERR interrupt */
;;;1102       __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
;;;1103   
;;;1104       /* Process Unlocked */
;;;1105       __HAL_UNLOCK(hspi);
;;;1106   
;;;1107       /* Check if the SPI is already enabled */ 
;;;1108       if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1109       {
;;;1110         /* Enable SPI peripheral */
;;;1111         __HAL_SPI_ENABLE(hspi);
;;;1112       }
;;;1113   
;;;1114       return HAL_OK;
;;;1115     }
;;;1116     else
;;;1117     {
;;;1118       return HAL_BUSY; 
;;;1119     }
;;;1120   }
000ada  bc10              POP      {r4}
000adc  2002              MOVS     r0,#2                 ;1118
000ade  4770              BX       lr
                  |L1.2784|
000ae0  b331              CBZ      r1,|L1.2864|
000ae2  b32a              CBZ      r2,|L1.2864|
000ae4  b323              CBZ      r3,|L1.2864|
000ae6  f890c050          LDRB     r12,[r0,#0x50]        ;1074
000aea  f1bc0f01          CMP      r12,#1                ;1074
000aee  d022              BEQ      |L1.2870|
000af0  f04f0c01          MOV      r12,#1                ;1074
000af4  f880c050          STRB     r12,[r0,#0x50]        ;1074
000af8  f890c051          LDRB     r12,[r0,#0x51]        ;1077
000afc  f1bc0f22          CMP      r12,#0x22             ;1077
000b00  d003              BEQ      |L1.2826|
000b02  f04f0c32          MOV      r12,#0x32             ;1079
000b06  f880c051          STRB     r12,[r0,#0x51]        ;1079
                  |L1.2826|
000b0a  f04f0c00          MOV      r12,#0                ;1083
000b0e  f8c0c054          STR      r12,[r0,#0x54]        ;1083
000b12  4cfe              LDR      r4,|L1.3852|
000b14  64c4              STR      r4,[r0,#0x4c]         ;1085
000b16  6301              STR      r1,[r0,#0x30]         ;1086
000b18  8683              STRH     r3,[r0,#0x34]         ;1087
000b1a  86c3              STRH     r3,[r0,#0x36]         ;1088
000b1c  49fc              LDR      r1,|L1.3856|
000b1e  6481              STR      r1,[r0,#0x48]         ;1090
000b20  6382              STR      r2,[r0,#0x38]         ;1091
000b22  8783              STRH     r3,[r0,#0x3c]         ;1092
000b24  87c3              STRH     r3,[r0,#0x3e]         ;1093
000b26  6a81              LDR      r1,[r0,#0x28]         ;1096
000b28  f5b15f00          CMP      r1,#0x2000            ;1096
000b2c  d006              BEQ      |L1.2876|
000b2e  e00f              B        |L1.2896|
                  |L1.2864|
000b30  bc10              POP      {r4}
000b32  2001              MOVS     r0,#1                 ;1067
000b34  4770              BX       lr
                  |L1.2870|
000b36  bc10              POP      {r4}
000b38  2002              MOVS     r0,#2                 ;1074
000b3a  4770              BX       lr
                  |L1.2876|
000b3c  6801              LDR      r1,[r0,#0]            ;1098
000b3e  680a              LDR      r2,[r1,#0]            ;1098
000b40  f4225200          BIC      r2,r2,#0x2000         ;1098
000b44  600a              STR      r2,[r1,#0]            ;1098
000b46  6801              LDR      r1,[r0,#0]            ;1098
000b48  680a              LDR      r2,[r1,#0]            ;1098
000b4a  f4425200          ORR      r2,r2,#0x2000         ;1098
000b4e  600a              STR      r2,[r1,#0]            ;1098
                  |L1.2896|
000b50  6801              LDR      r1,[r0,#0]            ;1102
000b52  684a              LDR      r2,[r1,#4]            ;1102
000b54  f04202e0          ORR      r2,r2,#0xe0           ;1102
000b58  604a              STR      r2,[r1,#4]            ;1102
000b5a  f880c050          STRB     r12,[r0,#0x50]        ;1105
000b5e  6800              LDR      r0,[r0,#0]            ;1108
000b60  6801              LDR      r1,[r0,#0]            ;1108
000b62  f0110f40          TST      r1,#0x40              ;1108
000b66  d103              BNE      |L1.2928|
000b68  6801              LDR      r1,[r0,#0]            ;1111
000b6a  f0410140          ORR      r1,r1,#0x40           ;1111
000b6e  6001              STR      r1,[r0,#0]            ;1111
                  |L1.2928|
000b70  bc10              POP      {r4}
000b72  2000              MOVS     r0,#0                 ;1114
000b74  4770              BX       lr
;;;1121   
                          ENDP

                  _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd9SPI_RxISREP19__SPI_HandleTypeDef PROC ; [local to stm32f4xx_hal_spi_c]::SPI_RxISR(__SPI_HandleTypeDef*)
;;;1899     */
;;;1900   static void SPI_RxISR(SPI_HandleTypeDef *hspi)
000b76  68c3              LDR      r3,[r0,#0xc]
;;;1901   {
;;;1902     /* Receive data in 8 Bit mode */
;;;1903     if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
000b78  6802              LDR      r2,[r0,#0]
000b7a  6b81              LDR      r1,[r0,#0x38]
000b7c  2b00              CMP      r3,#0
000b7e  d00b              BEQ      |L1.2968|
;;;1904     {
;;;1905       (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;1906     }
;;;1907     /* Receive data in 16 Bit mode */
;;;1908     else
;;;1909     {
;;;1910       *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
000b80  68d2              LDR      r2,[r2,#0xc]
000b82  800a              STRH     r2,[r1,#0]
;;;1911       hspi->pRxBuffPtr+=2;
000b84  6b81              LDR      r1,[r0,#0x38]
000b86  1c89              ADDS     r1,r1,#2
000b88  6381              STR      r1,[r0,#0x38]
                  |L1.2954|
;;;1912     }
;;;1913       hspi->RxXferCount--;
000b8a  8fc1              LDRH     r1,[r0,#0x3e]
000b8c  1e49              SUBS     r1,r1,#1
000b8e  b289              UXTH     r1,r1
000b90  87c1              STRH     r1,[r0,#0x3e]
;;;1914   
;;;1915     /* Enable CRC Transmission */
;;;1916     if((hspi->RxXferCount == 1) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
000b92  2901              CMP      r1,#1
000b94  d005              BEQ      |L1.2978|
000b96  e00d              B        |L1.2996|
                  |L1.2968|
000b98  68d2              LDR      r2,[r2,#0xc]          ;1905
000b9a  1c4b              ADDS     r3,r1,#1              ;1905
000b9c  6383              STR      r3,[r0,#0x38]         ;1905
000b9e  700a              STRB     r2,[r1,#0]            ;1905
000ba0  e7f3              B        |L1.2954|
                  |L1.2978|
000ba2  6a81              LDR      r1,[r0,#0x28]
000ba4  f5b15f00          CMP      r1,#0x2000
000ba8  d104              BNE      |L1.2996|
;;;1917     {
;;;1918       /* Set CRC Next to calculate CRC on Rx side */
;;;1919       hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;  
000baa  6801              LDR      r1,[r0,#0]
000bac  680a              LDR      r2,[r1,#0]
000bae  f4425280          ORR      r2,r2,#0x1000
000bb2  600a              STR      r2,[r1,#0]
                  |L1.2996|
;;;1920     }
;;;1921   
;;;1922     if(hspi->RxXferCount == 0)
000bb4  8fc1              LDRH     r1,[r0,#0x3e]
000bb6  2900              CMP      r1,#0
000bb8  d100              BNE      |L1.3004|
;;;1923     {
;;;1924       SPI_RxCloseIRQHandler(hspi);
000bba  e7fe              B        _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd21SPI_RxCloseIRQHandlerEP19__SPI_HandleTypeDef ; [local to stm32f4xx_hal_spi_c]::SPI_RxCloseIRQHandler(__SPI_HandleTypeDef*)
                  |L1.3004|
;;;1925     }
;;;1926   }
000bbc  4770              BX       lr
;;;1927   
                          ENDP

                  HAL_SPI_Receive_IT PROC
;;;976      */
;;;977    HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
000bbe  f8903051          LDRB     r3,[r0,#0x51]
;;;978    {
;;;979      if(hspi->State == HAL_SPI_STATE_READY)
000bc2  2b01              CMP      r3,#1
000bc4  d001              BEQ      |L1.3018|
;;;980      {
;;;981        if((pData == NULL) || (Size == 0)) 
;;;982        {
;;;983          return  HAL_ERROR;
;;;984        }
;;;985    
;;;986        /* Process Locked */
;;;987        __HAL_LOCK(hspi);
;;;988    
;;;989        /* Configure communication */
;;;990        hspi->State        = HAL_SPI_STATE_BUSY_RX;
;;;991        hspi->ErrorCode    = HAL_SPI_ERROR_NONE;
;;;992    
;;;993        hspi->RxISR = &SPI_RxISR;
;;;994        hspi->pRxBuffPtr   = pData;
;;;995        hspi->RxXferSize   = Size;
;;;996        hspi->RxXferCount  = Size ; 
;;;997    
;;;998       /*Init field not used in handle to zero */
;;;999        hspi->TxISR = 0;
;;;1000       hspi->TxXferSize   = 0;
;;;1001       hspi->TxXferCount  = 0;
;;;1002   
;;;1003       /* Configure communication direction : 1Line */
;;;1004       if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
;;;1005       {
;;;1006          SPI_1LINE_RX(hspi);
;;;1007       }
;;;1008       else if((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
;;;1009       {
;;;1010          /* Process Unlocked */
;;;1011          __HAL_UNLOCK(hspi);
;;;1012   
;;;1013          /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
;;;1014          return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
;;;1015       }
;;;1016   
;;;1017       /* Reset CRC Calculation */
;;;1018       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1019       {
;;;1020         SPI_RESET_CRC(hspi);
;;;1021       }
;;;1022   
;;;1023       /* Enable TXE and ERR interrupt */
;;;1024       __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
;;;1025   
;;;1026       /* Process Unlocked */
;;;1027       __HAL_UNLOCK(hspi);
;;;1028   
;;;1029       /* Note : The SPI must be enabled after unlocking current process 
;;;1030                 to avoid the risk of SPI interrupt handle execution before current
;;;1031                 process unlock */
;;;1032   
;;;1033           /* Check if the SPI is already enabled */ 
;;;1034       if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1035       {
;;;1036         /* Enable SPI peripheral */
;;;1037         __HAL_SPI_ENABLE(hspi);
;;;1038       }
;;;1039   
;;;1040       return HAL_OK;
;;;1041     }
;;;1042     else
;;;1043     {
;;;1044       return HAL_BUSY; 
000bc6  2002              MOVS     r0,#2
;;;1045     }
;;;1046   }
000bc8  4770              BX       lr
                  |L1.3018|
000bca  b1f9              CBZ      r1,|L1.3084|
000bcc  b1f2              CBZ      r2,|L1.3084|
000bce  f8903050          LDRB     r3,[r0,#0x50]         ;987
000bd2  2b01              CMP      r3,#1                 ;987
000bd4  d01c              BEQ      |L1.3088|
000bd6  2301              MOVS     r3,#1                 ;987
000bd8  f8803050          STRB     r3,[r0,#0x50]         ;987
000bdc  2322              MOVS     r3,#0x22              ;990
000bde  f8803051          STRB     r3,[r0,#0x51]         ;990
000be2  f04f0c00          MOV      r12,#0                ;991
000be6  f8c0c054          STR      r12,[r0,#0x54]        ;991
000bea  4bca              LDR      r3,|L1.3860|
000bec  6483              STR      r3,[r0,#0x48]         ;993
000bee  6381              STR      r1,[r0,#0x38]         ;994
000bf0  8782              STRH     r2,[r0,#0x3c]         ;995
000bf2  87c2              STRH     r2,[r0,#0x3e]         ;996
000bf4  f8c0c04c          STR      r12,[r0,#0x4c]        ;999
000bf8  f8a0c034          STRH     r12,[r0,#0x34]        ;1000
000bfc  f8a0c036          STRH     r12,[r0,#0x36]        ;1001
000c00  6883              LDR      r3,[r0,#8]            ;1004
000c02  f5b34f00          CMP      r3,#0x8000            ;1004
000c06  d005              BEQ      |L1.3092|
000c08  b153              CBZ      r3,|L1.3104|
000c0a  e00d              B        |L1.3112|
                  |L1.3084|
000c0c  2001              MOVS     r0,#1                 ;983
000c0e  4770              BX       lr
                  |L1.3088|
000c10  2002              MOVS     r0,#2                 ;987
000c12  4770              BX       lr
                  |L1.3092|
000c14  6801              LDR      r1,[r0,#0]            ;1006
000c16  680a              LDR      r2,[r1,#0]            ;1006
000c18  f4224280          BIC      r2,r2,#0x4000         ;1006
000c1c  600a              STR      r2,[r1,#0]            ;1006
000c1e  e003              B        |L1.3112|
                  |L1.3104|
000c20  6843              LDR      r3,[r0,#4]            ;1008
000c22  f5b37f82          CMP      r3,#0x104             ;1008
000c26  d004              BEQ      |L1.3122|
                  |L1.3112|
000c28  6a81              LDR      r1,[r0,#0x28]         ;1018
000c2a  f5b15f00          CMP      r1,#0x2000            ;1018
000c2e  d005              BEQ      |L1.3132|
000c30  e00e              B        |L1.3152|
                  |L1.3122|
000c32  f880c050          STRB     r12,[r0,#0x50]        ;1011
000c36  4613              MOV      r3,r2                 ;1014
000c38  460a              MOV      r2,r1                 ;1014
000c3a  e7fe              B        HAL_SPI_TransmitReceive_IT
                  |L1.3132|
000c3c  6801              LDR      r1,[r0,#0]            ;1020
000c3e  680a              LDR      r2,[r1,#0]            ;1020
000c40  f4225200          BIC      r2,r2,#0x2000         ;1020
000c44  600a              STR      r2,[r1,#0]            ;1020
000c46  6801              LDR      r1,[r0,#0]            ;1020
000c48  680a              LDR      r2,[r1,#0]            ;1020
000c4a  f4425200          ORR      r2,r2,#0x2000         ;1020
000c4e  600a              STR      r2,[r1,#0]            ;1020
                  |L1.3152|
000c50  6801              LDR      r1,[r0,#0]            ;1024
000c52  684a              LDR      r2,[r1,#4]            ;1024
000c54  f0420260          ORR      r2,r2,#0x60           ;1024
000c58  604a              STR      r2,[r1,#4]            ;1024
000c5a  f880c050          STRB     r12,[r0,#0x50]        ;1027
000c5e  6800              LDR      r0,[r0,#0]            ;1034
000c60  6801              LDR      r1,[r0,#0]            ;1034
000c62  f0110f40          TST      r1,#0x40              ;1034
000c66  d103              BNE      |L1.3184|
000c68  6801              LDR      r1,[r0,#0]            ;1037
000c6a  f0410140          ORR      r1,r1,#0x40           ;1037
000c6e  6001              STR      r1,[r0,#0]            ;1037
                  |L1.3184|
000c70  2000              MOVS     r0,#0                 ;1040
000c72  4770              BX       lr
;;;1047   
                          ENDP

                  _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd12SPI_DMAErrorEP19__DMA_HandleTypeDef PROC ; [local to stm32f4xx_hal_spi_c]::SPI_DMAError(__DMA_HandleTypeDef*)
;;;2185     */
;;;2186   static void SPI_DMAError(DMA_HandleTypeDef *hdma)
000c74  b510              PUSH     {r4,lr}
;;;2187   {
;;;2188     SPI_HandleTypeDef* hspi = (SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000c76  6b80              LDR      r0,[r0,#0x38]
;;;2189     hspi->TxXferCount = 0;
000c78  2100              MOVS     r1,#0
000c7a  86c1              STRH     r1,[r0,#0x36]
;;;2190     hspi->RxXferCount = 0;
000c7c  87c1              STRH     r1,[r0,#0x3e]
;;;2191     hspi->State= HAL_SPI_STATE_READY;
000c7e  2101              MOVS     r1,#1
000c80  f8801051          STRB     r1,[r0,#0x51]
;;;2192     hspi->ErrorCode |= HAL_SPI_ERROR_DMA;
000c84  6d41              LDR      r1,[r0,#0x54]
000c86  f0410110          ORR      r1,r1,#0x10
000c8a  6541              STR      r1,[r0,#0x54]
;;;2193     HAL_SPI_ErrorCallback(hspi);
000c8c  f7fffffe          BL       HAL_SPI_ErrorCallback
;;;2194   }
000c90  bd10              POP      {r4,pc}
;;;2195   
                          ENDP

                  _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd19SPI_DMATransmitCpltEP19__DMA_HandleTypeDef PROC ; [local to stm32f4xx_hal_spi_c]::SPI_DMATransmitCplt(__DMA_HandleTypeDef*)
;;;1933     */
;;;1934   static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
000c92  b538              PUSH     {r3-r5,lr}
;;;1935   {
;;;1936     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000c94  6b84              LDR      r4,[r0,#0x38]
;;;1937   
;;;1938     /* DMA Normal Mode */
;;;1939     if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
000c96  6800              LDR      r0,[r0,#0]
000c98  6800              LDR      r0,[r0,#0]
000c9a  f4107f80          TST      r0,#0x100
000c9e  d11f              BNE      |L1.3296|
;;;1940     {
;;;1941       /* Wait until TXE flag is set to send data */
;;;1942       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
000ca0  230a              MOVS     r3,#0xa
000ca2  2200              MOVS     r2,#0
000ca4  2102              MOVS     r1,#2
000ca6  4620              MOV      r0,r4
000ca8  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
000cac  b118              CBZ      r0,|L1.3254|
;;;1943       {
;;;1944         hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
000cae  6d60              LDR      r0,[r4,#0x54]
000cb0  f0400010          ORR      r0,r0,#0x10
000cb4  6560              STR      r0,[r4,#0x54]
                  |L1.3254|
;;;1945       }
;;;1946       /* Disable Tx DMA Request */
;;;1947       hspi->Instance->CR2 &= (uint32_t)(~SPI_CR2_TXDMAEN);
000cb6  6820              LDR      r0,[r4,#0]
000cb8  6841              LDR      r1,[r0,#4]
000cba  f0210102          BIC      r1,r1,#2
000cbe  6041              STR      r1,[r0,#4]
;;;1948   
;;;1949       /* Wait until Busy flag is reset before disabling SPI */
;;;1950       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, SPI_TIMEOUT_VALUE) != HAL_OK)
000cc0  230a              MOVS     r3,#0xa
000cc2  2201              MOVS     r2,#1
000cc4  2180              MOVS     r1,#0x80
000cc6  4620              MOV      r0,r4
000cc8  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
000ccc  b118              CBZ      r0,|L1.3286|
;;;1951       {
;;;1952         hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
000cce  6d60              LDR      r0,[r4,#0x54]
000cd0  f0400010          ORR      r0,r0,#0x10
000cd4  6560              STR      r0,[r4,#0x54]
                  |L1.3286|
;;;1953       }
;;;1954   
;;;1955       hspi->TxXferCount = 0;
000cd6  2000              MOVS     r0,#0
000cd8  86e0              STRH     r0,[r4,#0x36]
;;;1956   
;;;1957       hspi->State = HAL_SPI_STATE_READY;
000cda  2001              MOVS     r0,#1
000cdc  f8840051          STRB     r0,[r4,#0x51]
                  |L1.3296|
;;;1958     }
;;;1959   
;;;1960     /* Clear OVERRUN flag in 2 Lines communication mode because received is not read */
;;;1961     if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
000ce0  68a0              LDR      r0,[r4,#8]
000ce2  b918              CBNZ     r0,|L1.3308|
;;;1962     {
;;;1963      __HAL_SPI_CLEAR_OVRFLAG(hspi);
000ce4  6820              LDR      r0,[r4,#0]
000ce6  68c1              LDR      r1,[r0,#0xc]
000ce8  6880              LDR      r0,[r0,#8]
000cea  9000              STR      r0,[sp,#0]
                  |L1.3308|
;;;1964     }
;;;1965   
;;;1966     /* Check if Errors has been detected during transfer */
;;;1967     if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
000cec  6d60              LDR      r0,[r4,#0x54]
000cee  b118              CBZ      r0,|L1.3320|
;;;1968     {
;;;1969       HAL_SPI_ErrorCallback(hspi);
000cf0  4620              MOV      r0,r4
000cf2  f7fffffe          BL       HAL_SPI_ErrorCallback
;;;1970     }
;;;1971     else
;;;1972     {
;;;1973       HAL_SPI_TxCpltCallback(hspi);
;;;1974     }
;;;1975   }
000cf6  bd38              POP      {r3-r5,pc}
                  |L1.3320|
000cf8  4620              MOV      r0,r4                 ;1973
000cfa  f7fffffe          BL       HAL_SPI_TxCpltCallback
000cfe  bd38              POP      {r3-r5,pc}
;;;1976   
                          ENDP

                  HAL_SPI_TxHalfCpltCallback PROC
;;;1600     */
;;;1601   __weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
000d00  4770              BX       lr
;;;1602   {
;;;1603     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1604               the HAL_SPI_TxHalfCpltCallback could be implemented in the user file
;;;1605      */
;;;1606   }
;;;1607   
                          ENDP

                  _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd23SPI_DMAHalfTransmitCpltEP19__DMA_HandleTypeDef PROC ; [local to stm32f4xx_hal_spi_c]::SPI_DMAHalfTransmitCplt(__DMA_HandleTypeDef*)
;;;2146     */
;;;2147   static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
000d02  b510              PUSH     {r4,lr}
;;;2148   {
;;;2149     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000d04  6b80              LDR      r0,[r0,#0x38]
;;;2150   
;;;2151     HAL_SPI_TxHalfCpltCallback(hspi);
000d06  f7fffffe          BL       HAL_SPI_TxHalfCpltCallback
;;;2152   }
000d0a  bd10              POP      {r4,pc}
;;;2153   
                          ENDP

                  HAL_SPI_Transmit_DMA PROC
;;;1129     */
;;;1130   HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
000d0c  b570              PUSH     {r4-r6,lr}
;;;1131   {
000d0e  4604              MOV      r4,r0
;;;1132     if(hspi->State == HAL_SPI_STATE_READY)
000d10  f8940051          LDRB     r0,[r4,#0x51]
000d14  2801              CMP      r0,#1
000d16  d001              BEQ      |L1.3356|
;;;1133     {
;;;1134       if((pData == NULL) || (Size == 0))
;;;1135       {
;;;1136         return  HAL_ERROR;
;;;1137       }
;;;1138   
;;;1139       /* Check the parameters */
;;;1140       assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
;;;1141   
;;;1142       /* Process Locked */
;;;1143       __HAL_LOCK(hspi);
;;;1144   
;;;1145       /* Configure communication */
;;;1146       hspi->State       = HAL_SPI_STATE_BUSY_TX;
;;;1147       hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;1148   
;;;1149       hspi->pTxBuffPtr  = pData;
;;;1150       hspi->TxXferSize  = Size;
;;;1151       hspi->TxXferCount = Size;
;;;1152   
;;;1153       /*Init field not used in handle to zero */
;;;1154       hspi->TxISR = 0;
;;;1155       hspi->RxISR = 0;
;;;1156       hspi->RxXferSize   = 0;
;;;1157       hspi->RxXferCount  = 0;
;;;1158   
;;;1159       /* Configure communication direction : 1Line */
;;;1160       if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
;;;1161       {
;;;1162         SPI_1LINE_TX(hspi);
;;;1163       }
;;;1164   
;;;1165       /* Reset CRC Calculation */
;;;1166       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1167       {
;;;1168         SPI_RESET_CRC(hspi);
;;;1169       }
;;;1170   
;;;1171       /* Set the SPI TxDMA Half transfer complete callback */
;;;1172       hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
;;;1173       
;;;1174       /* Set the SPI TxDMA transfer complete callback */
;;;1175       hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
;;;1176   
;;;1177       /* Set the DMA error callback */
;;;1178       hspi->hdmatx->XferErrorCallback = SPI_DMAError;
;;;1179   
;;;1180       /* Enable the Tx DMA Stream */
;;;1181       HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
;;;1182   
;;;1183       /* Process Unlocked */
;;;1184       __HAL_UNLOCK(hspi);
;;;1185   
;;;1186       /* Check if the SPI is already enabled */ 
;;;1187       if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1188       {
;;;1189         /* Enable SPI peripheral */
;;;1190         __HAL_SPI_ENABLE(hspi);
;;;1191       }
;;;1192   
;;;1193       /* Enable Tx DMA Request */
;;;1194       hspi->Instance->CR2 |= SPI_CR2_TXDMAEN;
;;;1195   
;;;1196       return HAL_OK;
;;;1197     }
;;;1198     else
;;;1199     {
;;;1200       return HAL_BUSY;
000d18  2002              MOVS     r0,#2
;;;1201     }
;;;1202   }
000d1a  bd70              POP      {r4-r6,pc}
                  |L1.3356|
000d1c  b1c1              CBZ      r1,|L1.3408|
000d1e  b1ba              CBZ      r2,|L1.3408|
000d20  f8940050          LDRB     r0,[r4,#0x50]         ;1143
000d24  2801              CMP      r0,#1                 ;1143
000d26  d015              BEQ      |L1.3412|
000d28  2001              MOVS     r0,#1                 ;1143
000d2a  f8840050          STRB     r0,[r4,#0x50]         ;1143
000d2e  2012              MOVS     r0,#0x12              ;1146
000d30  f8840051          STRB     r0,[r4,#0x51]         ;1146
000d34  2500              MOVS     r5,#0                 ;1147
000d36  6565              STR      r5,[r4,#0x54]         ;1147
000d38  6321              STR      r1,[r4,#0x30]         ;1149
000d3a  86a2              STRH     r2,[r4,#0x34]         ;1150
000d3c  86e2              STRH     r2,[r4,#0x36]         ;1151
000d3e  64e5              STR      r5,[r4,#0x4c]         ;1154
000d40  64a5              STR      r5,[r4,#0x48]         ;1155
000d42  87a5              STRH     r5,[r4,#0x3c]         ;1156
000d44  87e5              STRH     r5,[r4,#0x3e]         ;1157
000d46  68a0              LDR      r0,[r4,#8]            ;1160
000d48  f5b04f00          CMP      r0,#0x8000            ;1160
000d4c  d004              BEQ      |L1.3416|
000d4e  e008              B        |L1.3426|
                  |L1.3408|
000d50  2001              MOVS     r0,#1                 ;1136
000d52  bd70              POP      {r4-r6,pc}
                  |L1.3412|
000d54  2002              MOVS     r0,#2                 ;1143
000d56  bd70              POP      {r4-r6,pc}
                  |L1.3416|
000d58  6820              LDR      r0,[r4,#0]            ;1162
000d5a  6801              LDR      r1,[r0,#0]            ;1162
000d5c  f4414180          ORR      r1,r1,#0x4000         ;1162
000d60  6001              STR      r1,[r0,#0]            ;1162
                  |L1.3426|
000d62  6aa0              LDR      r0,[r4,#0x28]         ;1166
000d64  f5b05f00          CMP      r0,#0x2000            ;1166
000d68  d109              BNE      |L1.3454|
000d6a  6820              LDR      r0,[r4,#0]            ;1168
000d6c  6801              LDR      r1,[r0,#0]            ;1168
000d6e  f4215100          BIC      r1,r1,#0x2000         ;1168
000d72  6001              STR      r1,[r0,#0]            ;1168
000d74  6820              LDR      r0,[r4,#0]            ;1168
000d76  6801              LDR      r1,[r0,#0]            ;1168
000d78  f4415100          ORR      r1,r1,#0x2000         ;1168
000d7c  6001              STR      r1,[r0,#0]            ;1168
                  |L1.3454|
000d7e  6c21              LDR      r1,[r4,#0x40]         ;1172
000d80  4865              LDR      r0,|L1.3864|
000d82  6408              STR      r0,[r1,#0x40]         ;1172
000d84  6c21              LDR      r1,[r4,#0x40]         ;1175
000d86  4865              LDR      r0,|L1.3868|
000d88  63c8              STR      r0,[r1,#0x3c]         ;1175
000d8a  6c21              LDR      r1,[r4,#0x40]         ;1178
000d8c  4864              LDR      r0,|L1.3872|
000d8e  6488              STR      r0,[r1,#0x48]         ;1178
000d90  6820              LDR      r0,[r4,#0]            ;1181
000d92  8ee3              LDRH     r3,[r4,#0x36]         ;1181
000d94  f100020c          ADD      r2,r0,#0xc            ;1181
000d98  6b21              LDR      r1,[r4,#0x30]         ;1181
000d9a  6c20              LDR      r0,[r4,#0x40]         ;1181
000d9c  f7fffffe          BL       HAL_DMA_Start_IT
000da0  f8845050          STRB     r5,[r4,#0x50]         ;1184
000da4  6820              LDR      r0,[r4,#0]            ;1187
000da6  6801              LDR      r1,[r0,#0]            ;1187
000da8  f0110f40          TST      r1,#0x40              ;1187
000dac  d103              BNE      |L1.3510|
000dae  6801              LDR      r1,[r0,#0]            ;1190
000db0  f0410140          ORR      r1,r1,#0x40           ;1190
000db4  6001              STR      r1,[r0,#0]            ;1190
                  |L1.3510|
000db6  6820              LDR      r0,[r4,#0]            ;1194
000db8  6841              LDR      r1,[r0,#4]            ;1194
000dba  f0410102          ORR      r1,r1,#2              ;1194
000dbe  6041              STR      r1,[r0,#4]            ;1194
000dc0  2000              MOVS     r0,#0                 ;1196
000dc2  bd70              POP      {r4-r6,pc}
;;;1203   
                          ENDP

                  _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd25SPI_DMAEndTransmitReceiveEP19__SPI_HandleTypeDef PROC ; [local to stm32f4xx_hal_spi_c]::SPI_DMAEndTransmitReceive(__SPI_HandleTypeDef*)
;;;2060     */
;;;2061   static void SPI_DMAEndTransmitReceive(SPI_HandleTypeDef *hspi)   
000dc4  b538              PUSH     {r3-r5,lr}
;;;2062   {
000dc6  4604              MOV      r4,r0
;;;2063     __IO uint16_t tmpreg;
;;;2064     
;;;2065     /* Reset CRC Calculation */
;;;2066     if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
000dc8  6aa0              LDR      r0,[r4,#0x28]
000dca  f5b05f00          CMP      r0,#0x2000
000dce  d11f              BNE      |L1.3600|
;;;2067     {
;;;2068       /* Check if CRC is done on going (RXNE flag set) */
;;;2069       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_TIMEOUT_VALUE) == HAL_OK)
000dd0  2201              MOVS     r2,#1
000dd2  230a              MOVS     r3,#0xa
000dd4  4611              MOV      r1,r2
000dd6  4620              MOV      r0,r4
000dd8  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
000ddc  b950              CBNZ     r0,|L1.3572|
;;;2070       {
;;;2071         /* Wait until RXNE flag is set to send data */
;;;2072         if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
000dde  230a              MOVS     r3,#0xa
000de0  2200              MOVS     r2,#0
000de2  2101              MOVS     r1,#1
000de4  4620              MOV      r0,r4
000de6  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
000dea  b118              CBZ      r0,|L1.3572|
;;;2073         {
;;;2074           hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
000dec  6d60              LDR      r0,[r4,#0x54]
000dee  f0400010          ORR      r0,r0,#0x10
000df2  6560              STR      r0,[r4,#0x54]
                  |L1.3572|
;;;2075         }
;;;2076       }
;;;2077       /* Read CRC */
;;;2078       tmpreg = hspi->Instance->DR;
000df4  6820              LDR      r0,[r4,#0]
000df6  68c1              LDR      r1,[r0,#0xc]
000df8  9100              STR      r1,[sp,#0]
;;;2079       UNUSED(tmpreg);
;;;2080       
;;;2081       /* Check if CRC error occurred */
;;;2082       if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
000dfa  6881              LDR      r1,[r0,#8]
000dfc  f0110f10          TST      r1,#0x10
000e00  d006              BEQ      |L1.3600|
;;;2083       {
;;;2084         hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
000e02  6d61              LDR      r1,[r4,#0x54]
000e04  f0410102          ORR      r1,r1,#2
000e08  6561              STR      r1,[r4,#0x54]
;;;2085         __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
000e0a  f06f0110          MVN      r1,#0x10
000e0e  6081              STR      r1,[r0,#8]
                  |L1.3600|
;;;2086       }
;;;2087     }
;;;2088     
;;;2089     /* Wait until TXE flag is set to send data */
;;;2090     if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
000e10  230a              MOVS     r3,#0xa
000e12  2200              MOVS     r2,#0
000e14  2102              MOVS     r1,#2
000e16  4620              MOV      r0,r4
000e18  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
000e1c  b118              CBZ      r0,|L1.3622|
;;;2091     {
;;;2092       hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
000e1e  6d60              LDR      r0,[r4,#0x54]
000e20  f0400010          ORR      r0,r0,#0x10
000e24  6560              STR      r0,[r4,#0x54]
                  |L1.3622|
;;;2093     }
;;;2094     /* Disable Tx DMA Request */
;;;2095     hspi->Instance->CR2 &= (uint32_t)(~SPI_CR2_TXDMAEN);
000e26  6820              LDR      r0,[r4,#0]
000e28  6841              LDR      r1,[r0,#4]
000e2a  f0210102          BIC      r1,r1,#2
000e2e  6041              STR      r1,[r0,#4]
;;;2096     
;;;2097     /* Wait until Busy flag is reset before disabling SPI */
;;;2098     if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, SPI_TIMEOUT_VALUE) != HAL_OK)
000e30  230a              MOVS     r3,#0xa
000e32  2201              MOVS     r2,#1
000e34  2180              MOVS     r1,#0x80
000e36  4620              MOV      r0,r4
000e38  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
000e3c  b118              CBZ      r0,|L1.3654|
;;;2099     {
;;;2100       hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
000e3e  6d60              LDR      r0,[r4,#0x54]
000e40  f0400010          ORR      r0,r0,#0x10
000e44  6560              STR      r0,[r4,#0x54]
                  |L1.3654|
;;;2101     }
;;;2102     
;;;2103     /* Disable Rx DMA Request */
;;;2104     hspi->Instance->CR2 &= (uint32_t)(~SPI_CR2_RXDMAEN);
000e46  6820              LDR      r0,[r4,#0]
000e48  6841              LDR      r1,[r0,#4]
000e4a  f0210101          BIC      r1,r1,#1
000e4e  6041              STR      r1,[r0,#4]
;;;2105     
;;;2106     hspi->TxXferCount = 0;
000e50  2000              MOVS     r0,#0
000e52  86e0              STRH     r0,[r4,#0x36]
;;;2107     hspi->RxXferCount = 0;
000e54  87e0              STRH     r0,[r4,#0x3e]
;;;2108   }
000e56  bd38              POP      {r3-r5,pc}
;;;2109   
                          ENDP

                  _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd18SPI_DMAReceiveCpltEP19__DMA_HandleTypeDef PROC ; [local to stm32f4xx_hal_spi_c]::SPI_DMAReceiveCplt(__DMA_HandleTypeDef*)
;;;1982     */
;;;1983   static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
000e58  b538              PUSH     {r3-r5,lr}
;;;1984   {
;;;1985     __IO uint16_t tmpreg;
;;;1986     
;;;1987     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000e5a  6b84              LDR      r4,[r0,#0x38]
;;;1988     /* DMA Normal mode */
;;;1989     if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
000e5c  6800              LDR      r0,[r0,#0]
000e5e  6800              LDR      r0,[r0,#0]
000e60  f4107f80          TST      r0,#0x100
000e64  d003              BEQ      |L1.3694|
;;;1990     {
;;;1991       if((hspi->Init.Direction == SPI_DIRECTION_2LINES)&&(hspi->Init.Mode == SPI_MODE_MASTER))
;;;1992       {
;;;1993          SPI_DMAEndTransmitReceive(hspi);  
;;;1994       }
;;;1995       /* SPI_DIRECTION_1LINE or SPI_DIRECTION_2LINES_RXONLY */
;;;1996       else
;;;1997       {
;;;1998         if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
;;;1999         {
;;;2000           /* Disable SPI peripheral */
;;;2001           __HAL_SPI_DISABLE(hspi);
;;;2002         }
;;;2003         
;;;2004         /* Disable Rx DMA Request */
;;;2005         hspi->Instance->CR2 &= (uint32_t)(~SPI_CR2_RXDMAEN);
;;;2006         
;;;2007         hspi->RxXferCount = 0;
;;;2008         
;;;2009         /* Reset CRC Calculation */
;;;2010         if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;2011         {
;;;2012           /* Wait until RXNE flag is set to send data */
;;;2013           if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
;;;2014           {
;;;2015             hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
;;;2016           }
;;;2017           
;;;2018           /* Read CRC */
;;;2019           tmpreg = hspi->Instance->DR;
;;;2020           UNUSED(tmpreg);
;;;2021           
;;;2022           /* Wait until RXNE flag is set */
;;;2023           if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_TIMEOUT_VALUE) != HAL_OK)
;;;2024           {
;;;2025             hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
;;;2026           }
;;;2027           
;;;2028           /* Check if CRC error occurred */
;;;2029           if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
;;;2030           {
;;;2031             hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
;;;2032             __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
;;;2033           }
;;;2034         }
;;;2035       }
;;;2036       
;;;2037       hspi->State = HAL_SPI_STATE_READY;
;;;2038       
;;;2039       /* Check if Errors has been detected during transfer */
;;;2040       if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
;;;2041       {
;;;2042         HAL_SPI_ErrorCallback(hspi);
;;;2043       }
;;;2044       else
;;;2045       {
;;;2046         HAL_SPI_RxCpltCallback(hspi);
;;;2047       } 
;;;2048     }
;;;2049     else
;;;2050     {
;;;2051       HAL_SPI_RxCpltCallback(hspi);
000e66  4620              MOV      r0,r4
000e68  f7fffffe          BL       HAL_SPI_RxCpltCallback
;;;2052     }
;;;2053   }
000e6c  bd38              POP      {r3-r5,pc}
                  |L1.3694|
000e6e  68a0              LDR      r0,[r4,#8]            ;1991
000e70  b918              CBNZ     r0,|L1.3706|
000e72  6861              LDR      r1,[r4,#4]            ;1991
000e74  f5b17f82          CMP      r1,#0x104             ;1991
000e78  d004              BEQ      |L1.3716|
                  |L1.3706|
000e7a  6861              LDR      r1,[r4,#4]            ;1998
000e7c  f5b17f82          CMP      r1,#0x104             ;1998
000e80  d004              BEQ      |L1.3724|
000e82  e00e              B        |L1.3746|
                  |L1.3716|
000e84  4620              MOV      r0,r4                 ;1993
000e86  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd25SPI_DMAEndTransmitReceiveEP19__SPI_HandleTypeDef ; [local to stm32f4xx_hal_spi_c]::SPI_DMAEndTransmitReceive(__SPI_HandleTypeDef*)
000e8a  e03a              B        |L1.3842|
                  |L1.3724|
000e8c  f5b04f00          CMP      r0,#0x8000            ;1998
000e90  d002              BEQ      |L1.3736|
000e92  f5b06f80          CMP      r0,#0x400             ;1998
000e96  d104              BNE      |L1.3746|
                  |L1.3736|
000e98  6820              LDR      r0,[r4,#0]            ;2001
000e9a  6801              LDR      r1,[r0,#0]            ;2001
000e9c  f0210140          BIC      r1,r1,#0x40           ;2001
000ea0  6001              STR      r1,[r0,#0]            ;2001
                  |L1.3746|
000ea2  6820              LDR      r0,[r4,#0]            ;2005
000ea4  6841              LDR      r1,[r0,#4]            ;2005
000ea6  f0210101          BIC      r1,r1,#1              ;2005
000eaa  6041              STR      r1,[r0,#4]            ;2005
000eac  2000              MOVS     r0,#0                 ;2007
000eae  87e0              STRH     r0,[r4,#0x3e]         ;2007
000eb0  6aa0              LDR      r0,[r4,#0x28]         ;2010
000eb2  f5b05f00          CMP      r0,#0x2000            ;2010
000eb6  d124              BNE      |L1.3842|
000eb8  230a              MOVS     r3,#0xa               ;2013
000eba  2200              MOVS     r2,#0                 ;2013
000ebc  2101              MOVS     r1,#1                 ;2013
000ebe  4620              MOV      r0,r4                 ;2013
000ec0  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
000ec4  b118              CBZ      r0,|L1.3790|
000ec6  6d60              LDR      r0,[r4,#0x54]         ;2015
000ec8  f0400010          ORR      r0,r0,#0x10           ;2015
000ecc  6560              STR      r0,[r4,#0x54]         ;2015
                  |L1.3790|
000ece  6820              LDR      r0,[r4,#0]            ;2019
000ed0  68c0              LDR      r0,[r0,#0xc]          ;2019
000ed2  9000              STR      r0,[sp,#0]            ;2019
000ed4  2201              MOVS     r2,#1                 ;2023
000ed6  230a              MOVS     r3,#0xa               ;2023
000ed8  4611              MOV      r1,r2                 ;2023
000eda  4620              MOV      r0,r4                 ;2023
000edc  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj ; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
000ee0  b118              CBZ      r0,|L1.3818|
000ee2  6d60              LDR      r0,[r4,#0x54]         ;2025
000ee4  f0400010          ORR      r0,r0,#0x10           ;2025
000ee8  6560              STR      r0,[r4,#0x54]         ;2025
                  |L1.3818|
000eea  6820              LDR      r0,[r4,#0]            ;2029
000eec  6881              LDR      r1,[r0,#8]            ;2029
000eee  f0110f10          TST      r1,#0x10              ;2029
000ef2  d006              BEQ      |L1.3842|
000ef4  6d61              LDR      r1,[r4,#0x54]         ;2031
000ef6  f0410102          ORR      r1,r1,#2              ;2031
000efa  6561              STR      r1,[r4,#0x54]         ;2031
000efc  f06f0110          MVN      r1,#0x10              ;2032
000f00  6081              STR      r1,[r0,#8]            ;2032
                  |L1.3842|
000f02  2001              MOVS     r0,#1                 ;2037
000f04  f8840051          STRB     r0,[r4,#0x51]         ;2037
000f08  6d60              LDR      r0,[r4,#0x54]         ;2040
000f0a  e00b              B        |L1.3876|
                  |L1.3852|
                          DCD      _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd9SPI_TxISREP19__SPI_HandleTypeDef ; [local to stm32f4xx_hal_spi_c]::SPI_TxISR(__SPI_HandleTypeDef*)
                  |L1.3856|
                          DCD      _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd15SPI_2LinesRxISREP19__SPI_HandleTypeDef ; [local to stm32f4xx_hal_spi_c]::SPI_2LinesRxISR(__SPI_HandleTypeDef*)
                  |L1.3860|
                          DCD      _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd9SPI_RxISREP19__SPI_HandleTypeDef ; [local to stm32f4xx_hal_spi_c]::SPI_RxISR(__SPI_HandleTypeDef*)
                  |L1.3864|
                          DCD      _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd23SPI_DMAHalfTransmitCpltEP19__DMA_HandleTypeDef ; [local to stm32f4xx_hal_spi_c]::SPI_DMAHalfTransmitCplt(__DMA_HandleTypeDef*)
                  |L1.3868|
                          DCD      _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd19SPI_DMATransmitCpltEP19__DMA_HandleTypeDef ; [local to stm32f4xx_hal_spi_c]::SPI_DMATransmitCplt(__DMA_HandleTypeDef*)
                  |L1.3872|
                          DCD      _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd12SPI_DMAErrorEP19__DMA_HandleTypeDef ; [local to stm32f4xx_hal_spi_c]::SPI_DMAError(__DMA_HandleTypeDef*)
                  |L1.3876|
000f24  b118              CBZ      r0,|L1.3886|
000f26  4620              MOV      r0,r4                 ;2042
000f28  f7fffffe          BL       HAL_SPI_ErrorCallback
000f2c  bd38              POP      {r3-r5,pc}
                  |L1.3886|
000f2e  4620              MOV      r0,r4                 ;2046
000f30  f7fffffe          BL       HAL_SPI_RxCpltCallback
000f34  bd38              POP      {r3-r5,pc}
;;;2054   
                          ENDP

                  HAL_SPI_RxHalfCpltCallback PROC
;;;1613     */
;;;1614   __weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
000f36  4770              BX       lr
;;;1615   {
;;;1616     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1617               the HAL_SPI_RxHalfCpltCallback() could be implemented in the user file
;;;1618      */
;;;1619   }
;;;1620   
                          ENDP

                  _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd22SPI_DMAHalfReceiveCpltEP19__DMA_HandleTypeDef PROC ; [local to stm32f4xx_hal_spi_c]::SPI_DMAHalfReceiveCplt(__DMA_HandleTypeDef*)
;;;2159     */
;;;2160   static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
000f38  b510              PUSH     {r4,lr}
;;;2161   {
;;;2162     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000f3a  6b80              LDR      r0,[r0,#0x38]
;;;2163   
;;;2164     HAL_SPI_RxHalfCpltCallback(hspi);
000f3c  f7fffffe          BL       HAL_SPI_RxHalfCpltCallback
;;;2165   }
000f40  bd10              POP      {r4,pc}
;;;2166   
                          ENDP

                  _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_DMATransmitReceiveCpltEP19__DMA_HandleTypeDef PROC ; [local to stm32f4xx_hal_spi_c]::SPI_DMATransmitReceiveCplt(__DMA_HandleTypeDef*)
;;;2115     */
;;;2116   static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
000f42  b510              PUSH     {r4,lr}
;;;2117   {
;;;2118     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000f44  6b84              LDR      r4,[r0,#0x38]
;;;2119     if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
000f46  6800              LDR      r0,[r0,#0]
000f48  6800              LDR      r0,[r0,#0]
000f4a  f4107f80          TST      r0,#0x100
000f4e  d003              BEQ      |L1.3928|
;;;2120     { /**/
;;;2121       SPI_DMAEndTransmitReceive(hspi);
;;;2122       
;;;2123       hspi->State = HAL_SPI_STATE_READY;
;;;2124       
;;;2125       /* Check if Errors has been detected during transfer */
;;;2126       if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
;;;2127       {
;;;2128         HAL_SPI_ErrorCallback(hspi);
;;;2129       }
;;;2130       else
;;;2131       {
;;;2132         HAL_SPI_TxRxCpltCallback(hspi);
;;;2133       }
;;;2134     }
;;;2135     else
;;;2136     {
;;;2137       HAL_SPI_TxRxCpltCallback(hspi);
000f50  4620              MOV      r0,r4
000f52  f7fffffe          BL       HAL_SPI_TxRxCpltCallback
;;;2138     }
;;;2139   }
000f56  bd10              POP      {r4,pc}
                  |L1.3928|
000f58  4620              MOV      r0,r4                 ;2121
000f5a  f7fffffe          BL       _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd25SPI_DMAEndTransmitReceiveEP19__SPI_HandleTypeDef ; [local to stm32f4xx_hal_spi_c]::SPI_DMAEndTransmitReceive(__SPI_HandleTypeDef*)
000f5e  2001              MOVS     r0,#1                 ;2123
000f60  f8840051          STRB     r0,[r4,#0x51]         ;2123
000f64  6d60              LDR      r0,[r4,#0x54]         ;2126
000f66  b118              CBZ      r0,|L1.3952|
000f68  4620              MOV      r0,r4                 ;2128
000f6a  f7fffffe          BL       HAL_SPI_ErrorCallback
000f6e  bd10              POP      {r4,pc}
                  |L1.3952|
000f70  4620              MOV      r0,r4                 ;2132
000f72  f7fffffe          BL       HAL_SPI_TxRxCpltCallback
000f76  bd10              POP      {r4,pc}
;;;2140   
                          ENDP

                  HAL_SPI_TxRxHalfCpltCallback PROC
;;;1626     */
;;;1627   __weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
000f78  4770              BX       lr
;;;1628   {
;;;1629     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1630               the HAL_SPI_TxRxHalfCpltCallback() could be implemented in the user file
;;;1631      */
;;;1632   }
;;;1633   
                          ENDP

                  _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd30SPI_DMAHalfTransmitReceiveCpltEP19__DMA_HandleTypeDef PROC ; [local to stm32f4xx_hal_spi_c]::SPI_DMAHalfTransmitReceiveCplt(__DMA_HandleTypeDef*)
;;;2172     */
;;;2173   static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)   
000f7a  b510              PUSH     {r4,lr}
;;;2174   {
;;;2175     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000f7c  6b80              LDR      r0,[r0,#0x38]
;;;2176   
;;;2177     HAL_SPI_TxRxHalfCpltCallback(hspi);
000f7e  f7fffffe          BL       HAL_SPI_TxRxHalfCpltCallback
;;;2178   }
000f82  bd10              POP      {r4,pc}
;;;2179   
                          ENDP

                  HAL_SPI_TransmitReceive_DMA PROC
;;;1301     */
;;;1302   HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
000f84  b570              PUSH     {r4-r6,lr}
;;;1303   {
000f86  4604              MOV      r4,r0
;;;1304     uint32_t tmpstate = 0;
;;;1305     tmpstate = hspi->State;
000f88  f8940051          LDRB     r0,[r4,#0x51]
;;;1306     if((tmpstate == HAL_SPI_STATE_READY) || ((hspi->Init.Mode == SPI_MODE_MASTER) && \
000f8c  2801              CMP      r0,#1
000f8e  d00d              BEQ      |L1.4012|
000f90  f8d4c004          LDR      r12,[r4,#4]
000f94  f5bc7f82          CMP      r12,#0x104
000f98  d106              BNE      |L1.4008|
;;;1307        (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmpstate == HAL_SPI_STATE_BUSY_RX)))
000f9a  f8d4c008          LDR      r12,[r4,#8]
000f9e  f1bc0f00          CMP      r12,#0
000fa2  d101              BNE      |L1.4008|
000fa4  2822              CMP      r0,#0x22
000fa6  d001              BEQ      |L1.4012|
                  |L1.4008|
;;;1308     {
;;;1309       if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0))
;;;1310       {
;;;1311         return  HAL_ERROR;
;;;1312       }
;;;1313   
;;;1314       /* Check the parameters */
;;;1315       assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
;;;1316       
;;;1317       /* Process locked */
;;;1318       __HAL_LOCK(hspi);
;;;1319   
;;;1320       /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
;;;1321       if(hspi->State != HAL_SPI_STATE_BUSY_RX)
;;;1322       {
;;;1323         hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
;;;1324       }
;;;1325   
;;;1326       /* Configure communication */
;;;1327       hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;1328   
;;;1329       hspi->pTxBuffPtr  = (uint8_t*)pTxData;
;;;1330       hspi->TxXferSize  = Size;
;;;1331       hspi->TxXferCount = Size;
;;;1332   
;;;1333       hspi->pRxBuffPtr  = (uint8_t*)pRxData;
;;;1334       hspi->RxXferSize  = Size;
;;;1335       hspi->RxXferCount = Size;
;;;1336   
;;;1337       /*Init field not used in handle to zero */
;;;1338       hspi->RxISR = 0;
;;;1339       hspi->TxISR = 0;
;;;1340   
;;;1341       /* Reset CRC Calculation */
;;;1342       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1343       {
;;;1344         SPI_RESET_CRC(hspi);
;;;1345       }
;;;1346   
;;;1347       /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
;;;1348       if(hspi->State == HAL_SPI_STATE_BUSY_RX)
;;;1349       {
;;;1350         /* Set the SPI Rx DMA Half transfer complete callback */
;;;1351         hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
;;;1352         
;;;1353         hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
;;;1354       }
;;;1355       else
;;;1356       {
;;;1357         /* Set the SPI Tx/Rx DMA Half transfer complete callback */
;;;1358         hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
;;;1359     
;;;1360         hspi->hdmarx->XferCpltCallback = SPI_DMATransmitReceiveCplt;
;;;1361       }
;;;1362   
;;;1363       /* Set the DMA error callback */
;;;1364       hspi->hdmarx->XferErrorCallback = SPI_DMAError;
;;;1365   
;;;1366       /* Enable the Rx DMA Stream */
;;;1367       HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
;;;1368   
;;;1369       /* Enable Rx DMA Request */  
;;;1370       hspi->Instance->CR2 |= SPI_CR2_RXDMAEN;
;;;1371   
;;;1372       /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
;;;1373       is performed in DMA reception complete callback  */
;;;1374       hspi->hdmatx->XferCpltCallback = NULL;
;;;1375       
;;;1376       if(hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
;;;1377       {
;;;1378         /* Set the DMA error callback */
;;;1379         hspi->hdmatx->XferErrorCallback = SPI_DMAError;
;;;1380       }
;;;1381       else
;;;1382       {
;;;1383         hspi->hdmatx->XferErrorCallback = NULL;
;;;1384       }    
;;;1385       
;;;1386       /* Enable the Tx DMA Stream */
;;;1387       HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
;;;1388   
;;;1389       /* Process Unlocked */
;;;1390       __HAL_UNLOCK(hspi);
;;;1391   
;;;1392       /* Check if the SPI is already enabled */ 
;;;1393       if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1394       {
;;;1395         /* Enable SPI peripheral */
;;;1396         __HAL_SPI_ENABLE(hspi);
;;;1397       }
;;;1398   
;;;1399       /* Enable Tx DMA Request */  
;;;1400       hspi->Instance->CR2 |= SPI_CR2_TXDMAEN;
;;;1401   
;;;1402       return HAL_OK;
;;;1403     }
;;;1404     else
;;;1405     {
;;;1406       return HAL_BUSY;
000fa8  2002              MOVS     r0,#2
;;;1407     }
;;;1408   }
000faa  bd70              POP      {r4-r6,pc}
                  |L1.4012|
000fac  b1f1              CBZ      r1,|L1.4076|
000fae  b1ea              CBZ      r2,|L1.4076|
000fb0  b1e3              CBZ      r3,|L1.4076|
000fb2  f8940050          LDRB     r0,[r4,#0x50]         ;1318
000fb6  2801              CMP      r0,#1                 ;1318
000fb8  d01a              BEQ      |L1.4080|
000fba  2001              MOVS     r0,#1                 ;1318
000fbc  f8840050          STRB     r0,[r4,#0x50]         ;1318
000fc0  f8940051          LDRB     r0,[r4,#0x51]         ;1321
000fc4  2822              CMP      r0,#0x22              ;1321
000fc6  d002              BEQ      |L1.4046|
000fc8  2032              MOVS     r0,#0x32              ;1323
000fca  f8840051          STRB     r0,[r4,#0x51]         ;1323
                  |L1.4046|
000fce  2500              MOVS     r5,#0                 ;1327
000fd0  6565              STR      r5,[r4,#0x54]         ;1327
000fd2  6321              STR      r1,[r4,#0x30]         ;1329
000fd4  86a3              STRH     r3,[r4,#0x34]         ;1330
000fd6  86e3              STRH     r3,[r4,#0x36]         ;1331
000fd8  63a2              STR      r2,[r4,#0x38]         ;1333
000fda  87a3              STRH     r3,[r4,#0x3c]         ;1334
000fdc  87e3              STRH     r3,[r4,#0x3e]         ;1335
000fde  64a5              STR      r5,[r4,#0x48]         ;1338
000fe0  64e5              STR      r5,[r4,#0x4c]         ;1339
000fe2  6aa0              LDR      r0,[r4,#0x28]         ;1342
000fe4  f5b05f00          CMP      r0,#0x2000            ;1342
000fe8  d004              BEQ      |L1.4084|
000fea  e00d              B        |L1.4104|
                  |L1.4076|
000fec  2001              MOVS     r0,#1                 ;1311
000fee  bd70              POP      {r4-r6,pc}
                  |L1.4080|
000ff0  2002              MOVS     r0,#2                 ;1318
000ff2  bd70              POP      {r4-r6,pc}
                  |L1.4084|
000ff4  6820              LDR      r0,[r4,#0]            ;1344
000ff6  6801              LDR      r1,[r0,#0]            ;1344
000ff8  f4215100          BIC      r1,r1,#0x2000         ;1344
000ffc  6001              STR      r1,[r0,#0]            ;1344
000ffe  6820              LDR      r0,[r4,#0]            ;1344
001000  6801              LDR      r1,[r0,#0]            ;1344
001002  f4415100          ORR      r1,r1,#0x2000         ;1344
001006  6001              STR      r1,[r0,#0]            ;1344
                  |L1.4104|
001008  f8940051          LDRB     r0,[r4,#0x51]         ;1348
00100c  2822              CMP      r0,#0x22              ;1348
00100e  d02d              BEQ      |L1.4204|
001010  6c61              LDR      r1,[r4,#0x44]         ;1358
001012  48b0              LDR      r0,|L1.4820|
001014  6408              STR      r0,[r1,#0x40]         ;1358
001016  6c61              LDR      r1,[r4,#0x44]         ;1360
001018  48af              LDR      r0,|L1.4824|
00101a  63c8              STR      r0,[r1,#0x3c]         ;1360
                  |L1.4124|
00101c  6c60              LDR      r0,[r4,#0x44]         ;1364
00101e  4eaf              LDR      r6,|L1.4828|
001020  6486              STR      r6,[r0,#0x48]         ;1364
001022  6820              LDR      r0,[r4,#0]            ;1367
001024  8fe3              LDRH     r3,[r4,#0x3e]         ;1367
001026  f100010c          ADD      r1,r0,#0xc            ;1367
00102a  6ba2              LDR      r2,[r4,#0x38]         ;1367
00102c  6c60              LDR      r0,[r4,#0x44]         ;1367
00102e  f7fffffe          BL       HAL_DMA_Start_IT
001032  6820              LDR      r0,[r4,#0]            ;1370
001034  6841              LDR      r1,[r0,#4]            ;1370
001036  f0410101          ORR      r1,r1,#1              ;1370
00103a  6041              STR      r1,[r0,#4]            ;1370
00103c  6c20              LDR      r0,[r4,#0x40]         ;1374
00103e  63c5              STR      r5,[r0,#0x3c]         ;1374
001040  f8940051          LDRB     r0,[r4,#0x51]         ;1376
001044  2832              CMP      r0,#0x32              ;1376
001046  d018              BEQ      |L1.4218|
001048  6c20              LDR      r0,[r4,#0x40]         ;1383
00104a  6485              STR      r5,[r0,#0x48]         ;1383
                  |L1.4172|
00104c  6820              LDR      r0,[r4,#0]            ;1387
00104e  8ee3              LDRH     r3,[r4,#0x36]         ;1387
001050  f100020c          ADD      r2,r0,#0xc            ;1387
001054  6b21              LDR      r1,[r4,#0x30]         ;1387
001056  6c20              LDR      r0,[r4,#0x40]         ;1387
001058  f7fffffe          BL       HAL_DMA_Start_IT
00105c  f8845050          STRB     r5,[r4,#0x50]         ;1390
001060  6820              LDR      r0,[r4,#0]            ;1393
001062  6801              LDR      r1,[r0,#0]            ;1393
001064  f0110f40          TST      r1,#0x40              ;1393
001068  d00a              BEQ      |L1.4224|
00106a  e00d              B        |L1.4232|
                  |L1.4204|
00106c  6c61              LDR      r1,[r4,#0x44]         ;1351
00106e  489c              LDR      r0,|L1.4832|
001070  6408              STR      r0,[r1,#0x40]         ;1351
001072  6c61              LDR      r1,[r4,#0x44]         ;1353
001074  489b              LDR      r0,|L1.4836|
001076  63c8              STR      r0,[r1,#0x3c]         ;1353
001078  e7d0              B        |L1.4124|
                  |L1.4218|
00107a  6c20              LDR      r0,[r4,#0x40]         ;1379
00107c  6486              STR      r6,[r0,#0x48]         ;1379
00107e  e7e5              B        |L1.4172|
                  |L1.4224|
001080  6801              LDR      r1,[r0,#0]            ;1396
001082  f0410140          ORR      r1,r1,#0x40           ;1396
001086  6001              STR      r1,[r0,#0]            ;1396
                  |L1.4232|
001088  6820              LDR      r0,[r4,#0]            ;1400
00108a  6841              LDR      r1,[r0,#4]            ;1400
00108c  f0410102          ORR      r1,r1,#2              ;1400
001090  6041              STR      r1,[r0,#4]            ;1400
001092  2000              MOVS     r0,#0                 ;1402
001094  bd70              POP      {r4-r6,pc}
;;;1409   
                          ENDP

                  HAL_SPI_Receive_DMA PROC
;;;1212     */
;;;1213   HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
001096  b570              PUSH     {r4-r6,lr}
;;;1214   {
001098  4604              MOV      r4,r0
;;;1215     if(hspi->State == HAL_SPI_STATE_READY)
00109a  f8940051          LDRB     r0,[r4,#0x51]
00109e  2801              CMP      r0,#1
0010a0  d001              BEQ      |L1.4262|
;;;1216     {
;;;1217       if((pData == NULL) || (Size == 0))
;;;1218       {
;;;1219         return  HAL_ERROR;
;;;1220       }
;;;1221   
;;;1222       /* Process Locked */
;;;1223       __HAL_LOCK(hspi);
;;;1224   
;;;1225       /* Configure communication */
;;;1226       hspi->State       = HAL_SPI_STATE_BUSY_RX;
;;;1227       hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;1228   
;;;1229       hspi->pRxBuffPtr  = pData;
;;;1230       hspi->RxXferSize  = Size;
;;;1231       hspi->RxXferCount = Size;
;;;1232   
;;;1233       /*Init field not used in handle to zero */
;;;1234       hspi->RxISR = 0;
;;;1235       hspi->TxISR = 0;
;;;1236       hspi->TxXferSize   = 0;
;;;1237       hspi->TxXferCount  = 0;
;;;1238   
;;;1239       /* Configure communication direction : 1Line */
;;;1240       if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
;;;1241       {
;;;1242          SPI_1LINE_RX(hspi);
;;;1243       }
;;;1244       else if((hspi->Init.Direction == SPI_DIRECTION_2LINES)&&(hspi->Init.Mode == SPI_MODE_MASTER))
;;;1245       {
;;;1246          /* Process Unlocked */
;;;1247          __HAL_UNLOCK(hspi);
;;;1248   
;;;1249          /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
;;;1250          return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
;;;1251       }
;;;1252   
;;;1253       /* Reset CRC Calculation */
;;;1254       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1255       {
;;;1256         SPI_RESET_CRC(hspi);
;;;1257       }
;;;1258   
;;;1259       /* Set the SPI RxDMA Half transfer complete callback */
;;;1260       hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
;;;1261       
;;;1262       /* Set the SPI Rx DMA transfer complete callback */
;;;1263       hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
;;;1264   
;;;1265       /* Set the DMA error callback */
;;;1266       hspi->hdmarx->XferErrorCallback = SPI_DMAError;
;;;1267   
;;;1268       /* Enable the Rx DMA Stream */
;;;1269       HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
;;;1270   
;;;1271       /* Process Unlocked */
;;;1272       __HAL_UNLOCK(hspi);
;;;1273   
;;;1274       /* Check if the SPI is already enabled */ 
;;;1275       if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1276       {
;;;1277         /* Enable SPI peripheral */
;;;1278         __HAL_SPI_ENABLE(hspi);
;;;1279       }
;;;1280   
;;;1281       /* Enable Rx DMA Request */  
;;;1282       hspi->Instance->CR2 |= SPI_CR2_RXDMAEN;
;;;1283   
;;;1284       return HAL_OK;
;;;1285     }
;;;1286     else
;;;1287     {
;;;1288       return HAL_BUSY;
0010a2  2002              MOVS     r0,#2
;;;1289     }
;;;1290   }
0010a4  bd70              POP      {r4-r6,pc}
                  |L1.4262|
0010a6  b1c9              CBZ      r1,|L1.4316|
0010a8  b1c2              CBZ      r2,|L1.4316|
0010aa  f8940050          LDRB     r0,[r4,#0x50]         ;1223
0010ae  2801              CMP      r0,#1                 ;1223
0010b0  d016              BEQ      |L1.4320|
0010b2  2001              MOVS     r0,#1                 ;1223
0010b4  f8840050          STRB     r0,[r4,#0x50]         ;1223
0010b8  2022              MOVS     r0,#0x22              ;1226
0010ba  f8840051          STRB     r0,[r4,#0x51]         ;1226
0010be  2500              MOVS     r5,#0                 ;1227
0010c0  6565              STR      r5,[r4,#0x54]         ;1227
0010c2  63a1              STR      r1,[r4,#0x38]         ;1229
0010c4  87a2              STRH     r2,[r4,#0x3c]         ;1230
0010c6  87e2              STRH     r2,[r4,#0x3e]         ;1231
0010c8  64a5              STR      r5,[r4,#0x48]         ;1234
0010ca  64e5              STR      r5,[r4,#0x4c]         ;1235
0010cc  86a5              STRH     r5,[r4,#0x34]         ;1236
0010ce  86e5              STRH     r5,[r4,#0x36]         ;1237
0010d0  68a0              LDR      r0,[r4,#8]            ;1240
0010d2  f5b04f00          CMP      r0,#0x8000            ;1240
0010d6  d005              BEQ      |L1.4324|
0010d8  b150              CBZ      r0,|L1.4336|
0010da  e00d              B        |L1.4344|
                  |L1.4316|
0010dc  2001              MOVS     r0,#1                 ;1219
0010de  bd70              POP      {r4-r6,pc}
                  |L1.4320|
0010e0  2002              MOVS     r0,#2                 ;1223
0010e2  bd70              POP      {r4-r6,pc}
                  |L1.4324|
0010e4  6820              LDR      r0,[r4,#0]            ;1242
0010e6  6801              LDR      r1,[r0,#0]            ;1242
0010e8  f4214180          BIC      r1,r1,#0x4000         ;1242
0010ec  6001              STR      r1,[r0,#0]            ;1242
0010ee  e003              B        |L1.4344|
                  |L1.4336|
0010f0  6860              LDR      r0,[r4,#4]            ;1244
0010f2  f5b07f82          CMP      r0,#0x104             ;1244
0010f6  d004              BEQ      |L1.4354|
                  |L1.4344|
0010f8  6aa0              LDR      r0,[r4,#0x28]         ;1254
0010fa  f5b05f00          CMP      r0,#0x2000            ;1254
0010fe  d008              BEQ      |L1.4370|
001100  e011              B        |L1.4390|
                  |L1.4354|
001102  f8845050          STRB     r5,[r4,#0x50]         ;1247
001106  4620              MOV      r0,r4                 ;1250
001108  e8bd4070          POP      {r4-r6,lr}            ;1250
00110c  4613              MOV      r3,r2                 ;1250
00110e  460a              MOV      r2,r1                 ;1250
001110  e7fe              B        HAL_SPI_TransmitReceive_DMA
                  |L1.4370|
001112  6820              LDR      r0,[r4,#0]            ;1256
001114  6801              LDR      r1,[r0,#0]            ;1256
001116  f4215100          BIC      r1,r1,#0x2000         ;1256
00111a  6001              STR      r1,[r0,#0]            ;1256
00111c  6820              LDR      r0,[r4,#0]            ;1256
00111e  6801              LDR      r1,[r0,#0]            ;1256
001120  f4415100          ORR      r1,r1,#0x2000         ;1256
001124  6001              STR      r1,[r0,#0]            ;1256
                  |L1.4390|
001126  6c61              LDR      r1,[r4,#0x44]         ;1260
001128  486d              LDR      r0,|L1.4832|
00112a  6408              STR      r0,[r1,#0x40]         ;1260
00112c  6c61              LDR      r1,[r4,#0x44]         ;1263
00112e  486d              LDR      r0,|L1.4836|
001130  63c8              STR      r0,[r1,#0x3c]         ;1263
001132  6c61              LDR      r1,[r4,#0x44]         ;1266
001134  4869              LDR      r0,|L1.4828|
001136  6488              STR      r0,[r1,#0x48]         ;1266
001138  6820              LDR      r0,[r4,#0]            ;1269
00113a  8fe3              LDRH     r3,[r4,#0x3e]         ;1269
00113c  f100010c          ADD      r1,r0,#0xc            ;1269
001140  6ba2              LDR      r2,[r4,#0x38]         ;1269
001142  6c60              LDR      r0,[r4,#0x44]         ;1269
001144  f7fffffe          BL       HAL_DMA_Start_IT
001148  f8845050          STRB     r5,[r4,#0x50]         ;1272
00114c  6820              LDR      r0,[r4,#0]            ;1275
00114e  6801              LDR      r1,[r0,#0]            ;1275
001150  f0110f40          TST      r1,#0x40              ;1275
001154  d103              BNE      |L1.4446|
001156  6801              LDR      r1,[r0,#0]            ;1278
001158  f0410140          ORR      r1,r1,#0x40           ;1278
00115c  6001              STR      r1,[r0,#0]            ;1278
                  |L1.4446|
00115e  6820              LDR      r0,[r4,#0]            ;1282
001160  6841              LDR      r1,[r0,#4]            ;1282
001162  f0410101          ORR      r1,r1,#1              ;1282
001166  6041              STR      r1,[r0,#4]            ;1282
001168  2000              MOVS     r0,#0                 ;1284
00116a  bd70              POP      {r4-r6,pc}
;;;1291   
                          ENDP

                  HAL_SPI_DMAPause PROC
;;;1415     */
;;;1416   HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
00116c  f8901050          LDRB     r1,[r0,#0x50]
;;;1417   {
;;;1418     /* Process Locked */
;;;1419     __HAL_LOCK(hspi);
001170  2901              CMP      r1,#1
001172  d011              BEQ      |L1.4504|
001174  2101              MOVS     r1,#1
001176  f8801050          STRB     r1,[r0,#0x50]
;;;1420     
;;;1421     /* Disable the SPI DMA Tx & Rx requests */
;;;1422     hspi->Instance->CR2 &= (uint32_t)(~SPI_CR2_TXDMAEN);
00117a  6801              LDR      r1,[r0,#0]
00117c  684a              LDR      r2,[r1,#4]
00117e  f0220202          BIC      r2,r2,#2
001182  604a              STR      r2,[r1,#4]
;;;1423     hspi->Instance->CR2 &= (uint32_t)(~SPI_CR2_RXDMAEN);
001184  6801              LDR      r1,[r0,#0]
001186  684a              LDR      r2,[r1,#4]
001188  f0220201          BIC      r2,r2,#1
00118c  604a              STR      r2,[r1,#4]
;;;1424     
;;;1425     /* Process Unlocked */
;;;1426     __HAL_UNLOCK(hspi);
00118e  2100              MOVS     r1,#0
001190  f8801050          STRB     r1,[r0,#0x50]
;;;1427     
;;;1428     return HAL_OK; 
001194  2000              MOVS     r0,#0
;;;1429   }
001196  4770              BX       lr
                  |L1.4504|
001198  2002              MOVS     r0,#2                 ;1419
00119a  4770              BX       lr
;;;1430   
                          ENDP

                  HAL_SPI_DMAResume PROC
;;;1436     */
;;;1437   HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
00119c  f8901050          LDRB     r1,[r0,#0x50]
;;;1438   {
;;;1439     /* Process Locked */
;;;1440     __HAL_LOCK(hspi);
0011a0  2901              CMP      r1,#1
0011a2  d011              BEQ      |L1.4552|
0011a4  2101              MOVS     r1,#1
0011a6  f8801050          STRB     r1,[r0,#0x50]
;;;1441     
;;;1442     /* Enable the SPI DMA Tx & Rx requests */
;;;1443     hspi->Instance->CR2 |= SPI_CR2_TXDMAEN;
0011aa  6801              LDR      r1,[r0,#0]
0011ac  684a              LDR      r2,[r1,#4]
0011ae  f0420202          ORR      r2,r2,#2
0011b2  604a              STR      r2,[r1,#4]
;;;1444     hspi->Instance->CR2 |= SPI_CR2_RXDMAEN;
0011b4  6801              LDR      r1,[r0,#0]
0011b6  684a              LDR      r2,[r1,#4]
0011b8  f0420201          ORR      r2,r2,#1
0011bc  604a              STR      r2,[r1,#4]
;;;1445     
;;;1446     /* Process Unlocked */
;;;1447     __HAL_UNLOCK(hspi);
0011be  2100              MOVS     r1,#0
0011c0  f8801050          STRB     r1,[r0,#0x50]
;;;1448     
;;;1449     return HAL_OK;
0011c4  2000              MOVS     r0,#0
;;;1450   }
0011c6  4770              BX       lr
                  |L1.4552|
0011c8  2002              MOVS     r0,#2                 ;1440
0011ca  4770              BX       lr
;;;1451   
                          ENDP

                  HAL_SPI_DMAStop PROC
;;;1457     */
;;;1458   HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
0011cc  b510              PUSH     {r4,lr}
;;;1459   {
0011ce  4604              MOV      r4,r0
;;;1460     /* The Lock is not implemented on this API to allow the user application
;;;1461        to call the HAL SPI API under callbacks HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback():
;;;1462        when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
;;;1463        and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
;;;1464        */
;;;1465     
;;;1466     /* Abort the SPI DMA tx Stream */
;;;1467     if(hspi->hdmatx != NULL)
0011d0  6c20              LDR      r0,[r4,#0x40]
0011d2  2800              CMP      r0,#0
0011d4  d001              BEQ      |L1.4570|
;;;1468     {
;;;1469       HAL_DMA_Abort(hspi->hdmatx);
0011d6  f7fffffe          BL       HAL_DMA_Abort
                  |L1.4570|
;;;1470     }
;;;1471     /* Abort the SPI DMA rx Stream */
;;;1472     if(hspi->hdmarx != NULL)
0011da  6c60              LDR      r0,[r4,#0x44]
0011dc  b108              CBZ      r0,|L1.4578|
;;;1473     {
;;;1474       HAL_DMA_Abort(hspi->hdmarx);
0011de  f7fffffe          BL       HAL_DMA_Abort
                  |L1.4578|
;;;1475     }
;;;1476     
;;;1477     /* Disable the SPI DMA Tx & Rx requests */
;;;1478     hspi->Instance->CR2 &= (uint32_t)(~SPI_CR2_TXDMAEN);
0011e2  6820              LDR      r0,[r4,#0]
0011e4  6841              LDR      r1,[r0,#4]
0011e6  f0210102          BIC      r1,r1,#2
0011ea  6041              STR      r1,[r0,#4]
;;;1479     hspi->Instance->CR2 &= (uint32_t)(~SPI_CR2_RXDMAEN);
0011ec  6820              LDR      r0,[r4,#0]
0011ee  6841              LDR      r1,[r0,#4]
0011f0  f0210101          BIC      r1,r1,#1
0011f4  6041              STR      r1,[r0,#4]
;;;1480     
;;;1481     hspi->State = HAL_SPI_STATE_READY;
0011f6  2001              MOVS     r0,#1
0011f8  f8840051          STRB     r0,[r4,#0x51]
;;;1482     
;;;1483     return HAL_OK;
0011fc  2000              MOVS     r0,#0
;;;1484   }
0011fe  bd10              POP      {r4,pc}
;;;1485   
                          ENDP

                  HAL_SPI_IRQHandler PROC
;;;1491     */
;;;1492   void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
001200  b508              PUSH     {r3,lr}
;;;1493   {
;;;1494     uint32_t tmp1 = 0, tmp2 = 0, tmp3 = 0;
;;;1495   
;;;1496     tmp1 = __HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE);
001202  6801              LDR      r1,[r0,#0]
001204  688a              LDR      r2,[r1,#8]
001206  f0020201          AND      r2,r2,#1
;;;1497     tmp2 = __HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_RXNE);
00120a  684b              LDR      r3,[r1,#4]
00120c  f3c31380          UBFX     r3,r3,#6,#1
;;;1498     tmp3 = __HAL_SPI_GET_FLAG(hspi, SPI_FLAG_OVR);
001210  f8d1c008          LDR      r12,[r1,#8]
001214  f3cc1c80          UBFX     r12,r12,#6,#1
;;;1499     /* SPI in mode Receiver and Overrun not occurred ---------------------------*/
;;;1500     if((tmp1 != RESET) && (tmp2 != RESET) && (tmp3 == RESET))
001218  2a00              CMP      r2,#0
00121a  d003              BEQ      |L1.4644|
00121c  b113              CBZ      r3,|L1.4644|
00121e  f1bc0f00          CMP      r12,#0
001222  d00c              BEQ      |L1.4670|
                  |L1.4644|
;;;1501     {
;;;1502       hspi->RxISR(hspi);
;;;1503       return;
;;;1504     } 
;;;1505   
;;;1506     tmp1 = __HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE);
001224  688a              LDR      r2,[r1,#8]
001226  f3c20340          UBFX     r3,r2,#1,#1
;;;1507     tmp2 = __HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_TXE);
00122a  684a              LDR      r2,[r1,#4]
00122c  f3c212c0          UBFX     r2,r2,#7,#1
;;;1508     /* SPI in mode Transmitter ---------------------------------------------------*/
;;;1509     if((tmp1 != RESET) && (tmp2 != RESET))
001230  b153              CBZ      r3,|L1.4680|
001232  b14a              CBZ      r2,|L1.4680|
;;;1510     {
;;;1511       hspi->TxISR(hspi);
001234  6cc1              LDR      r1,[r0,#0x4c]
001236  b001              ADD      sp,sp,#4
001238  f85deb04          POP      {lr}
00123c  4708              BX       r1
                  |L1.4670|
00123e  6c81              LDR      r1,[r0,#0x48]         ;1502
001240  b001              ADD      sp,sp,#4              ;1502
001242  f85deb04          POP      {lr}                  ;1502
001246  4708              BX       r1                    ;1502
                  |L1.4680|
;;;1512       return;
;;;1513     }
;;;1514   
;;;1515     if(__HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_ERR) != RESET)
001248  684a              LDR      r2,[r1,#4]
00124a  f0120f20          TST      r2,#0x20
00124e  d03b              BEQ      |L1.4808|
;;;1516     {
;;;1517       /* SPI CRC error interrupt occurred ---------------------------------------*/
;;;1518       if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
001250  688a              LDR      r2,[r1,#8]
001252  f0120f10          TST      r2,#0x10
001256  d006              BEQ      |L1.4710|
;;;1519       {
;;;1520         hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
001258  6d42              LDR      r2,[r0,#0x54]
00125a  f0420202          ORR      r2,r2,#2
00125e  6542              STR      r2,[r0,#0x54]
;;;1521         __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
001260  f06f0210          MVN      r2,#0x10
001264  608a              STR      r2,[r1,#8]
                  |L1.4710|
;;;1522       }
;;;1523       /* SPI Mode Fault error interrupt occurred --------------------------------*/
;;;1524       if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_MODF) != RESET)
001266  6801              LDR      r1,[r0,#0]
001268  688a              LDR      r2,[r1,#8]
00126a  f0120f20          TST      r2,#0x20
00126e  d009              BEQ      |L1.4740|
;;;1525       {
;;;1526         hspi->ErrorCode |= HAL_SPI_ERROR_MODF;
001270  6d42              LDR      r2,[r0,#0x54]
001272  f0420201          ORR      r2,r2,#1
001276  6542              STR      r2,[r0,#0x54]
;;;1527         __HAL_SPI_CLEAR_MODFFLAG(hspi);
001278  688a              LDR      r2,[r1,#8]
00127a  9200              STR      r2,[sp,#0]
00127c  680a              LDR      r2,[r1,#0]
00127e  f0220240          BIC      r2,r2,#0x40
001282  600a              STR      r2,[r1,#0]
                  |L1.4740|
;;;1528       }
;;;1529       
;;;1530       /* SPI Overrun error interrupt occurred -----------------------------------*/
;;;1531       if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_OVR) != RESET)
001284  6801              LDR      r1,[r0,#0]
001286  688a              LDR      r2,[r1,#8]
001288  f0120f40          TST      r2,#0x40
00128c  d00a              BEQ      |L1.4772|
;;;1532       {
;;;1533         if(hspi->State != HAL_SPI_STATE_BUSY_TX)
00128e  f8902051          LDRB     r2,[r0,#0x51]
001292  2a12              CMP      r2,#0x12
001294  d006              BEQ      |L1.4772|
;;;1534         {
;;;1535           hspi->ErrorCode |= HAL_SPI_ERROR_OVR;
001296  6d42              LDR      r2,[r0,#0x54]
001298  f0420204          ORR      r2,r2,#4
00129c  6542              STR      r2,[r0,#0x54]
;;;1536           __HAL_SPI_CLEAR_OVRFLAG(hspi);      
00129e  68ca              LDR      r2,[r1,#0xc]
0012a0  688a              LDR      r2,[r1,#8]
0012a2  9200              STR      r2,[sp,#0]
                  |L1.4772|
;;;1537         }
;;;1538       }
;;;1539   
;;;1540       /* SPI Frame error interrupt occurred -------------------------------------*/
;;;1541       if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_FRE) != RESET)
0012a4  688a              LDR      r2,[r1,#8]
0012a6  f4127f80          TST      r2,#0x100
0012aa  d005              BEQ      |L1.4792|
;;;1542       {
;;;1543         hspi->ErrorCode |= HAL_SPI_ERROR_FRE;
0012ac  6d42              LDR      r2,[r0,#0x54]
0012ae  f0420208          ORR      r2,r2,#8
0012b2  6542              STR      r2,[r0,#0x54]
;;;1544         __HAL_SPI_CLEAR_FREFLAG(hspi);
0012b4  6889              LDR      r1,[r1,#8]
0012b6  9100              STR      r1,[sp,#0]
                  |L1.4792|
;;;1545       }
;;;1546   
;;;1547       /* Call the Error call Back in case of Errors */
;;;1548       if(hspi->ErrorCode!=HAL_SPI_ERROR_NONE)
0012b8  6d41              LDR      r1,[r0,#0x54]
0012ba  2900              CMP      r1,#0
0012bc  d004              BEQ      |L1.4808|
;;;1549       {
;;;1550         hspi->State = HAL_SPI_STATE_READY;
0012be  2101              MOVS     r1,#1
0012c0  f8801051          STRB     r1,[r0,#0x51]
;;;1551         HAL_SPI_ErrorCallback(hspi);
0012c4  f7fffffe          BL       HAL_SPI_ErrorCallback
                  |L1.4808|
;;;1552       }
;;;1553     }
;;;1554   }
0012c8  bd08              POP      {r3,pc}
;;;1555   
                          ENDP

                  HAL_SPI_GetState PROC
;;;1673     */
;;;1674   HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
0012ca  f8900051          LDRB     r0,[r0,#0x51]
;;;1675   {
;;;1676     return hspi->State;
;;;1677   }
0012ce  4770              BX       lr
;;;1678   
                          ENDP

                  HAL_SPI_GetError PROC
;;;1684     */
;;;1685   uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
0012d0  6d40              LDR      r0,[r0,#0x54]
;;;1686   {
;;;1687     return hspi->ErrorCode;
;;;1688   }
0012d2  4770              BX       lr
;;;1689   
                          ENDP

                  |L1.4820|
                          DCD      _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd30SPI_DMAHalfTransmitReceiveCpltEP19__DMA_HandleTypeDef ; [local to stm32f4xx_hal_spi_c]::SPI_DMAHalfTransmitReceiveCplt(__DMA_HandleTypeDef*)
                  |L1.4824|
                          DCD      _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_DMATransmitReceiveCpltEP19__DMA_HandleTypeDef ; [local to stm32f4xx_hal_spi_c]::SPI_DMATransmitReceiveCplt(__DMA_HandleTypeDef*)
                  |L1.4828|
                          DCD      _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd12SPI_DMAErrorEP19__DMA_HandleTypeDef ; [local to stm32f4xx_hal_spi_c]::SPI_DMAError(__DMA_HandleTypeDef*)
                  |L1.4832|
                          DCD      _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd22SPI_DMAHalfReceiveCpltEP19__DMA_HandleTypeDef ; [local to stm32f4xx_hal_spi_c]::SPI_DMAHalfReceiveCplt(__DMA_HandleTypeDef*)
                  |L1.4836|
                          DCD      _ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd18SPI_DMAReceiveCpltEP19__DMA_HandleTypeDef ; [local to stm32f4xx_hal_spi_c]::SPI_DMAReceiveCplt(__DMA_HandleTypeDef*)

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "drivers\\src\\stm32f4xx_hal_spi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_spi_c_5e7b22bd___ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd7__REV16Ej|
#line 138 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.3.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___19_stm32f4xx_hal_spi_c_5e7b22bd___ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd7__REV16Ej| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_spi_c_5e7b22bd___ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd7__REVSHEi|
#line 153
|__asm___19_stm32f4xx_hal_spi_c_5e7b22bd___ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd7__REVSHEi| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_spi_c_5e7b22bd___ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd5__RRXEj|
#line 328
|__asm___19_stm32f4xx_hal_spi_c_5e7b22bd___ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd5__RRXEj| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
